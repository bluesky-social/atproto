import { CLIENT_ASSERTION_TYPE_JWT_BEARER } from '@atproto/oauth-types'

export type ClientAuth =
  | { method: 'none' }
  | {
      method: 'private_key_jwt'

      /**
       * Algorithm used for client authentication.
       *
       * @note We could allow clients to use a different algorithm over time
       * (e.g. because new safer algorithms become available). For now, we
       * require that the algorithm remains the same, as it is a bad practice to
       * use the same key for different purposes.
       */
      alg: string

      /**
       * ID of the key that was used for client authentication.
       *
       * @note The most important thing to validate is that the actual key didn't change (which is )
       */
      kid: string

      /**
       * Thumbprint of the key used for client authentication. This value must
       * be the same during token refreshes as the thumbprint of the key used
       * during initial token issuance.
       *
       * @note This value is computed by the AS to ensure that the key used for
       * client auth does not change
       */
      jkt: string

      /**
       * Nonce used to prevent replay attacks. This value is generated by the
       * client when generating it's assertion JWT and must be unique for each
       * request.
       *
       * @see {@link https://www.rfc-editor.org/rfc/rfc7523.html#section-3}
       */
      jti: string

      /**
       * "exp" (expiration time) claim that limits the time window during which
       * the JWT can be used.
       *
       * @note This field is optional for legacy reasons.
       */
      exp?: number
    }

/**
 * @note In its previous version, the code was storing the
 * "client_assertion_type" instead of the authentication method, which was
 * confusing and prevented proper comparison with the client's
 * "token_endpoint_auth_method" metadata.
 */
export type ClientAuthLegacy = {
  method: typeof CLIENT_ASSERTION_TYPE_JWT_BEARER
  alg: string
  kid: string
  jkt: string
}
