// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file bsky.proto (package bsky, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3, protoInt64, Timestamp } from '@bufbuild/protobuf'

/**
 * @generated from enum bsky.FeedType
 */
export enum FeedType {
  /**
   * @generated from enum value: FEED_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEED_TYPE_POSTS_AND_AUTHOR_THREADS = 1;
   */
  POSTS_AND_AUTHOR_THREADS = 1,

  /**
   * @generated from enum value: FEED_TYPE_POSTS_NO_REPLIES = 2;
   */
  POSTS_NO_REPLIES = 2,

  /**
   * @generated from enum value: FEED_TYPE_POSTS_WITH_MEDIA = 3;
   */
  POSTS_WITH_MEDIA = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FeedType)
proto3.util.setEnumType(FeedType, 'bsky.FeedType', [
  { no: 0, name: 'FEED_TYPE_UNSPECIFIED' },
  { no: 1, name: 'FEED_TYPE_POSTS_AND_AUTHOR_THREADS' },
  { no: 2, name: 'FEED_TYPE_POSTS_NO_REPLIES' },
  { no: 3, name: 'FEED_TYPE_POSTS_WITH_MEDIA' },
])

/**
 * @generated from message bsky.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: bytes record = 1;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  /**
   * @generated from field: google.protobuf.Timestamp indexed_at = 4;
   */
  indexedAt?: Timestamp

  /**
   * @generated from field: bool taken_down = 5;
   */
  takenDown = false

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp sorted_at = 7;
   */
  sortedAt?: Timestamp

  /**
   * @generated from field: string takedown_ref = 8;
   */
  takedownRef = ''

  constructor(data?: PartialMessage<Record>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.Record'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'indexed_at', kind: 'message', T: Timestamp },
    { no: 5, name: 'taken_down', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: 'created_at', kind: 'message', T: Timestamp },
    { no: 7, name: 'sorted_at', kind: 'message', T: Timestamp },
    {
      no: 8,
      name: 'takedown_ref',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Record {
    return new Record().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Record {
    return new Record().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Record {
    return new Record().fromJsonString(jsonString, options)
  }

  static equals(
    a: Record | PlainMessage<Record> | undefined,
    b: Record | PlainMessage<Record> | undefined,
  ): boolean {
    return proto3.util.equals(Record, a, b)
  }
}

/**
 * @generated from message bsky.GetBlockRecordsRequest
 */
export class GetBlockRecordsRequest extends Message<GetBlockRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetBlockRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlockRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlockRecordsRequest {
    return new GetBlockRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlockRecordsRequest {
    return new GetBlockRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlockRecordsRequest {
    return new GetBlockRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlockRecordsRequest
      | PlainMessage<GetBlockRecordsRequest>
      | undefined,
    b:
      | GetBlockRecordsRequest
      | PlainMessage<GetBlockRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlockRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlockRecordsResponse
 */
export class GetBlockRecordsResponse extends Message<GetBlockRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetBlockRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlockRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlockRecordsResponse {
    return new GetBlockRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlockRecordsResponse {
    return new GetBlockRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlockRecordsResponse {
    return new GetBlockRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlockRecordsResponse
      | PlainMessage<GetBlockRecordsResponse>
      | undefined,
    b:
      | GetBlockRecordsResponse
      | PlainMessage<GetBlockRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlockRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetFeedGeneratorRecordsRequest
 */
export class GetFeedGeneratorRecordsRequest extends Message<GetFeedGeneratorRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetFeedGeneratorRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFeedGeneratorRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFeedGeneratorRecordsRequest {
    return new GetFeedGeneratorRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorRecordsRequest {
    return new GetFeedGeneratorRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorRecordsRequest {
    return new GetFeedGeneratorRecordsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetFeedGeneratorRecordsRequest
      | PlainMessage<GetFeedGeneratorRecordsRequest>
      | undefined,
    b:
      | GetFeedGeneratorRecordsRequest
      | PlainMessage<GetFeedGeneratorRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFeedGeneratorRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetFeedGeneratorRecordsResponse
 */
export class GetFeedGeneratorRecordsResponse extends Message<GetFeedGeneratorRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetFeedGeneratorRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFeedGeneratorRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFeedGeneratorRecordsResponse {
    return new GetFeedGeneratorRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorRecordsResponse {
    return new GetFeedGeneratorRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorRecordsResponse {
    return new GetFeedGeneratorRecordsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetFeedGeneratorRecordsResponse
      | PlainMessage<GetFeedGeneratorRecordsResponse>
      | undefined,
    b:
      | GetFeedGeneratorRecordsResponse
      | PlainMessage<GetFeedGeneratorRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFeedGeneratorRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowRecordsRequest
 */
export class GetFollowRecordsRequest extends Message<GetFollowRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetFollowRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowRecordsRequest {
    return new GetFollowRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowRecordsRequest {
    return new GetFollowRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowRecordsRequest {
    return new GetFollowRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetFollowRecordsRequest
      | PlainMessage<GetFollowRecordsRequest>
      | undefined,
    b:
      | GetFollowRecordsRequest
      | PlainMessage<GetFollowRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowRecordsResponse
 */
export class GetFollowRecordsResponse extends Message<GetFollowRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetFollowRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowRecordsResponse {
    return new GetFollowRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowRecordsResponse {
    return new GetFollowRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowRecordsResponse {
    return new GetFollowRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetFollowRecordsResponse
      | PlainMessage<GetFollowRecordsResponse>
      | undefined,
    b:
      | GetFollowRecordsResponse
      | PlainMessage<GetFollowRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetLikeRecordsRequest
 */
export class GetLikeRecordsRequest extends Message<GetLikeRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetLikeRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikeRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikeRecordsRequest {
    return new GetLikeRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikeRecordsRequest {
    return new GetLikeRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikeRecordsRequest {
    return new GetLikeRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLikeRecordsRequest | PlainMessage<GetLikeRecordsRequest> | undefined,
    b: GetLikeRecordsRequest | PlainMessage<GetLikeRecordsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetLikeRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLikeRecordsResponse
 */
export class GetLikeRecordsResponse extends Message<GetLikeRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetLikeRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikeRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikeRecordsResponse {
    return new GetLikeRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikeRecordsResponse {
    return new GetLikeRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikeRecordsResponse {
    return new GetLikeRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLikeRecordsResponse
      | PlainMessage<GetLikeRecordsResponse>
      | undefined,
    b:
      | GetLikeRecordsResponse
      | PlainMessage<GetLikeRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikeRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetListBlockRecordsRequest
 */
export class GetListBlockRecordsRequest extends Message<GetListBlockRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetListBlockRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListBlockRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListBlockRecordsRequest {
    return new GetListBlockRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListBlockRecordsRequest {
    return new GetListBlockRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListBlockRecordsRequest {
    return new GetListBlockRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListBlockRecordsRequest
      | PlainMessage<GetListBlockRecordsRequest>
      | undefined,
    b:
      | GetListBlockRecordsRequest
      | PlainMessage<GetListBlockRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListBlockRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListBlockRecordsResponse
 */
export class GetListBlockRecordsResponse extends Message<GetListBlockRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetListBlockRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListBlockRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListBlockRecordsResponse {
    return new GetListBlockRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListBlockRecordsResponse {
    return new GetListBlockRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListBlockRecordsResponse {
    return new GetListBlockRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListBlockRecordsResponse
      | PlainMessage<GetListBlockRecordsResponse>
      | undefined,
    b:
      | GetListBlockRecordsResponse
      | PlainMessage<GetListBlockRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListBlockRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetListItemRecordsRequest
 */
export class GetListItemRecordsRequest extends Message<GetListItemRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetListItemRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListItemRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListItemRecordsRequest {
    return new GetListItemRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListItemRecordsRequest {
    return new GetListItemRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListItemRecordsRequest {
    return new GetListItemRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListItemRecordsRequest
      | PlainMessage<GetListItemRecordsRequest>
      | undefined,
    b:
      | GetListItemRecordsRequest
      | PlainMessage<GetListItemRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListItemRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListItemRecordsResponse
 */
export class GetListItemRecordsResponse extends Message<GetListItemRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetListItemRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListItemRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListItemRecordsResponse {
    return new GetListItemRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListItemRecordsResponse {
    return new GetListItemRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListItemRecordsResponse {
    return new GetListItemRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListItemRecordsResponse
      | PlainMessage<GetListItemRecordsResponse>
      | undefined,
    b:
      | GetListItemRecordsResponse
      | PlainMessage<GetListItemRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListItemRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetListRecordsRequest
 */
export class GetListRecordsRequest extends Message<GetListRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetListRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListRecordsRequest {
    return new GetListRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListRecordsRequest {
    return new GetListRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListRecordsRequest {
    return new GetListRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListRecordsRequest | PlainMessage<GetListRecordsRequest> | undefined,
    b: GetListRecordsRequest | PlainMessage<GetListRecordsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetListRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListRecordsResponse
 */
export class GetListRecordsResponse extends Message<GetListRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetListRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListRecordsResponse {
    return new GetListRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListRecordsResponse {
    return new GetListRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListRecordsResponse {
    return new GetListRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListRecordsResponse
      | PlainMessage<GetListRecordsResponse>
      | undefined,
    b:
      | GetListRecordsResponse
      | PlainMessage<GetListRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.PostRecordMeta
 */
export class PostRecordMeta extends Message<PostRecordMeta> {
  /**
   * @generated from field: bool violates_thread_gate = 1;
   */
  violatesThreadGate = false

  /**
   * @generated from field: bool has_media = 2;
   */
  hasMedia = false

  /**
   * @generated from field: bool is_reply = 3;
   */
  isReply = false

  constructor(data?: PartialMessage<PostRecordMeta>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.PostRecordMeta'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'violates_thread_gate',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 2, name: 'has_media', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'is_reply', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PostRecordMeta {
    return new PostRecordMeta().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PostRecordMeta {
    return new PostRecordMeta().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PostRecordMeta {
    return new PostRecordMeta().fromJsonString(jsonString, options)
  }

  static equals(
    a: PostRecordMeta | PlainMessage<PostRecordMeta> | undefined,
    b: PostRecordMeta | PlainMessage<PostRecordMeta> | undefined,
  ): boolean {
    return proto3.util.equals(PostRecordMeta, a, b)
  }
}

/**
 * @generated from message bsky.GetPostRecordsRequest
 */
export class GetPostRecordsRequest extends Message<GetPostRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetPostRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetPostRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetPostRecordsRequest {
    return new GetPostRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetPostRecordsRequest {
    return new GetPostRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetPostRecordsRequest {
    return new GetPostRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetPostRecordsRequest | PlainMessage<GetPostRecordsRequest> | undefined,
    b: GetPostRecordsRequest | PlainMessage<GetPostRecordsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetPostRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetPostRecordsResponse
 */
export class GetPostRecordsResponse extends Message<GetPostRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  /**
   * @generated from field: repeated bsky.PostRecordMeta meta = 2;
   */
  meta: PostRecordMeta[] = []

  constructor(data?: PartialMessage<GetPostRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetPostRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
    { no: 2, name: 'meta', kind: 'message', T: PostRecordMeta, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetPostRecordsResponse {
    return new GetPostRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetPostRecordsResponse {
    return new GetPostRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetPostRecordsResponse {
    return new GetPostRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetPostRecordsResponse
      | PlainMessage<GetPostRecordsResponse>
      | undefined,
    b:
      | GetPostRecordsResponse
      | PlainMessage<GetPostRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetPostRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetProfileRecordsRequest
 */
export class GetProfileRecordsRequest extends Message<GetProfileRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetProfileRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetProfileRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetProfileRecordsRequest {
    return new GetProfileRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetProfileRecordsRequest
      | PlainMessage<GetProfileRecordsRequest>
      | undefined,
    b:
      | GetProfileRecordsRequest
      | PlainMessage<GetProfileRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetProfileRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetProfileRecordsResponse
 */
export class GetProfileRecordsResponse extends Message<GetProfileRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetProfileRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetProfileRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetProfileRecordsResponse {
    return new GetProfileRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetProfileRecordsResponse
      | PlainMessage<GetProfileRecordsResponse>
      | undefined,
    b:
      | GetProfileRecordsResponse
      | PlainMessage<GetProfileRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetProfileRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetActorChatDeclarationRecordsRequest
 */
export class GetActorChatDeclarationRecordsRequest extends Message<GetActorChatDeclarationRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetActorChatDeclarationRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorChatDeclarationRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorChatDeclarationRecordsRequest {
    return new GetActorChatDeclarationRecordsRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorChatDeclarationRecordsRequest {
    return new GetActorChatDeclarationRecordsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorChatDeclarationRecordsRequest {
    return new GetActorChatDeclarationRecordsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorChatDeclarationRecordsRequest
      | PlainMessage<GetActorChatDeclarationRecordsRequest>
      | undefined,
    b:
      | GetActorChatDeclarationRecordsRequest
      | PlainMessage<GetActorChatDeclarationRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorChatDeclarationRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorChatDeclarationRecordsResponse
 */
export class GetActorChatDeclarationRecordsResponse extends Message<GetActorChatDeclarationRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetActorChatDeclarationRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorChatDeclarationRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorChatDeclarationRecordsResponse {
    return new GetActorChatDeclarationRecordsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorChatDeclarationRecordsResponse {
    return new GetActorChatDeclarationRecordsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorChatDeclarationRecordsResponse {
    return new GetActorChatDeclarationRecordsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorChatDeclarationRecordsResponse
      | PlainMessage<GetActorChatDeclarationRecordsResponse>
      | undefined,
    b:
      | GetActorChatDeclarationRecordsResponse
      | PlainMessage<GetActorChatDeclarationRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorChatDeclarationRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetRepostRecordsRequest
 */
export class GetRepostRecordsRequest extends Message<GetRepostRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetRepostRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostRecordsRequest {
    return new GetRepostRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostRecordsRequest {
    return new GetRepostRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostRecordsRequest {
    return new GetRepostRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRepostRecordsRequest
      | PlainMessage<GetRepostRecordsRequest>
      | undefined,
    b:
      | GetRepostRecordsRequest
      | PlainMessage<GetRepostRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetRepostRecordsResponse
 */
export class GetRepostRecordsResponse extends Message<GetRepostRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetRepostRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostRecordsResponse {
    return new GetRepostRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostRecordsResponse {
    return new GetRepostRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostRecordsResponse {
    return new GetRepostRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRepostRecordsResponse
      | PlainMessage<GetRepostRecordsResponse>
      | undefined,
    b:
      | GetRepostRecordsResponse
      | PlainMessage<GetRepostRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetThreadGateRecordsRequest
 */
export class GetThreadGateRecordsRequest extends Message<GetThreadGateRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetThreadGateRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetThreadGateRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetThreadGateRecordsRequest {
    return new GetThreadGateRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetThreadGateRecordsRequest {
    return new GetThreadGateRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetThreadGateRecordsRequest {
    return new GetThreadGateRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetThreadGateRecordsRequest
      | PlainMessage<GetThreadGateRecordsRequest>
      | undefined,
    b:
      | GetThreadGateRecordsRequest
      | PlainMessage<GetThreadGateRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetThreadGateRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetThreadGateRecordsResponse
 */
export class GetThreadGateRecordsResponse extends Message<GetThreadGateRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetThreadGateRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetThreadGateRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetThreadGateRecordsResponse {
    return new GetThreadGateRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetThreadGateRecordsResponse {
    return new GetThreadGateRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetThreadGateRecordsResponse {
    return new GetThreadGateRecordsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetThreadGateRecordsResponse
      | PlainMessage<GetThreadGateRecordsResponse>
      | undefined,
    b:
      | GetThreadGateRecordsResponse
      | PlainMessage<GetThreadGateRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetThreadGateRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetLabelerRecordsRequest
 */
export class GetLabelerRecordsRequest extends Message<GetLabelerRecordsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetLabelerRecordsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLabelerRecordsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLabelerRecordsRequest {
    return new GetLabelerRecordsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLabelerRecordsRequest {
    return new GetLabelerRecordsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLabelerRecordsRequest {
    return new GetLabelerRecordsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLabelerRecordsRequest
      | PlainMessage<GetLabelerRecordsRequest>
      | undefined,
    b:
      | GetLabelerRecordsRequest
      | PlainMessage<GetLabelerRecordsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLabelerRecordsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLabelerRecordsResponse
 */
export class GetLabelerRecordsResponse extends Message<GetLabelerRecordsResponse> {
  /**
   * @generated from field: repeated bsky.Record records = 1;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetLabelerRecordsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLabelerRecordsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLabelerRecordsResponse {
    return new GetLabelerRecordsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLabelerRecordsResponse {
    return new GetLabelerRecordsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLabelerRecordsResponse {
    return new GetLabelerRecordsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLabelerRecordsResponse
      | PlainMessage<GetLabelerRecordsResponse>
      | undefined,
    b:
      | GetLabelerRecordsResponse
      | PlainMessage<GetLabelerRecordsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLabelerRecordsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetAllLabelersRequest
 */
export class GetAllLabelersRequest extends Message<GetAllLabelersRequest> {
  constructor(data?: PartialMessage<GetAllLabelersRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetAllLabelersRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAllLabelersRequest {
    return new GetAllLabelersRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAllLabelersRequest {
    return new GetAllLabelersRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAllLabelersRequest {
    return new GetAllLabelersRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAllLabelersRequest | PlainMessage<GetAllLabelersRequest> | undefined,
    b: GetAllLabelersRequest | PlainMessage<GetAllLabelersRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetAllLabelersRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetAllLabelersResponse
 */
export class GetAllLabelersResponse extends Message<GetAllLabelersResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: repeated bsky.Record records = 2;
   */
  records: Record[] = []

  constructor(data?: PartialMessage<GetAllLabelersResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetAllLabelersResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'records', kind: 'message', T: Record, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAllLabelersResponse {
    return new GetAllLabelersResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAllLabelersResponse {
    return new GetAllLabelersResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAllLabelersResponse {
    return new GetAllLabelersResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAllLabelersResponse
      | PlainMessage<GetAllLabelersResponse>
      | undefined,
    b:
      | GetAllLabelersResponse
      | PlainMessage<GetAllLabelersResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetAllLabelersResponse, a, b)
  }
}

/**
 * - Return follow uris where user A follows users B, C, D, …
 *     - E.g. for viewer state on `getProfiles`
 *
 * @generated from message bsky.GetActorFollowsActorsRequest
 */
export class GetActorFollowsActorsRequest extends Message<GetActorFollowsActorsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated string target_dids = 2;
   */
  targetDids: string[] = []

  constructor(data?: PartialMessage<GetActorFollowsActorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorFollowsActorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'target_dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorFollowsActorsRequest
      | PlainMessage<GetActorFollowsActorsRequest>
      | undefined,
    b:
      | GetActorFollowsActorsRequest
      | PlainMessage<GetActorFollowsActorsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorFollowsActorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorFollowsActorsResponse
 */
export class GetActorFollowsActorsResponse extends Message<GetActorFollowsActorsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetActorFollowsActorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorFollowsActorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorFollowsActorsResponse
      | PlainMessage<GetActorFollowsActorsResponse>
      | undefined,
    b:
      | GetActorFollowsActorsResponse
      | PlainMessage<GetActorFollowsActorsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorFollowsActorsResponse, a, b)
  }
}

/**
 * - Return follow uris of users who follows user A
 *     - For `getFollowers` list
 *
 * @generated from message bsky.GetFollowersRequest
 */
export class GetFollowersRequest extends Message<GetFollowersRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowersRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowersRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowersRequest {
    return new GetFollowersRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowersRequest {
    return new GetFollowersRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowersRequest {
    return new GetFollowersRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFollowersRequest | PlainMessage<GetFollowersRequest> | undefined,
    b: GetFollowersRequest | PlainMessage<GetFollowersRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowersRequest, a, b)
  }
}

/**
 * @generated from message bsky.FollowInfo
 */
export class FollowInfo extends Message<FollowInfo> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string actor_did = 2;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_did = 3;
   */
  subjectDid = ''

  constructor(data?: PartialMessage<FollowInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.FollowInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'subject_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): FollowInfo {
    return new FollowInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): FollowInfo {
    return new FollowInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FollowInfo {
    return new FollowInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: FollowInfo | PlainMessage<FollowInfo> | undefined,
    b: FollowInfo | PlainMessage<FollowInfo> | undefined,
  ): boolean {
    return proto3.util.equals(FollowInfo, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowersResponse
 */
export class GetFollowersResponse extends Message<GetFollowersResponse> {
  /**
   * @generated from field: repeated bsky.FollowInfo followers = 1;
   */
  followers: FollowInfo[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowersResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowersResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'followers',
      kind: 'message',
      T: FollowInfo,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowersResponse {
    return new GetFollowersResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowersResponse {
    return new GetFollowersResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowersResponse {
    return new GetFollowersResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFollowersResponse | PlainMessage<GetFollowersResponse> | undefined,
    b: GetFollowersResponse | PlainMessage<GetFollowersResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowersResponse, a, b)
  }
}

/**
 * - Return follow uris of users A follows
 *     - For `getFollows` list
 *
 * @generated from message bsky.GetFollowsRequest
 */
export class GetFollowsRequest extends Message<GetFollowsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowsRequest {
    return new GetFollowsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsRequest {
    return new GetFollowsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsRequest {
    return new GetFollowsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFollowsRequest | PlainMessage<GetFollowsRequest> | undefined,
    b: GetFollowsRequest | PlainMessage<GetFollowsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowsResponse
 */
export class GetFollowsResponse extends Message<GetFollowsResponse> {
  /**
   * @generated from field: repeated bsky.FollowInfo follows = 1;
   */
  follows: FollowInfo[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'follows', kind: 'message', T: FollowInfo, repeated: true },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowsResponse {
    return new GetFollowsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsResponse {
    return new GetFollowsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsResponse {
    return new GetFollowsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFollowsResponse | PlainMessage<GetFollowsResponse> | undefined,
    b: GetFollowsResponse | PlainMessage<GetFollowsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowsResponse, a, b)
  }
}

/**
 * - return like uris where subject uri is subject A
 *     - `getLikes` list for a post
 *
 * @generated from message bsky.GetLikesBySubjectRequest
 */
export class GetLikesBySubjectRequest extends Message<GetLikesBySubjectRequest> {
  /**
   * @generated from field: bsky.RecordRef subject = 1;
   */
  subject?: RecordRef

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetLikesBySubjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesBySubjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject', kind: 'message', T: RecordRef },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLikesBySubjectRequest
      | PlainMessage<GetLikesBySubjectRequest>
      | undefined,
    b:
      | GetLikesBySubjectRequest
      | PlainMessage<GetLikesBySubjectRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesBySubjectRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLikesBySubjectResponse
 */
export class GetLikesBySubjectResponse extends Message<GetLikesBySubjectResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetLikesBySubjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesBySubjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLikesBySubjectResponse
      | PlainMessage<GetLikesBySubjectResponse>
      | undefined,
    b:
      | GetLikesBySubjectResponse
      | PlainMessage<GetLikesBySubjectResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesBySubjectResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetLikesBySubjectSortedRequest
 */
export class GetLikesBySubjectSortedRequest extends Message<GetLikesBySubjectSortedRequest> {
  /**
   * @generated from field: bsky.RecordRef subject = 1;
   */
  subject?: RecordRef

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetLikesBySubjectSortedRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesBySubjectSortedRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject', kind: 'message', T: RecordRef },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesBySubjectSortedRequest {
    return new GetLikesBySubjectSortedRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectSortedRequest {
    return new GetLikesBySubjectSortedRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectSortedRequest {
    return new GetLikesBySubjectSortedRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetLikesBySubjectSortedRequest
      | PlainMessage<GetLikesBySubjectSortedRequest>
      | undefined,
    b:
      | GetLikesBySubjectSortedRequest
      | PlainMessage<GetLikesBySubjectSortedRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesBySubjectSortedRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLikesBySubjectSortedResponse
 */
export class GetLikesBySubjectSortedResponse extends Message<GetLikesBySubjectSortedResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetLikesBySubjectSortedResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesBySubjectSortedResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesBySubjectSortedResponse {
    return new GetLikesBySubjectSortedResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectSortedResponse {
    return new GetLikesBySubjectSortedResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesBySubjectSortedResponse {
    return new GetLikesBySubjectSortedResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetLikesBySubjectSortedResponse
      | PlainMessage<GetLikesBySubjectSortedResponse>
      | undefined,
    b:
      | GetLikesBySubjectSortedResponse
      | PlainMessage<GetLikesBySubjectSortedResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesBySubjectSortedResponse, a, b)
  }
}

/**
 * - return like uris for user A on subject B, C, D...
 *     - viewer state on posts
 *
 * @generated from message bsky.GetLikesByActorAndSubjectsRequest
 */
export class GetLikesByActorAndSubjectsRequest extends Message<GetLikesByActorAndSubjectsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated bsky.RecordRef refs = 2;
   */
  refs: RecordRef[] = []

  constructor(data?: PartialMessage<GetLikesByActorAndSubjectsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesByActorAndSubjectsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'refs', kind: 'message', T: RecordRef, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesByActorAndSubjectsRequest {
    return new GetLikesByActorAndSubjectsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesByActorAndSubjectsRequest {
    return new GetLikesByActorAndSubjectsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesByActorAndSubjectsRequest {
    return new GetLikesByActorAndSubjectsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetLikesByActorAndSubjectsRequest
      | PlainMessage<GetLikesByActorAndSubjectsRequest>
      | undefined,
    b:
      | GetLikesByActorAndSubjectsRequest
      | PlainMessage<GetLikesByActorAndSubjectsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesByActorAndSubjectsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLikesByActorAndSubjectsResponse
 */
export class GetLikesByActorAndSubjectsResponse extends Message<GetLikesByActorAndSubjectsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetLikesByActorAndSubjectsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLikesByActorAndSubjectsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLikesByActorAndSubjectsResponse {
    return new GetLikesByActorAndSubjectsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLikesByActorAndSubjectsResponse {
    return new GetLikesByActorAndSubjectsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLikesByActorAndSubjectsResponse {
    return new GetLikesByActorAndSubjectsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetLikesByActorAndSubjectsResponse
      | PlainMessage<GetLikesByActorAndSubjectsResponse>
      | undefined,
    b:
      | GetLikesByActorAndSubjectsResponse
      | PlainMessage<GetLikesByActorAndSubjectsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetLikesByActorAndSubjectsResponse, a, b)
  }
}

/**
 * - return recent like uris for user A
 *     - `getActorLikes` list for a user
 *
 * @generated from message bsky.GetActorLikesRequest
 */
export class GetActorLikesRequest extends Message<GetActorLikesRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorLikesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorLikesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorLikesRequest {
    return new GetActorLikesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorLikesRequest {
    return new GetActorLikesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorLikesRequest {
    return new GetActorLikesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorLikesRequest | PlainMessage<GetActorLikesRequest> | undefined,
    b: GetActorLikesRequest | PlainMessage<GetActorLikesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorLikesRequest, a, b)
  }
}

/**
 * @generated from message bsky.LikeInfo
 */
export class LikeInfo extends Message<LikeInfo> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string subject = 2;
   */
  subject = ''

  constructor(data?: PartialMessage<LikeInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.LikeInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'subject', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LikeInfo {
    return new LikeInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LikeInfo {
    return new LikeInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LikeInfo {
    return new LikeInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: LikeInfo | PlainMessage<LikeInfo> | undefined,
    b: LikeInfo | PlainMessage<LikeInfo> | undefined,
  ): boolean {
    return proto3.util.equals(LikeInfo, a, b)
  }
}

/**
 * @generated from message bsky.GetActorLikesResponse
 */
export class GetActorLikesResponse extends Message<GetActorLikesResponse> {
  /**
   * @generated from field: repeated bsky.LikeInfo likes = 1;
   */
  likes: LikeInfo[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorLikesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorLikesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'likes', kind: 'message', T: LikeInfo, repeated: true },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorLikesResponse {
    return new GetActorLikesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorLikesResponse {
    return new GetActorLikesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorLikesResponse {
    return new GetActorLikesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorLikesResponse | PlainMessage<GetActorLikesResponse> | undefined,
    b: GetActorLikesResponse | PlainMessage<GetActorLikesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorLikesResponse, a, b)
  }
}

/**
 *
 * Interactions
 *
 *
 * @generated from message bsky.GetInteractionCountsRequest
 */
export class GetInteractionCountsRequest extends Message<GetInteractionCountsRequest> {
  /**
   * @generated from field: repeated bsky.RecordRef refs = 1;
   */
  refs: RecordRef[] = []

  constructor(data?: PartialMessage<GetInteractionCountsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetInteractionCountsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'refs', kind: 'message', T: RecordRef, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetInteractionCountsRequest {
    return new GetInteractionCountsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetInteractionCountsRequest {
    return new GetInteractionCountsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetInteractionCountsRequest {
    return new GetInteractionCountsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetInteractionCountsRequest
      | PlainMessage<GetInteractionCountsRequest>
      | undefined,
    b:
      | GetInteractionCountsRequest
      | PlainMessage<GetInteractionCountsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetInteractionCountsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetInteractionCountsResponse
 */
export class GetInteractionCountsResponse extends Message<GetInteractionCountsResponse> {
  /**
   * @generated from field: repeated int32 likes = 1;
   */
  likes: number[] = []

  /**
   * @generated from field: repeated int32 reposts = 2;
   */
  reposts: number[] = []

  /**
   * @generated from field: repeated int32 replies = 3;
   */
  replies: number[] = []

  constructor(data?: PartialMessage<GetInteractionCountsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetInteractionCountsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'likes',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 2,
      name: 'reposts',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 3,
      name: 'replies',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetInteractionCountsResponse {
    return new GetInteractionCountsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetInteractionCountsResponse {
    return new GetInteractionCountsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetInteractionCountsResponse {
    return new GetInteractionCountsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetInteractionCountsResponse
      | PlainMessage<GetInteractionCountsResponse>
      | undefined,
    b:
      | GetInteractionCountsResponse
      | PlainMessage<GetInteractionCountsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetInteractionCountsResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetCountsForUsersRequest
 */
export class GetCountsForUsersRequest extends Message<GetCountsForUsersRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  constructor(data?: PartialMessage<GetCountsForUsersRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetCountsForUsersRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCountsForUsersRequest {
    return new GetCountsForUsersRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCountsForUsersRequest
      | PlainMessage<GetCountsForUsersRequest>
      | undefined,
    b:
      | GetCountsForUsersRequest
      | PlainMessage<GetCountsForUsersRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCountsForUsersRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetCountsForUsersResponse
 */
export class GetCountsForUsersResponse extends Message<GetCountsForUsersResponse> {
  /**
   * @generated from field: repeated int32 posts = 1;
   */
  posts: number[] = []

  /**
   * @generated from field: repeated int32 reposts = 2;
   */
  reposts: number[] = []

  /**
   * @generated from field: repeated int32 following = 3;
   */
  following: number[] = []

  /**
   * @generated from field: repeated int32 followers = 4;
   */
  followers: number[] = []

  /**
   * @generated from field: repeated int32 lists = 5;
   */
  lists: number[] = []

  /**
   * @generated from field: repeated int32 feeds = 6;
   */
  feeds: number[] = []

  constructor(data?: PartialMessage<GetCountsForUsersResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetCountsForUsersResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'posts',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 2,
      name: 'reposts',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 3,
      name: 'following',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 4,
      name: 'followers',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 5,
      name: 'lists',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    {
      no: 6,
      name: 'feeds',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCountsForUsersResponse {
    return new GetCountsForUsersResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCountsForUsersResponse
      | PlainMessage<GetCountsForUsersResponse>
      | undefined,
    b:
      | GetCountsForUsersResponse
      | PlainMessage<GetCountsForUsersResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCountsForUsersResponse, a, b)
  }
}

/**
 * - return repost uris where subject uri is subject A
 *     - `getReposts` list for a post
 *
 * @generated from message bsky.GetRepostsBySubjectRequest
 */
export class GetRepostsBySubjectRequest extends Message<GetRepostsBySubjectRequest> {
  /**
   * @generated from field: bsky.RecordRef subject = 1;
   */
  subject?: RecordRef

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetRepostsBySubjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostsBySubjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject', kind: 'message', T: RecordRef },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRepostsBySubjectRequest
      | PlainMessage<GetRepostsBySubjectRequest>
      | undefined,
    b:
      | GetRepostsBySubjectRequest
      | PlainMessage<GetRepostsBySubjectRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostsBySubjectRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetRepostsBySubjectResponse
 */
export class GetRepostsBySubjectResponse extends Message<GetRepostsBySubjectResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetRepostsBySubjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostsBySubjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRepostsBySubjectResponse
      | PlainMessage<GetRepostsBySubjectResponse>
      | undefined,
    b:
      | GetRepostsBySubjectResponse
      | PlainMessage<GetRepostsBySubjectResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostsBySubjectResponse, a, b)
  }
}

/**
 * - return repost uris for user A on subject B, C, D...
 *     - viewer state on posts
 *
 * @generated from message bsky.GetRepostsByActorAndSubjectsRequest
 */
export class GetRepostsByActorAndSubjectsRequest extends Message<GetRepostsByActorAndSubjectsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated bsky.RecordRef refs = 2;
   */
  refs: RecordRef[] = []

  constructor(data?: PartialMessage<GetRepostsByActorAndSubjectsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostsByActorAndSubjectsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'refs', kind: 'message', T: RecordRef, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostsByActorAndSubjectsRequest {
    return new GetRepostsByActorAndSubjectsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsByActorAndSubjectsRequest {
    return new GetRepostsByActorAndSubjectsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsByActorAndSubjectsRequest {
    return new GetRepostsByActorAndSubjectsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetRepostsByActorAndSubjectsRequest
      | PlainMessage<GetRepostsByActorAndSubjectsRequest>
      | undefined,
    b:
      | GetRepostsByActorAndSubjectsRequest
      | PlainMessage<GetRepostsByActorAndSubjectsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostsByActorAndSubjectsRequest, a, b)
  }
}

/**
 * @generated from message bsky.RecordRef
 */
export class RecordRef extends Message<RecordRef> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  constructor(data?: PartialMessage<RecordRef>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.RecordRef'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RecordRef {
    return new RecordRef().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RecordRef {
    return new RecordRef().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RecordRef {
    return new RecordRef().fromJsonString(jsonString, options)
  }

  static equals(
    a: RecordRef | PlainMessage<RecordRef> | undefined,
    b: RecordRef | PlainMessage<RecordRef> | undefined,
  ): boolean {
    return proto3.util.equals(RecordRef, a, b)
  }
}

/**
 * @generated from message bsky.GetRepostsByActorAndSubjectsResponse
 */
export class GetRepostsByActorAndSubjectsResponse extends Message<GetRepostsByActorAndSubjectsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetRepostsByActorAndSubjectsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRepostsByActorAndSubjectsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepostsByActorAndSubjectsResponse {
    return new GetRepostsByActorAndSubjectsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsByActorAndSubjectsResponse {
    return new GetRepostsByActorAndSubjectsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepostsByActorAndSubjectsResponse {
    return new GetRepostsByActorAndSubjectsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetRepostsByActorAndSubjectsResponse
      | PlainMessage<GetRepostsByActorAndSubjectsResponse>
      | undefined,
    b:
      | GetRepostsByActorAndSubjectsResponse
      | PlainMessage<GetRepostsByActorAndSubjectsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepostsByActorAndSubjectsResponse, a, b)
  }
}

/**
 * - return recent repost uris for user A
 *     - `getActorReposts` list for a user
 *
 * @generated from message bsky.GetActorRepostsRequest
 */
export class GetActorRepostsRequest extends Message<GetActorRepostsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorRepostsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorRepostsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorRepostsRequest
      | PlainMessage<GetActorRepostsRequest>
      | undefined,
    b:
      | GetActorRepostsRequest
      | PlainMessage<GetActorRepostsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorRepostsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorRepostsResponse
 */
export class GetActorRepostsResponse extends Message<GetActorRepostsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorRepostsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorRepostsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorRepostsResponse
      | PlainMessage<GetActorRepostsResponse>
      | undefined,
    b:
      | GetActorRepostsResponse
      | PlainMessage<GetActorRepostsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorRepostsResponse, a, b)
  }
}

/**
 * - return actor information for dids A, B, C…
 *     - profile hydration
 *     - should this include handles?  apply repo takedown?
 *
 * @generated from message bsky.GetActorsRequest
 */
export class GetActorsRequest extends Message<GetActorsRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  constructor(data?: PartialMessage<GetActorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorsRequest {
    return new GetActorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorsRequest {
    return new GetActorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorsRequest {
    return new GetActorsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorsRequest | PlainMessage<GetActorsRequest> | undefined,
    b: GetActorsRequest | PlainMessage<GetActorsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.ActorInfo
 */
export class ActorInfo extends Message<ActorInfo> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false

  /**
   * @generated from field: string handle = 2;
   */
  handle = ''

  /**
   * @generated from field: bsky.Record profile = 3;
   */
  profile?: Record

  /**
   * @generated from field: bool taken_down = 4;
   */
  takenDown = false

  /**
   * @generated from field: string takedown_ref = 5;
   */
  takedownRef = ''

  /**
   * @generated from field: google.protobuf.Timestamp tombstoned_at = 6;
   */
  tombstonedAt?: Timestamp

  /**
   * @generated from field: bool labeler = 7;
   */
  labeler = false

  /**
   * @generated from field: string allow_incoming_chats_from = 8;
   */
  allowIncomingChatsFrom = ''

  /**
   * @generated from field: string upstream_status = 9;
   */
  upstreamStatus = ''

  constructor(data?: PartialMessage<ActorInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ActorInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'exists', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'handle', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'profile', kind: 'message', T: Record },
    { no: 4, name: 'taken_down', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 5,
      name: 'takedown_ref',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 6, name: 'tombstoned_at', kind: 'message', T: Timestamp },
    { no: 7, name: 'labeler', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 8,
      name: 'allow_incoming_chats_from',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 9,
      name: 'upstream_status',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ActorInfo {
    return new ActorInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ActorInfo {
    return new ActorInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ActorInfo {
    return new ActorInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: ActorInfo | PlainMessage<ActorInfo> | undefined,
    b: ActorInfo | PlainMessage<ActorInfo> | undefined,
  ): boolean {
    return proto3.util.equals(ActorInfo, a, b)
  }
}

/**
 * @generated from message bsky.GetActorsResponse
 */
export class GetActorsResponse extends Message<GetActorsResponse> {
  /**
   * @generated from field: repeated bsky.ActorInfo actors = 1;
   */
  actors: ActorInfo[] = []

  constructor(data?: PartialMessage<GetActorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actors', kind: 'message', T: ActorInfo, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorsResponse {
    return new GetActorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorsResponse {
    return new GetActorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorsResponse {
    return new GetActorsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorsResponse | PlainMessage<GetActorsResponse> | undefined,
    b: GetActorsResponse | PlainMessage<GetActorsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorsResponse, a, b)
  }
}

/**
 * - return did for handle A
 *     - `resolveHandle`
 *     - answering queries where the query param is a handle
 *
 * @generated from message bsky.GetDidsByHandlesRequest
 */
export class GetDidsByHandlesRequest extends Message<GetDidsByHandlesRequest> {
  /**
   * @generated from field: repeated string handles = 1;
   */
  handles: string[] = []

  constructor(data?: PartialMessage<GetDidsByHandlesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetDidsByHandlesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'handles',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetDidsByHandlesRequest
      | PlainMessage<GetDidsByHandlesRequest>
      | undefined,
    b:
      | GetDidsByHandlesRequest
      | PlainMessage<GetDidsByHandlesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetDidsByHandlesRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetDidsByHandlesResponse
 */
export class GetDidsByHandlesResponse extends Message<GetDidsByHandlesResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  constructor(data?: PartialMessage<GetDidsByHandlesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetDidsByHandlesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetDidsByHandlesResponse
      | PlainMessage<GetDidsByHandlesResponse>
      | undefined,
    b:
      | GetDidsByHandlesResponse
      | PlainMessage<GetDidsByHandlesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetDidsByHandlesResponse, a, b)
  }
}

/**
 * - return relationships between user A and users B, C, D...
 *     - profile hydration
 *     - block application
 *
 * @generated from message bsky.GetRelationshipsRequest
 */
export class GetRelationshipsRequest extends Message<GetRelationshipsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated string target_dids = 2;
   */
  targetDids: string[] = []

  constructor(data?: PartialMessage<GetRelationshipsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRelationshipsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'target_dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRelationshipsRequest {
    return new GetRelationshipsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRelationshipsRequest
      | PlainMessage<GetRelationshipsRequest>
      | undefined,
    b:
      | GetRelationshipsRequest
      | PlainMessage<GetRelationshipsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRelationshipsRequest, a, b)
  }
}

/**
 * @generated from message bsky.Relationships
 */
export class Relationships extends Message<Relationships> {
  /**
   * @generated from field: bool muted = 1;
   */
  muted = false

  /**
   * @generated from field: string muted_by_list = 2;
   */
  mutedByList = ''

  /**
   * @generated from field: string blocked_by = 3;
   */
  blockedBy = ''

  /**
   * @generated from field: string blocking = 4;
   */
  blocking = ''

  /**
   * @generated from field: string blocked_by_list = 5;
   */
  blockedByList = ''

  /**
   * @generated from field: string blocking_by_list = 6;
   */
  blockingByList = ''

  /**
   * @generated from field: string following = 7;
   */
  following = ''

  /**
   * @generated from field: string followed_by = 8;
   */
  followedBy = ''

  constructor(data?: PartialMessage<Relationships>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.Relationships'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'muted', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: 'muted_by_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'blocked_by', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'blocking', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'blocked_by_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 6,
      name: 'blocking_by_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 7, name: 'following', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 8,
      name: 'followed_by',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Relationships {
    return new Relationships().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Relationships {
    return new Relationships().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Relationships {
    return new Relationships().fromJsonString(jsonString, options)
  }

  static equals(
    a: Relationships | PlainMessage<Relationships> | undefined,
    b: Relationships | PlainMessage<Relationships> | undefined,
  ): boolean {
    return proto3.util.equals(Relationships, a, b)
  }
}

/**
 * @generated from message bsky.GetRelationshipsResponse
 */
export class GetRelationshipsResponse extends Message<GetRelationshipsResponse> {
  /**
   * @generated from field: repeated bsky.Relationships relationships = 1;
   */
  relationships: Relationships[] = []

  constructor(data?: PartialMessage<GetRelationshipsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRelationshipsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'relationships',
      kind: 'message',
      T: Relationships,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRelationshipsResponse {
    return new GetRelationshipsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRelationshipsResponse
      | PlainMessage<GetRelationshipsResponse>
      | undefined,
    b:
      | GetRelationshipsResponse
      | PlainMessage<GetRelationshipsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRelationshipsResponse, a, b)
  }
}

/**
 * - return whether a block (bidrectionally and either direct or through a list) exists between two dids
 *     - enforcing 3rd party block violations
 *
 * @generated from message bsky.RelationshipPair
 */
export class RelationshipPair extends Message<RelationshipPair> {
  /**
   * @generated from field: string a = 1;
   */
  a = ''

  /**
   * @generated from field: string b = 2;
   */
  b = ''

  constructor(data?: PartialMessage<RelationshipPair>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.RelationshipPair'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'a', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'b', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RelationshipPair {
    return new RelationshipPair().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RelationshipPair {
    return new RelationshipPair().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RelationshipPair {
    return new RelationshipPair().fromJsonString(jsonString, options)
  }

  static equals(
    a: RelationshipPair | PlainMessage<RelationshipPair> | undefined,
    b: RelationshipPair | PlainMessage<RelationshipPair> | undefined,
  ): boolean {
    return proto3.util.equals(RelationshipPair, a, b)
  }
}

/**
 * @generated from message bsky.BlockExistence
 */
export class BlockExistence extends Message<BlockExistence> {
  /**
   * @generated from field: string blocked_by = 1;
   */
  blockedBy = ''

  /**
   * @generated from field: string blocking = 2;
   */
  blocking = ''

  /**
   * @generated from field: string blocked_by_list = 3;
   */
  blockedByList = ''

  /**
   * @generated from field: string blocking_by_list = 4;
   */
  blockingByList = ''

  constructor(data?: PartialMessage<BlockExistence>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.BlockExistence'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'blocked_by', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'blocking', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'blocked_by_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: 'blocking_by_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): BlockExistence {
    return new BlockExistence().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): BlockExistence {
    return new BlockExistence().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): BlockExistence {
    return new BlockExistence().fromJsonString(jsonString, options)
  }

  static equals(
    a: BlockExistence | PlainMessage<BlockExistence> | undefined,
    b: BlockExistence | PlainMessage<BlockExistence> | undefined,
  ): boolean {
    return proto3.util.equals(BlockExistence, a, b)
  }
}

/**
 * @generated from message bsky.GetBlockExistenceRequest
 */
export class GetBlockExistenceRequest extends Message<GetBlockExistenceRequest> {
  /**
   * @generated from field: repeated bsky.RelationshipPair pairs = 1;
   */
  pairs: RelationshipPair[] = []

  constructor(data?: PartialMessage<GetBlockExistenceRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlockExistenceRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'pairs',
      kind: 'message',
      T: RelationshipPair,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlockExistenceRequest {
    return new GetBlockExistenceRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlockExistenceRequest {
    return new GetBlockExistenceRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlockExistenceRequest {
    return new GetBlockExistenceRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlockExistenceRequest
      | PlainMessage<GetBlockExistenceRequest>
      | undefined,
    b:
      | GetBlockExistenceRequest
      | PlainMessage<GetBlockExistenceRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlockExistenceRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlockExistenceResponse
 */
export class GetBlockExistenceResponse extends Message<GetBlockExistenceResponse> {
  /**
   * @generated from field: repeated bool exists = 1;
   */
  exists: boolean[] = []

  /**
   * @generated from field: repeated bsky.BlockExistence blocks = 2;
   */
  blocks: BlockExistence[] = []

  constructor(data?: PartialMessage<GetBlockExistenceResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlockExistenceResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'exists',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      repeated: true,
    },
    {
      no: 2,
      name: 'blocks',
      kind: 'message',
      T: BlockExistence,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlockExistenceResponse {
    return new GetBlockExistenceResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlockExistenceResponse {
    return new GetBlockExistenceResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlockExistenceResponse {
    return new GetBlockExistenceResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlockExistenceResponse
      | PlainMessage<GetBlockExistenceResponse>
      | undefined,
    b:
      | GetBlockExistenceResponse
      | PlainMessage<GetBlockExistenceResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlockExistenceResponse, a, b)
  }
}

/**
 * @generated from message bsky.ListItemInfo
 */
export class ListItemInfo extends Message<ListItemInfo> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string did = 2;
   */
  did = ''

  constructor(data?: PartialMessage<ListItemInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ListItemInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ListItemInfo {
    return new ListItemInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ListItemInfo {
    return new ListItemInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ListItemInfo {
    return new ListItemInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListItemInfo | PlainMessage<ListItemInfo> | undefined,
    b: ListItemInfo | PlainMessage<ListItemInfo> | undefined,
  ): boolean {
    return proto3.util.equals(ListItemInfo, a, b)
  }
}

/**
 * - Return dids of users in list A
 *     - E.g. to view items in one of your mute lists
 *
 * @generated from message bsky.GetListMembersRequest
 */
export class GetListMembersRequest extends Message<GetListMembersRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetListMembersRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListMembersRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListMembersRequest {
    return new GetListMembersRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListMembersRequest {
    return new GetListMembersRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListMembersRequest {
    return new GetListMembersRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListMembersRequest | PlainMessage<GetListMembersRequest> | undefined,
    b: GetListMembersRequest | PlainMessage<GetListMembersRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetListMembersRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListMembersResponse
 */
export class GetListMembersResponse extends Message<GetListMembersResponse> {
  /**
   * @generated from field: repeated bsky.ListItemInfo listitems = 1;
   */
  listitems: ListItemInfo[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetListMembersResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListMembersResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'listitems',
      kind: 'message',
      T: ListItemInfo,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListMembersResponse {
    return new GetListMembersResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListMembersResponse {
    return new GetListMembersResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListMembersResponse {
    return new GetListMembersResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListMembersResponse
      | PlainMessage<GetListMembersResponse>
      | undefined,
    b:
      | GetListMembersResponse
      | PlainMessage<GetListMembersResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListMembersResponse, a, b)
  }
}

/**
 * - Return list uris where user A in list B, C, D…
 *     - Used in thread reply gates
 *
 * @generated from message bsky.GetListMembershipRequest
 */
export class GetListMembershipRequest extends Message<GetListMembershipRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated string list_uris = 2;
   */
  listUris: string[] = []

  constructor(data?: PartialMessage<GetListMembershipRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListMembershipRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'list_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListMembershipRequest {
    return new GetListMembershipRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListMembershipRequest {
    return new GetListMembershipRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListMembershipRequest {
    return new GetListMembershipRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListMembershipRequest
      | PlainMessage<GetListMembershipRequest>
      | undefined,
    b:
      | GetListMembershipRequest
      | PlainMessage<GetListMembershipRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListMembershipRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListMembershipResponse
 */
export class GetListMembershipResponse extends Message<GetListMembershipResponse> {
  /**
   * @generated from field: repeated string listitem_uris = 1;
   */
  listitemUris: string[] = []

  constructor(data?: PartialMessage<GetListMembershipResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListMembershipResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'listitem_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListMembershipResponse {
    return new GetListMembershipResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListMembershipResponse {
    return new GetListMembershipResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListMembershipResponse {
    return new GetListMembershipResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetListMembershipResponse
      | PlainMessage<GetListMembershipResponse>
      | undefined,
    b:
      | GetListMembershipResponse
      | PlainMessage<GetListMembershipResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetListMembershipResponse, a, b)
  }
}

/**
 * - Return number of items in list A
 *     - For aggregate
 *
 * @generated from message bsky.GetListCountRequest
 */
export class GetListCountRequest extends Message<GetListCountRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = ''

  constructor(data?: PartialMessage<GetListCountRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListCountRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListCountRequest {
    return new GetListCountRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListCountRequest {
    return new GetListCountRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListCountRequest {
    return new GetListCountRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListCountRequest | PlainMessage<GetListCountRequest> | undefined,
    b: GetListCountRequest | PlainMessage<GetListCountRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetListCountRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListCountResponse
 */
export class GetListCountResponse extends Message<GetListCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0

  constructor(data?: PartialMessage<GetListCountResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListCountResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListCountResponse {
    return new GetListCountResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListCountResponse {
    return new GetListCountResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListCountResponse {
    return new GetListCountResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListCountResponse | PlainMessage<GetListCountResponse> | undefined,
    b: GetListCountResponse | PlainMessage<GetListCountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetListCountResponse, a, b)
  }
}

/**
 * - return list of uris of lists created by A
 *     - `getLists`
 *
 * @generated from message bsky.GetActorListsRequest
 */
export class GetActorListsRequest extends Message<GetActorListsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorListsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorListsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorListsRequest {
    return new GetActorListsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorListsRequest {
    return new GetActorListsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorListsRequest {
    return new GetActorListsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorListsRequest | PlainMessage<GetActorListsRequest> | undefined,
    b: GetActorListsRequest | PlainMessage<GetActorListsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorListsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorListsResponse
 */
export class GetActorListsResponse extends Message<GetActorListsResponse> {
  /**
   * @generated from field: repeated string list_uris = 1;
   */
  listUris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorListsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorListsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'list_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorListsResponse {
    return new GetActorListsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorListsResponse {
    return new GetActorListsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorListsResponse {
    return new GetActorListsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorListsResponse | PlainMessage<GetActorListsResponse> | undefined,
    b: GetActorListsResponse | PlainMessage<GetActorListsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorListsResponse, a, b)
  }
}

/**
 * - return boolean if user A has muted user B
 *     - hydrating mute state onto profiles
 *
 * @generated from message bsky.GetActorMutesActorRequest
 */
export class GetActorMutesActorRequest extends Message<GetActorMutesActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = ''

  constructor(data?: PartialMessage<GetActorMutesActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorMutesActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorMutesActorRequest
      | PlainMessage<GetActorMutesActorRequest>
      | undefined,
    b:
      | GetActorMutesActorRequest
      | PlainMessage<GetActorMutesActorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorMutesActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorMutesActorResponse
 */
export class GetActorMutesActorResponse extends Message<GetActorMutesActorResponse> {
  /**
   * @generated from field: bool muted = 1;
   */
  muted = false

  constructor(data?: PartialMessage<GetActorMutesActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorMutesActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'muted', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorMutesActorResponse
      | PlainMessage<GetActorMutesActorResponse>
      | undefined,
    b:
      | GetActorMutesActorResponse
      | PlainMessage<GetActorMutesActorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorMutesActorResponse, a, b)
  }
}

/**
 * - return list of user dids of users who A mutes
 *     - `getMutes`
 *
 * @generated from message bsky.GetMutesRequest
 */
export class GetMutesRequest extends Message<GetMutesRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetMutesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutesRequest {
    return new GetMutesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutesRequest {
    return new GetMutesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutesRequest {
    return new GetMutesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetMutesRequest | PlainMessage<GetMutesRequest> | undefined,
    b: GetMutesRequest | PlainMessage<GetMutesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetMutesRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetMutesResponse
 */
export class GetMutesResponse extends Message<GetMutesResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetMutesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutesResponse {
    return new GetMutesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutesResponse {
    return new GetMutesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutesResponse {
    return new GetMutesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetMutesResponse | PlainMessage<GetMutesResponse> | undefined,
    b: GetMutesResponse | PlainMessage<GetMutesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetMutesResponse, a, b)
  }
}

/**
 * - return list uri of *any* list through which user A has muted user B
 *     - hydrating mute state onto profiles
 *     - note: we only need *one* uri even if a user is muted by multiple lists
 *
 * @generated from message bsky.GetActorMutesActorViaListRequest
 */
export class GetActorMutesActorViaListRequest extends Message<GetActorMutesActorViaListRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = ''

  constructor(data?: PartialMessage<GetActorMutesActorViaListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorMutesActorViaListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorMutesActorViaListRequest
      | PlainMessage<GetActorMutesActorViaListRequest>
      | undefined,
    b:
      | GetActorMutesActorViaListRequest
      | PlainMessage<GetActorMutesActorViaListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorMutesActorViaListRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorMutesActorViaListResponse
 */
export class GetActorMutesActorViaListResponse extends Message<GetActorMutesActorViaListResponse> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = ''

  constructor(data?: PartialMessage<GetActorMutesActorViaListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorMutesActorViaListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetActorMutesActorViaListResponse
      | PlainMessage<GetActorMutesActorViaListResponse>
      | undefined,
    b:
      | GetActorMutesActorViaListResponse
      | PlainMessage<GetActorMutesActorViaListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorMutesActorViaListResponse, a, b)
  }
}

/**
 * - return boolean if actor A has subscribed to mutelist B
 *     - list view hydration
 *
 * @generated from message bsky.GetMutelistSubscriptionRequest
 */
export class GetMutelistSubscriptionRequest extends Message<GetMutelistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = ''

  constructor(data?: PartialMessage<GetMutelistSubscriptionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutelistSubscriptionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetMutelistSubscriptionRequest
      | PlainMessage<GetMutelistSubscriptionRequest>
      | undefined,
    b:
      | GetMutelistSubscriptionRequest
      | PlainMessage<GetMutelistSubscriptionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetMutelistSubscriptionRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetMutelistSubscriptionResponse
 */
export class GetMutelistSubscriptionResponse extends Message<GetMutelistSubscriptionResponse> {
  /**
   * @generated from field: bool subscribed = 1;
   */
  subscribed = false

  constructor(data?: PartialMessage<GetMutelistSubscriptionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutelistSubscriptionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subscribed', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetMutelistSubscriptionResponse
      | PlainMessage<GetMutelistSubscriptionResponse>
      | undefined,
    b:
      | GetMutelistSubscriptionResponse
      | PlainMessage<GetMutelistSubscriptionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetMutelistSubscriptionResponse, a, b)
  }
}

/**
 * - return list of list uris of mutelists that A subscribes to
 *     - `getListMutes`
 *
 * @generated from message bsky.GetMutelistSubscriptionsRequest
 */
export class GetMutelistSubscriptionsRequest extends Message<GetMutelistSubscriptionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetMutelistSubscriptionsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutelistSubscriptionsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetMutelistSubscriptionsRequest
      | PlainMessage<GetMutelistSubscriptionsRequest>
      | undefined,
    b:
      | GetMutelistSubscriptionsRequest
      | PlainMessage<GetMutelistSubscriptionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetMutelistSubscriptionsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetMutelistSubscriptionsResponse
 */
export class GetMutelistSubscriptionsResponse extends Message<GetMutelistSubscriptionsResponse> {
  /**
   * @generated from field: repeated string list_uris = 1;
   */
  listUris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetMutelistSubscriptionsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetMutelistSubscriptionsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'list_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetMutelistSubscriptionsResponse
      | PlainMessage<GetMutelistSubscriptionsResponse>
      | undefined,
    b:
      | GetMutelistSubscriptionsResponse
      | PlainMessage<GetMutelistSubscriptionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetMutelistSubscriptionsResponse, a, b)
  }
}

/**
 * - Return block uri if there is a block between users A & B (bidirectional)
 *     - hydrating (& actioning) block state on profiles
 *     - handling 3rd party blocks
 *
 * @generated from message bsky.GetBidirectionalBlockRequest
 */
export class GetBidirectionalBlockRequest extends Message<GetBidirectionalBlockRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = ''

  constructor(data?: PartialMessage<GetBidirectionalBlockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBidirectionalBlockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBidirectionalBlockRequest
      | PlainMessage<GetBidirectionalBlockRequest>
      | undefined,
    b:
      | GetBidirectionalBlockRequest
      | PlainMessage<GetBidirectionalBlockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBidirectionalBlockRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBidirectionalBlockResponse
 */
export class GetBidirectionalBlockResponse extends Message<GetBidirectionalBlockResponse> {
  /**
   * @generated from field: string block_uri = 1;
   */
  blockUri = ''

  constructor(data?: PartialMessage<GetBidirectionalBlockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBidirectionalBlockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'block_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBidirectionalBlockResponse
      | PlainMessage<GetBidirectionalBlockResponse>
      | undefined,
    b:
      | GetBidirectionalBlockResponse
      | PlainMessage<GetBidirectionalBlockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBidirectionalBlockResponse, a, b)
  }
}

/**
 * - Return list of block uris and user dids of users who A blocks
 *     - `getBlocks`
 *
 * @generated from message bsky.GetBlocksRequest
 */
export class GetBlocksRequest extends Message<GetBlocksRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetBlocksRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocksRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocksRequest {
    return new GetBlocksRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocksRequest {
    return new GetBlocksRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocksRequest {
    return new GetBlocksRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetBlocksRequest | PlainMessage<GetBlocksRequest> | undefined,
    b: GetBlocksRequest | PlainMessage<GetBlocksRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocksRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlocksResponse
 */
export class GetBlocksResponse extends Message<GetBlocksResponse> {
  /**
   * @generated from field: repeated string block_uris = 1;
   */
  blockUris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetBlocksResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocksResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'block_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocksResponse {
    return new GetBlocksResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocksResponse {
    return new GetBlocksResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocksResponse {
    return new GetBlocksResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetBlocksResponse | PlainMessage<GetBlocksResponse> | undefined,
    b: GetBlocksResponse | PlainMessage<GetBlocksResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocksResponse, a, b)
  }
}

/**
 * - Return list uri of ***any*** list through which users A & B have a block (bidirectional)
 *     - hydrating (& actioning) block state on profiles
 *     - handling 3rd party blocks
 *
 * @generated from message bsky.GetBidirectionalBlockViaListRequest
 */
export class GetBidirectionalBlockViaListRequest extends Message<GetBidirectionalBlockViaListRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = ''

  constructor(data?: PartialMessage<GetBidirectionalBlockViaListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBidirectionalBlockViaListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBidirectionalBlockViaListRequest
      | PlainMessage<GetBidirectionalBlockViaListRequest>
      | undefined,
    b:
      | GetBidirectionalBlockViaListRequest
      | PlainMessage<GetBidirectionalBlockViaListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBidirectionalBlockViaListRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBidirectionalBlockViaListResponse
 */
export class GetBidirectionalBlockViaListResponse extends Message<GetBidirectionalBlockViaListResponse> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = ''

  constructor(data?: PartialMessage<GetBidirectionalBlockViaListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBidirectionalBlockViaListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBidirectionalBlockViaListResponse
      | PlainMessage<GetBidirectionalBlockViaListResponse>
      | undefined,
    b:
      | GetBidirectionalBlockViaListResponse
      | PlainMessage<GetBidirectionalBlockViaListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBidirectionalBlockViaListResponse, a, b)
  }
}

/**
 * - return boolean if user A has subscribed to blocklist B
 *     - list view hydration
 *
 * @generated from message bsky.GetBlocklistSubscriptionRequest
 */
export class GetBlocklistSubscriptionRequest extends Message<GetBlocklistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = ''

  constructor(data?: PartialMessage<GetBlocklistSubscriptionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocklistSubscriptionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBlocklistSubscriptionRequest
      | PlainMessage<GetBlocklistSubscriptionRequest>
      | undefined,
    b:
      | GetBlocklistSubscriptionRequest
      | PlainMessage<GetBlocklistSubscriptionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlocklistSubscriptionResponse
 */
export class GetBlocklistSubscriptionResponse extends Message<GetBlocklistSubscriptionResponse> {
  /**
   * @generated from field: string listblock_uri = 1;
   */
  listblockUri = ''

  constructor(data?: PartialMessage<GetBlocklistSubscriptionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocklistSubscriptionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'listblock_uri',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBlocklistSubscriptionResponse
      | PlainMessage<GetBlocklistSubscriptionResponse>
      | undefined,
    b:
      | GetBlocklistSubscriptionResponse
      | PlainMessage<GetBlocklistSubscriptionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionResponse, a, b)
  }
}

/**
 * - return list of list uris of Blockslists that A subscribes to
 *     - `getListBlocks`
 *
 * @generated from message bsky.GetBlocklistSubscriptionsRequest
 */
export class GetBlocklistSubscriptionsRequest extends Message<GetBlocklistSubscriptionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetBlocklistSubscriptionsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocklistSubscriptionsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBlocklistSubscriptionsRequest
      | PlainMessage<GetBlocklistSubscriptionsRequest>
      | undefined,
    b:
      | GetBlocklistSubscriptionsRequest
      | PlainMessage<GetBlocklistSubscriptionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlocklistSubscriptionsResponse
 */
export class GetBlocklistSubscriptionsResponse extends Message<GetBlocklistSubscriptionsResponse> {
  /**
   * @generated from field: repeated string list_uris = 1;
   */
  listUris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetBlocklistSubscriptionsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlocklistSubscriptionsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'list_uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetBlocklistSubscriptionsResponse
      | PlainMessage<GetBlocklistSubscriptionsResponse>
      | undefined,
    b:
      | GetBlocklistSubscriptionsResponse
      | PlainMessage<GetBlocklistSubscriptionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionsResponse, a, b)
  }
}

/**
 * - list recent notifications for a user
 *     - notifications should include a uri for the record that caused the notif & a “reason” for the notification (reply, like, quotepost, etc)
 *     - this should include both read & unread notifs
 *
 * @generated from message bsky.GetNotificationsRequest
 */
export class GetNotificationsRequest extends Message<GetNotificationsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetNotificationsRequest {
    return new GetNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationsRequest {
    return new GetNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationsRequest {
    return new GetNotificationsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetNotificationsRequest
      | PlainMessage<GetNotificationsRequest>
      | undefined,
    b:
      | GetNotificationsRequest
      | PlainMessage<GetNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: string recipient_did = 1;
   */
  recipientDid = ''

  /**
   * @generated from field: string uri = 2;
   */
  uri = ''

  /**
   * @generated from field: string reason = 3;
   */
  reason = ''

  /**
   * @generated from field: string reason_subject = 4;
   */
  reasonSubject = ''

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp

  constructor(data?: PartialMessage<Notification>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.Notification'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'recipient_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'reason', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'reason_subject',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 5, name: 'timestamp', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Notification {
    return new Notification().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Notification {
    return new Notification().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Notification {
    return new Notification().fromJsonString(jsonString, options)
  }

  static equals(
    a: Notification | PlainMessage<Notification> | undefined,
    b: Notification | PlainMessage<Notification> | undefined,
  ): boolean {
    return proto3.util.equals(Notification, a, b)
  }
}

/**
 * @generated from message bsky.GetNotificationsResponse
 */
export class GetNotificationsResponse extends Message<GetNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetNotificationsResponse {
    return new GetNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationsResponse {
    return new GetNotificationsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationsResponse {
    return new GetNotificationsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetNotificationsResponse
      | PlainMessage<GetNotificationsResponse>
      | undefined,
    b:
      | GetNotificationsResponse
      | PlainMessage<GetNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetNotificationsResponse, a, b)
  }
}

/**
 * - update a user’s “last seen time”
 *     - `updateSeen`
 *
 * @generated from message bsky.UpdateNotificationSeenRequest
 */
export class UpdateNotificationSeenRequest extends Message<UpdateNotificationSeenRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp

  constructor(data?: PartialMessage<UpdateNotificationSeenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateNotificationSeenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'timestamp', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateNotificationSeenRequest
      | PlainMessage<UpdateNotificationSeenRequest>
      | undefined,
    b:
      | UpdateNotificationSeenRequest
      | PlainMessage<UpdateNotificationSeenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateNotificationSeenRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateNotificationSeenResponse
 */
export class UpdateNotificationSeenResponse extends Message<UpdateNotificationSeenResponse> {
  constructor(data?: PartialMessage<UpdateNotificationSeenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateNotificationSeenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateNotificationSeenResponse
      | PlainMessage<UpdateNotificationSeenResponse>
      | undefined,
    b:
      | UpdateNotificationSeenResponse
      | PlainMessage<UpdateNotificationSeenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateNotificationSeenResponse, a, b)
  }
}

/**
 * - get a user’s “last seen time”
 *     - hydrating read state onto notifications
 *
 * @generated from message bsky.GetNotificationSeenRequest
 */
export class GetNotificationSeenRequest extends Message<GetNotificationSeenRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  constructor(data?: PartialMessage<GetNotificationSeenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetNotificationSeenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetNotificationSeenRequest
      | PlainMessage<GetNotificationSeenRequest>
      | undefined,
    b:
      | GetNotificationSeenRequest
      | PlainMessage<GetNotificationSeenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetNotificationSeenRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetNotificationSeenResponse
 */
export class GetNotificationSeenResponse extends Message<GetNotificationSeenResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp

  constructor(data?: PartialMessage<GetNotificationSeenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetNotificationSeenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'timestamp', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetNotificationSeenResponse
      | PlainMessage<GetNotificationSeenResponse>
      | undefined,
    b:
      | GetNotificationSeenResponse
      | PlainMessage<GetNotificationSeenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetNotificationSeenResponse, a, b)
  }
}

/**
 * - get a count of all unread notifications (notifications after `updateSeen`)
 *     - `getUnreadCount`
 *
 * @generated from message bsky.GetUnreadNotificationCountRequest
 */
export class GetUnreadNotificationCountRequest extends Message<GetUnreadNotificationCountRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  constructor(data?: PartialMessage<GetUnreadNotificationCountRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetUnreadNotificationCountRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetUnreadNotificationCountRequest
      | PlainMessage<GetUnreadNotificationCountRequest>
      | undefined,
    b:
      | GetUnreadNotificationCountRequest
      | PlainMessage<GetUnreadNotificationCountRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetUnreadNotificationCountRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetUnreadNotificationCountResponse
 */
export class GetUnreadNotificationCountResponse extends Message<GetUnreadNotificationCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0

  constructor(data?: PartialMessage<GetUnreadNotificationCountResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetUnreadNotificationCountResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetUnreadNotificationCountResponse
      | PlainMessage<GetUnreadNotificationCountResponse>
      | undefined,
    b:
      | GetUnreadNotificationCountResponse
      | PlainMessage<GetUnreadNotificationCountResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetUnreadNotificationCountResponse, a, b)
  }
}

/**
 * - Return uris of feed generator records created by user A
 *     - `getActorFeeds`
 *
 * @generated from message bsky.GetActorFeedsRequest
 */
export class GetActorFeedsRequest extends Message<GetActorFeedsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorFeedsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorFeedsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorFeedsRequest | PlainMessage<GetActorFeedsRequest> | undefined,
    b: GetActorFeedsRequest | PlainMessage<GetActorFeedsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorFeedsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorFeedsResponse
 */
export class GetActorFeedsResponse extends Message<GetActorFeedsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetActorFeedsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorFeedsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetActorFeedsResponse | PlainMessage<GetActorFeedsResponse> | undefined,
    b: GetActorFeedsResponse | PlainMessage<GetActorFeedsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetActorFeedsResponse, a, b)
  }
}

/**
 * - Returns a list of suggested feed generator uris for an actor, paginated
 *     - `getSuggestedFeeds`
 *     - This is currently just hardcoded in the Appview DB
 *
 * @generated from message bsky.GetSuggestedFeedsRequest
 */
export class GetSuggestedFeedsRequest extends Message<GetSuggestedFeedsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetSuggestedFeedsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetSuggestedFeedsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSuggestedFeedsRequest
      | PlainMessage<GetSuggestedFeedsRequest>
      | undefined,
    b:
      | GetSuggestedFeedsRequest
      | PlainMessage<GetSuggestedFeedsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetSuggestedFeedsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetSuggestedFeedsResponse
 */
export class GetSuggestedFeedsResponse extends Message<GetSuggestedFeedsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetSuggestedFeedsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetSuggestedFeedsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSuggestedFeedsResponse
      | PlainMessage<GetSuggestedFeedsResponse>
      | undefined,
    b:
      | GetSuggestedFeedsResponse
      | PlainMessage<GetSuggestedFeedsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetSuggestedFeedsResponse, a, b)
  }
}

/**
 * @generated from message bsky.SearchFeedGeneratorsRequest
 */
export class SearchFeedGeneratorsRequest extends Message<SearchFeedGeneratorsRequest> {
  /**
   * @generated from field: string query = 1;
   */
  query = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  constructor(data?: PartialMessage<SearchFeedGeneratorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchFeedGeneratorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'query', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchFeedGeneratorsRequest {
    return new SearchFeedGeneratorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchFeedGeneratorsRequest {
    return new SearchFeedGeneratorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchFeedGeneratorsRequest {
    return new SearchFeedGeneratorsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | SearchFeedGeneratorsRequest
      | PlainMessage<SearchFeedGeneratorsRequest>
      | undefined,
    b:
      | SearchFeedGeneratorsRequest
      | PlainMessage<SearchFeedGeneratorsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(SearchFeedGeneratorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.SearchFeedGeneratorsResponse
 */
export class SearchFeedGeneratorsResponse extends Message<SearchFeedGeneratorsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<SearchFeedGeneratorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchFeedGeneratorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchFeedGeneratorsResponse {
    return new SearchFeedGeneratorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchFeedGeneratorsResponse {
    return new SearchFeedGeneratorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchFeedGeneratorsResponse {
    return new SearchFeedGeneratorsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | SearchFeedGeneratorsResponse
      | PlainMessage<SearchFeedGeneratorsResponse>
      | undefined,
    b:
      | SearchFeedGeneratorsResponse
      | PlainMessage<SearchFeedGeneratorsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(SearchFeedGeneratorsResponse, a, b)
  }
}

/**
 * - Returns feed generator validity and online status with uris A, B, C…
 *     - Not currently being used, but could be worhthwhile.
 *
 * @generated from message bsky.GetFeedGeneratorStatusRequest
 */
export class GetFeedGeneratorStatusRequest extends Message<GetFeedGeneratorStatusRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetFeedGeneratorStatusRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFeedGeneratorStatusRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetFeedGeneratorStatusRequest
      | PlainMessage<GetFeedGeneratorStatusRequest>
      | undefined,
    b:
      | GetFeedGeneratorStatusRequest
      | PlainMessage<GetFeedGeneratorStatusRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFeedGeneratorStatusRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetFeedGeneratorStatusResponse
 */
export class GetFeedGeneratorStatusResponse extends Message<GetFeedGeneratorStatusResponse> {
  /**
   * @generated from field: repeated string status = 1;
   */
  status: string[] = []

  constructor(data?: PartialMessage<GetFeedGeneratorStatusResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFeedGeneratorStatusResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'status',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetFeedGeneratorStatusResponse
      | PlainMessage<GetFeedGeneratorStatusResponse>
      | undefined,
    b:
      | GetFeedGeneratorStatusResponse
      | PlainMessage<GetFeedGeneratorStatusResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFeedGeneratorStatusResponse, a, b)
  }
}

/**
 * - Returns recent posts authored by a given DID, paginated
 *     - `getAuthorFeed`
 *     - Optionally: filter by if a post is/isn’t a reply and if a post has a media object in it
 *
 * @generated from message bsky.GetAuthorFeedRequest
 */
export class GetAuthorFeedRequest extends Message<GetAuthorFeedRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  /**
   * @generated from field: bsky.FeedType feed_type = 4;
   */
  feedType = FeedType.UNSPECIFIED

  constructor(data?: PartialMessage<GetAuthorFeedRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetAuthorFeedRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'feed_type', kind: 'enum', T: proto3.getEnumType(FeedType) },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorFeedRequest | PlainMessage<GetAuthorFeedRequest> | undefined,
    b: GetAuthorFeedRequest | PlainMessage<GetAuthorFeedRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetAuthorFeedRequest, a, b)
  }
}

/**
 * @generated from message bsky.AuthorFeedItem
 */
export class AuthorFeedItem extends Message<AuthorFeedItem> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  /**
   * @generated from field: string repost = 3;
   */
  repost = ''

  /**
   * @generated from field: string repost_cid = 4;
   */
  repostCid = ''

  /**
   * @generated from field: bool posts_and_author_threads = 5;
   */
  postsAndAuthorThreads = false

  /**
   * @generated from field: bool posts_no_replies = 6;
   */
  postsNoReplies = false

  /**
   * @generated from field: bool posts_with_media = 7;
   */
  postsWithMedia = false

  /**
   * @generated from field: bool is_reply = 8;
   */
  isReply = false

  /**
   * @generated from field: bool is_repost = 9;
   */
  isRepost = false

  /**
   * @generated from field: bool is_quote_post = 10;
   */
  isQuotePost = false

  constructor(data?: PartialMessage<AuthorFeedItem>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.AuthorFeedItem'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'repost', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'repost_cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'posts_and_author_threads',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 6,
      name: 'posts_no_replies',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 7,
      name: 'posts_with_media',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 8, name: 'is_reply', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: 'is_repost', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 10,
      name: 'is_quote_post',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AuthorFeedItem {
    return new AuthorFeedItem().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AuthorFeedItem {
    return new AuthorFeedItem().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AuthorFeedItem {
    return new AuthorFeedItem().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuthorFeedItem | PlainMessage<AuthorFeedItem> | undefined,
    b: AuthorFeedItem | PlainMessage<AuthorFeedItem> | undefined,
  ): boolean {
    return proto3.util.equals(AuthorFeedItem, a, b)
  }
}

/**
 * @generated from message bsky.GetAuthorFeedResponse
 */
export class GetAuthorFeedResponse extends Message<GetAuthorFeedResponse> {
  /**
   * @generated from field: repeated bsky.AuthorFeedItem items = 1;
   */
  items: AuthorFeedItem[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetAuthorFeedResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetAuthorFeedResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'items',
      kind: 'message',
      T: AuthorFeedItem,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorFeedResponse | PlainMessage<GetAuthorFeedResponse> | undefined,
    b: GetAuthorFeedResponse | PlainMessage<GetAuthorFeedResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetAuthorFeedResponse, a, b)
  }
}

/**
 * - Returns recent posts authored by users followed by a given DID, paginated
 *     - `getTimeline`
 *
 * @generated from message bsky.GetTimelineRequest
 */
export class GetTimelineRequest extends Message<GetTimelineRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  /**
   * @generated from field: bool exclude_replies = 4;
   */
  excludeReplies = false

  /**
   * @generated from field: bool exclude_reposts = 5;
   */
  excludeReposts = false

  /**
   * @generated from field: bool exclude_quotes = 6;
   */
  excludeQuotes = false

  constructor(data?: PartialMessage<GetTimelineRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetTimelineRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'exclude_replies',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 5,
      name: 'exclude_reposts',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 6,
      name: 'exclude_quotes',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetTimelineRequest {
    return new GetTimelineRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetTimelineRequest {
    return new GetTimelineRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetTimelineRequest {
    return new GetTimelineRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined,
    b: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetTimelineRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetTimelineResponse
 */
export class GetTimelineResponse extends Message<GetTimelineResponse> {
  /**
   * @generated from field: repeated bsky.TimelineFeedItem items = 1;
   */
  items: TimelineFeedItem[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetTimelineResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetTimelineResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'items',
      kind: 'message',
      T: TimelineFeedItem,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetTimelineResponse {
    return new GetTimelineResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetTimelineResponse {
    return new GetTimelineResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetTimelineResponse {
    return new GetTimelineResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined,
    b: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetTimelineResponse, a, b)
  }
}

/**
 * @generated from message bsky.TimelineFeedItem
 */
export class TimelineFeedItem extends Message<TimelineFeedItem> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  /**
   * @generated from field: string repost = 3;
   */
  repost = ''

  /**
   * @generated from field: string repost_cid = 4;
   */
  repostCid = ''

  /**
   * @generated from field: bool is_reply = 5;
   */
  isReply = false

  /**
   * @generated from field: bool is_repost = 6;
   */
  isRepost = false

  /**
   * @generated from field: bool is_quote_post = 7;
   */
  isQuotePost = false

  constructor(data?: PartialMessage<TimelineFeedItem>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TimelineFeedItem'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'repost', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'repost_cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'is_reply', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: 'is_repost', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 7,
      name: 'is_quote_post',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TimelineFeedItem {
    return new TimelineFeedItem().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TimelineFeedItem {
    return new TimelineFeedItem().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TimelineFeedItem {
    return new TimelineFeedItem().fromJsonString(jsonString, options)
  }

  static equals(
    a: TimelineFeedItem | PlainMessage<TimelineFeedItem> | undefined,
    b: TimelineFeedItem | PlainMessage<TimelineFeedItem> | undefined,
  ): boolean {
    return proto3.util.equals(TimelineFeedItem, a, b)
  }
}

/**
 * - Return recent post uris from users in list A
 *     - `getListFeed`
 *     - (This is essentially the same as `getTimeline` but instead of follows of a did, it is list items of a list)
 *
 * @generated from message bsky.GetListFeedRequest
 */
export class GetListFeedRequest extends Message<GetListFeedRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  /**
   * @generated from field: bool exclude_replies = 4;
   */
  excludeReplies = false

  /**
   * @generated from field: bool exclude_reposts = 5;
   */
  excludeReposts = false

  /**
   * @generated from field: bool exclude_quotes = 6;
   */
  excludeQuotes = false

  constructor(data?: PartialMessage<GetListFeedRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListFeedRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'exclude_replies',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 5,
      name: 'exclude_reposts',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 6,
      name: 'exclude_quotes',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListFeedRequest {
    return new GetListFeedRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListFeedRequest {
    return new GetListFeedRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListFeedRequest {
    return new GetListFeedRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListFeedRequest | PlainMessage<GetListFeedRequest> | undefined,
    b: GetListFeedRequest | PlainMessage<GetListFeedRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetListFeedRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetListFeedResponse
 */
export class GetListFeedResponse extends Message<GetListFeedResponse> {
  /**
   * @generated from field: repeated bsky.TimelineFeedItem items = 1;
   */
  items: TimelineFeedItem[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetListFeedResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetListFeedResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'items',
      kind: 'message',
      T: TimelineFeedItem,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetListFeedResponse {
    return new GetListFeedResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetListFeedResponse {
    return new GetListFeedResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetListFeedResponse {
    return new GetListFeedResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetListFeedResponse | PlainMessage<GetListFeedResponse> | undefined,
    b: GetListFeedResponse | PlainMessage<GetListFeedResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetListFeedResponse, a, b)
  }
}

/**
 * Return posts uris of any replies N levels above or M levels below post A
 *
 * @generated from message bsky.GetThreadRequest
 */
export class GetThreadRequest extends Message<GetThreadRequest> {
  /**
   * @generated from field: string post_uri = 1;
   */
  postUri = ''

  /**
   * @generated from field: int32 above = 2;
   */
  above = 0

  /**
   * @generated from field: int32 below = 3;
   */
  below = 0

  constructor(data?: PartialMessage<GetThreadRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetThreadRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'post_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'above', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'below', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetThreadRequest {
    return new GetThreadRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetThreadRequest {
    return new GetThreadRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetThreadRequest {
    return new GetThreadRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetThreadRequest | PlainMessage<GetThreadRequest> | undefined,
    b: GetThreadRequest | PlainMessage<GetThreadRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetThreadRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetThreadResponse
 */
export class GetThreadResponse extends Message<GetThreadResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  constructor(data?: PartialMessage<GetThreadResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetThreadResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetThreadResponse {
    return new GetThreadResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetThreadResponse {
    return new GetThreadResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetThreadResponse {
    return new GetThreadResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetThreadResponse | PlainMessage<GetThreadResponse> | undefined,
    b: GetThreadResponse | PlainMessage<GetThreadResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetThreadResponse, a, b)
  }
}

/**
 * - Return DIDs of actors matching term, paginated
 *     - `searchActors` skeleton
 *
 * @generated from message bsky.SearchActorsRequest
 */
export class SearchActorsRequest extends Message<SearchActorsRequest> {
  /**
   * @generated from field: string term = 1;
   */
  term = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<SearchActorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchActorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'term', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchActorsRequest {
    return new SearchActorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchActorsRequest {
    return new SearchActorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchActorsRequest {
    return new SearchActorsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SearchActorsRequest | PlainMessage<SearchActorsRequest> | undefined,
    b: SearchActorsRequest | PlainMessage<SearchActorsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SearchActorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.SearchActorsResponse
 */
export class SearchActorsResponse extends Message<SearchActorsResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<SearchActorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchActorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchActorsResponse {
    return new SearchActorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchActorsResponse {
    return new SearchActorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchActorsResponse {
    return new SearchActorsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SearchActorsResponse | PlainMessage<SearchActorsResponse> | undefined,
    b: SearchActorsResponse | PlainMessage<SearchActorsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SearchActorsResponse, a, b)
  }
}

/**
 * - Return uris of posts matching term, paginated
 *     - `searchPosts` skeleton
 *
 * @generated from message bsky.SearchPostsRequest
 */
export class SearchPostsRequest extends Message<SearchPostsRequest> {
  /**
   * @generated from field: string term = 1;
   */
  term = ''

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = ''

  constructor(data?: PartialMessage<SearchPostsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchPostsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'term', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchPostsRequest {
    return new SearchPostsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchPostsRequest {
    return new SearchPostsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchPostsRequest {
    return new SearchPostsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SearchPostsRequest | PlainMessage<SearchPostsRequest> | undefined,
    b: SearchPostsRequest | PlainMessage<SearchPostsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SearchPostsRequest, a, b)
  }
}

/**
 * @generated from message bsky.SearchPostsResponse
 */
export class SearchPostsResponse extends Message<SearchPostsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<SearchPostsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SearchPostsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchPostsResponse {
    return new SearchPostsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchPostsResponse {
    return new SearchPostsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchPostsResponse {
    return new SearchPostsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SearchPostsResponse | PlainMessage<SearchPostsResponse> | undefined,
    b: SearchPostsResponse | PlainMessage<SearchPostsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SearchPostsResponse, a, b)
  }
}

/**
 * - Return DIDs of suggested follows for a user, excluding anyone they already follow
 *     - `getSuggestions`, `getSuggestedFollowsByActor`
 *
 * @generated from message bsky.GetFollowSuggestionsRequest
 */
export class GetFollowSuggestionsRequest extends Message<GetFollowSuggestionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string relative_to_did = 2;
   */
  relativeToDid = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 4;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowSuggestionsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowSuggestionsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'relative_to_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowSuggestionsRequest {
    return new GetFollowSuggestionsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowSuggestionsRequest {
    return new GetFollowSuggestionsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowSuggestionsRequest {
    return new GetFollowSuggestionsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetFollowSuggestionsRequest
      | PlainMessage<GetFollowSuggestionsRequest>
      | undefined,
    b:
      | GetFollowSuggestionsRequest
      | PlainMessage<GetFollowSuggestionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowSuggestionsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowSuggestionsResponse
 */
export class GetFollowSuggestionsResponse extends Message<GetFollowSuggestionsResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetFollowSuggestionsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowSuggestionsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowSuggestionsResponse {
    return new GetFollowSuggestionsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowSuggestionsResponse {
    return new GetFollowSuggestionsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowSuggestionsResponse {
    return new GetFollowSuggestionsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetFollowSuggestionsResponse
      | PlainMessage<GetFollowSuggestionsResponse>
      | undefined,
    b:
      | GetFollowSuggestionsResponse
      | PlainMessage<GetFollowSuggestionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowSuggestionsResponse, a, b)
  }
}

/**
 * @generated from message bsky.SuggestedEntity
 */
export class SuggestedEntity extends Message<SuggestedEntity> {
  /**
   * @generated from field: string tag = 1;
   */
  tag = ''

  /**
   * @generated from field: string subject = 2;
   */
  subject = ''

  /**
   * @generated from field: string subject_type = 3;
   */
  subjectType = ''

  /**
   * @generated from field: int64 priority = 4;
   */
  priority = protoInt64.zero

  constructor(data?: PartialMessage<SuggestedEntity>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SuggestedEntity'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'tag', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'subject', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'subject_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'priority', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SuggestedEntity {
    return new SuggestedEntity().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SuggestedEntity {
    return new SuggestedEntity().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SuggestedEntity {
    return new SuggestedEntity().fromJsonString(jsonString, options)
  }

  static equals(
    a: SuggestedEntity | PlainMessage<SuggestedEntity> | undefined,
    b: SuggestedEntity | PlainMessage<SuggestedEntity> | undefined,
  ): boolean {
    return proto3.util.equals(SuggestedEntity, a, b)
  }
}

/**
 * @generated from message bsky.GetSuggestedEntitiesRequest
 */
export class GetSuggestedEntitiesRequest extends Message<GetSuggestedEntitiesRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetSuggestedEntitiesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetSuggestedEntitiesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetSuggestedEntitiesRequest {
    return new GetSuggestedEntitiesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedEntitiesRequest {
    return new GetSuggestedEntitiesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedEntitiesRequest {
    return new GetSuggestedEntitiesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSuggestedEntitiesRequest
      | PlainMessage<GetSuggestedEntitiesRequest>
      | undefined,
    b:
      | GetSuggestedEntitiesRequest
      | PlainMessage<GetSuggestedEntitiesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetSuggestedEntitiesRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetSuggestedEntitiesResponse
 */
export class GetSuggestedEntitiesResponse extends Message<GetSuggestedEntitiesResponse> {
  /**
   * @generated from field: repeated bsky.SuggestedEntity entities = 1;
   */
  entities: SuggestedEntity[] = []

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  constructor(data?: PartialMessage<GetSuggestedEntitiesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetSuggestedEntitiesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'entities',
      kind: 'message',
      T: SuggestedEntity,
      repeated: true,
    },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetSuggestedEntitiesResponse {
    return new GetSuggestedEntitiesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedEntitiesResponse {
    return new GetSuggestedEntitiesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetSuggestedEntitiesResponse {
    return new GetSuggestedEntitiesResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetSuggestedEntitiesResponse
      | PlainMessage<GetSuggestedEntitiesResponse>
      | undefined,
    b:
      | GetSuggestedEntitiesResponse
      | PlainMessage<GetSuggestedEntitiesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetSuggestedEntitiesResponse, a, b)
  }
}

/**
 * - Return post reply count with uris A, B, C…
 *     - All feed hydration
 *
 * @generated from message bsky.GetPostReplyCountsRequest
 */
export class GetPostReplyCountsRequest extends Message<GetPostReplyCountsRequest> {
  /**
   * @generated from field: repeated bsky.RecordRef refs = 1;
   */
  refs: RecordRef[] = []

  constructor(data?: PartialMessage<GetPostReplyCountsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetPostReplyCountsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'refs', kind: 'message', T: RecordRef, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetPostReplyCountsRequest {
    return new GetPostReplyCountsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetPostReplyCountsRequest {
    return new GetPostReplyCountsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetPostReplyCountsRequest {
    return new GetPostReplyCountsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetPostReplyCountsRequest
      | PlainMessage<GetPostReplyCountsRequest>
      | undefined,
    b:
      | GetPostReplyCountsRequest
      | PlainMessage<GetPostReplyCountsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetPostReplyCountsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetPostReplyCountsResponse
 */
export class GetPostReplyCountsResponse extends Message<GetPostReplyCountsResponse> {
  /**
   * @generated from field: repeated int32 counts = 1;
   */
  counts: number[] = []

  constructor(data?: PartialMessage<GetPostReplyCountsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetPostReplyCountsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'counts',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetPostReplyCountsResponse {
    return new GetPostReplyCountsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetPostReplyCountsResponse {
    return new GetPostReplyCountsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetPostReplyCountsResponse {
    return new GetPostReplyCountsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetPostReplyCountsResponse
      | PlainMessage<GetPostReplyCountsResponse>
      | undefined,
    b:
      | GetPostReplyCountsResponse
      | PlainMessage<GetPostReplyCountsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetPostReplyCountsResponse, a, b)
  }
}

/**
 * - Get all labels on a subjects A, B, C (uri or did) issued by dids D, E, F…
 *     - label hydration on nearly every view
 *
 * @generated from message bsky.GetLabelsRequest
 */
export class GetLabelsRequest extends Message<GetLabelsRequest> {
  /**
   * @generated from field: repeated string subjects = 1;
   */
  subjects: string[] = []

  /**
   * @generated from field: repeated string issuers = 2;
   */
  issuers: string[] = []

  constructor(data?: PartialMessage<GetLabelsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLabelsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'subjects',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 2,
      name: 'issuers',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLabelsRequest {
    return new GetLabelsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLabelsRequest {
    return new GetLabelsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLabelsRequest {
    return new GetLabelsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLabelsRequest | PlainMessage<GetLabelsRequest> | undefined,
    b: GetLabelsRequest | PlainMessage<GetLabelsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetLabelsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLabelsResponse
 */
export class GetLabelsResponse extends Message<GetLabelsResponse> {
  /**
   * @generated from field: repeated bytes labels = 1;
   */
  labels: Uint8Array[] = []

  constructor(data?: PartialMessage<GetLabelsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLabelsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'labels',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLabelsResponse {
    return new GetLabelsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLabelsResponse {
    return new GetLabelsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLabelsResponse {
    return new GetLabelsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLabelsResponse | PlainMessage<GetLabelsResponse> | undefined,
    b: GetLabelsResponse | PlainMessage<GetLabelsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetLabelsResponse, a, b)
  }
}

/**
 * - Latest repo rev of user w/ DID
 *     - Read-after-write header in`getProfile`, `getProfiles`, `getActorLikes`, `getAuthorFeed`, `getListFeed`, `getPostThread`, `getTimeline`.  Could it be view dependent?
 *
 * @generated from message bsky.GetLatestRevRequest
 */
export class GetLatestRevRequest extends Message<GetLatestRevRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  constructor(data?: PartialMessage<GetLatestRevRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLatestRevRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLatestRevRequest {
    return new GetLatestRevRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined,
    b: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetLatestRevRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetLatestRevResponse
 */
export class GetLatestRevResponse extends Message<GetLatestRevResponse> {
  /**
   * @generated from field: string rev = 1;
   */
  rev = ''

  constructor(data?: PartialMessage<GetLatestRevResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetLatestRevResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'rev', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetLatestRevResponse {
    return new GetLatestRevResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined,
    b: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetLatestRevResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetIdentityByDidRequest
 */
export class GetIdentityByDidRequest extends Message<GetIdentityByDidRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  constructor(data?: PartialMessage<GetIdentityByDidRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetIdentityByDidRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByDidRequest {
    return new GetIdentityByDidRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetIdentityByDidRequest
      | PlainMessage<GetIdentityByDidRequest>
      | undefined,
    b:
      | GetIdentityByDidRequest
      | PlainMessage<GetIdentityByDidRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetIdentityByDidRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetIdentityByDidResponse
 */
export class GetIdentityByDidResponse extends Message<GetIdentityByDidResponse> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string handle = 2;
   */
  handle = ''

  /**
   * @generated from field: bytes keys = 3;
   */
  keys = new Uint8Array(0)

  /**
   * @generated from field: bytes services = 4;
   */
  services = new Uint8Array(0)

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp

  constructor(data?: PartialMessage<GetIdentityByDidResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetIdentityByDidResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'handle', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'keys', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'services', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: 'updated', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByDidResponse {
    return new GetIdentityByDidResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetIdentityByDidResponse
      | PlainMessage<GetIdentityByDidResponse>
      | undefined,
    b:
      | GetIdentityByDidResponse
      | PlainMessage<GetIdentityByDidResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetIdentityByDidResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetIdentityByHandleRequest
 */
export class GetIdentityByHandleRequest extends Message<GetIdentityByHandleRequest> {
  /**
   * @generated from field: string handle = 1;
   */
  handle = ''

  constructor(data?: PartialMessage<GetIdentityByHandleRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetIdentityByHandleRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'handle', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByHandleRequest {
    return new GetIdentityByHandleRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetIdentityByHandleRequest
      | PlainMessage<GetIdentityByHandleRequest>
      | undefined,
    b:
      | GetIdentityByHandleRequest
      | PlainMessage<GetIdentityByHandleRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetIdentityByHandleRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetIdentityByHandleResponse
 */
export class GetIdentityByHandleResponse extends Message<GetIdentityByHandleResponse> {
  /**
   * @generated from field: string handle = 1;
   */
  handle = ''

  /**
   * @generated from field: string did = 2;
   */
  did = ''

  /**
   * @generated from field: bytes keys = 3;
   */
  keys = new Uint8Array(0)

  /**
   * @generated from field: bytes services = 4;
   */
  services = new Uint8Array(0)

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp

  constructor(data?: PartialMessage<GetIdentityByHandleResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetIdentityByHandleResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'handle', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'keys', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'services', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: 'updated', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetIdentityByHandleResponse {
    return new GetIdentityByHandleResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetIdentityByHandleResponse
      | PlainMessage<GetIdentityByHandleResponse>
      | undefined,
    b:
      | GetIdentityByHandleResponse
      | PlainMessage<GetIdentityByHandleResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetIdentityByHandleResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetBlobTakedownRequest
 */
export class GetBlobTakedownRequest extends Message<GetBlobTakedownRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  constructor(data?: PartialMessage<GetBlobTakedownRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlobTakedownRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlobTakedownRequest
      | PlainMessage<GetBlobTakedownRequest>
      | undefined,
    b:
      | GetBlobTakedownRequest
      | PlainMessage<GetBlobTakedownRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlobTakedownRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetBlobTakedownResponse
 */
export class GetBlobTakedownResponse extends Message<GetBlobTakedownResponse> {
  /**
   * @generated from field: bool taken_down = 1;
   */
  takenDown = false

  /**
   * @generated from field: string takedown_ref = 2;
   */
  takedownRef = ''

  constructor(data?: PartialMessage<GetBlobTakedownResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetBlobTakedownResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'taken_down', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: 'takedown_ref',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetBlobTakedownResponse
      | PlainMessage<GetBlobTakedownResponse>
      | undefined,
    b:
      | GetBlobTakedownResponse
      | PlainMessage<GetBlobTakedownResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetBlobTakedownResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetActorTakedownRequest
 */
export class GetActorTakedownRequest extends Message<GetActorTakedownRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  constructor(data?: PartialMessage<GetActorTakedownRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorTakedownRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorTakedownRequest {
    return new GetActorTakedownRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorTakedownRequest {
    return new GetActorTakedownRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorTakedownRequest {
    return new GetActorTakedownRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorTakedownRequest
      | PlainMessage<GetActorTakedownRequest>
      | undefined,
    b:
      | GetActorTakedownRequest
      | PlainMessage<GetActorTakedownRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorTakedownRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetActorTakedownResponse
 */
export class GetActorTakedownResponse extends Message<GetActorTakedownResponse> {
  /**
   * @generated from field: bool taken_down = 1;
   */
  takenDown = false

  /**
   * @generated from field: string takedown_ref = 2;
   */
  takedownRef = ''

  constructor(data?: PartialMessage<GetActorTakedownResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetActorTakedownResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'taken_down', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: 'takedown_ref',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetActorTakedownResponse {
    return new GetActorTakedownResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetActorTakedownResponse {
    return new GetActorTakedownResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetActorTakedownResponse {
    return new GetActorTakedownResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetActorTakedownResponse
      | PlainMessage<GetActorTakedownResponse>
      | undefined,
    b:
      | GetActorTakedownResponse
      | PlainMessage<GetActorTakedownResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetActorTakedownResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetRecordTakedownRequest
 */
export class GetRecordTakedownRequest extends Message<GetRecordTakedownRequest> {
  /**
   * @generated from field: string record_uri = 1;
   */
  recordUri = ''

  constructor(data?: PartialMessage<GetRecordTakedownRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRecordTakedownRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'record_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRecordTakedownRequest {
    return new GetRecordTakedownRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRecordTakedownRequest {
    return new GetRecordTakedownRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRecordTakedownRequest {
    return new GetRecordTakedownRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRecordTakedownRequest
      | PlainMessage<GetRecordTakedownRequest>
      | undefined,
    b:
      | GetRecordTakedownRequest
      | PlainMessage<GetRecordTakedownRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRecordTakedownRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetRecordTakedownResponse
 */
export class GetRecordTakedownResponse extends Message<GetRecordTakedownResponse> {
  /**
   * @generated from field: bool taken_down = 1;
   */
  takenDown = false

  /**
   * @generated from field: string takedown_ref = 2;
   */
  takedownRef = ''

  constructor(data?: PartialMessage<GetRecordTakedownResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetRecordTakedownResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'taken_down', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: 'takedown_ref',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRecordTakedownResponse {
    return new GetRecordTakedownResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRecordTakedownResponse {
    return new GetRecordTakedownResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRecordTakedownResponse {
    return new GetRecordTakedownResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRecordTakedownResponse
      | PlainMessage<GetRecordTakedownResponse>
      | undefined,
    b:
      | GetRecordTakedownResponse
      | PlainMessage<GetRecordTakedownResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRecordTakedownResponse, a, b)
  }
}

/**
 * GetFollowsFollowing gets the list of DIDs that the actor follows that also follow the targets
 *
 * @generated from message bsky.GetFollowsFollowingRequest
 */
export class GetFollowsFollowingRequest extends Message<GetFollowsFollowingRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: repeated string target_dids = 2;
   */
  targetDids: string[] = []

  constructor(data?: PartialMessage<GetFollowsFollowingRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowsFollowingRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'target_dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowsFollowingRequest {
    return new GetFollowsFollowingRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsFollowingRequest {
    return new GetFollowsFollowingRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsFollowingRequest {
    return new GetFollowsFollowingRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetFollowsFollowingRequest
      | PlainMessage<GetFollowsFollowingRequest>
      | undefined,
    b:
      | GetFollowsFollowingRequest
      | PlainMessage<GetFollowsFollowingRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowsFollowingRequest, a, b)
  }
}

/**
 * @generated from message bsky.FollowsFollowing
 */
export class FollowsFollowing extends Message<FollowsFollowing> {
  /**
   * @generated from field: string target_did = 1;
   */
  targetDid = ''

  /**
   * @generated from field: repeated string dids = 2;
   */
  dids: string[] = []

  constructor(data?: PartialMessage<FollowsFollowing>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.FollowsFollowing'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'target_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'dids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): FollowsFollowing {
    return new FollowsFollowing().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): FollowsFollowing {
    return new FollowsFollowing().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FollowsFollowing {
    return new FollowsFollowing().fromJsonString(jsonString, options)
  }

  static equals(
    a: FollowsFollowing | PlainMessage<FollowsFollowing> | undefined,
    b: FollowsFollowing | PlainMessage<FollowsFollowing> | undefined,
  ): boolean {
    return proto3.util.equals(FollowsFollowing, a, b)
  }
}

/**
 * @generated from message bsky.GetFollowsFollowingResponse
 */
export class GetFollowsFollowingResponse extends Message<GetFollowsFollowingResponse> {
  /**
   * @generated from field: repeated bsky.FollowsFollowing results = 1;
   */
  results: FollowsFollowing[] = []

  constructor(data?: PartialMessage<GetFollowsFollowingResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetFollowsFollowingResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'results',
      kind: 'message',
      T: FollowsFollowing,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetFollowsFollowingResponse {
    return new GetFollowsFollowingResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsFollowingResponse {
    return new GetFollowsFollowingResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetFollowsFollowingResponse {
    return new GetFollowsFollowingResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetFollowsFollowingResponse
      | PlainMessage<GetFollowsFollowingResponse>
      | undefined,
    b:
      | GetFollowsFollowingResponse
      | PlainMessage<GetFollowsFollowingResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetFollowsFollowingResponse, a, b)
  }
}

/**
 * Ping
 *
 * @generated from message bsky.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.PingRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PingRequest {
    return new PingRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PingRequest {
    return new PingRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingRequest | PlainMessage<PingRequest> | undefined,
    b: PingRequest | PlainMessage<PingRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PingRequest, a, b)
  }
}

/**
 * @generated from message bsky.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.PingResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PingResponse {
    return new PingResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PingResponse {
    return new PingResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingResponse | PlainMessage<PingResponse> | undefined,
    b: PingResponse | PlainMessage<PingResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PingResponse, a, b)
  }
}

/**
 * @generated from message bsky.SetupTablesRequest
 */
export class SetupTablesRequest extends Message<SetupTablesRequest> {
  constructor(data?: PartialMessage<SetupTablesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SetupTablesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SetupTablesRequest {
    return new SetupTablesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SetupTablesRequest {
    return new SetupTablesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SetupTablesRequest {
    return new SetupTablesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetupTablesRequest | PlainMessage<SetupTablesRequest> | undefined,
    b: SetupTablesRequest | PlainMessage<SetupTablesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SetupTablesRequest, a, b)
  }
}

/**
 * @generated from message bsky.SetupTablesResponse
 */
export class SetupTablesResponse extends Message<SetupTablesResponse> {
  constructor(data?: PartialMessage<SetupTablesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SetupTablesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SetupTablesResponse {
    return new SetupTablesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SetupTablesResponse {
    return new SetupTablesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SetupTablesResponse {
    return new SetupTablesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetupTablesResponse | PlainMessage<SetupTablesResponse> | undefined,
    b: SetupTablesResponse | PlainMessage<SetupTablesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SetupTablesResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateLatestRevRequest
 */
export class UpdateLatestRevRequest extends Message<UpdateLatestRevRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string rev = 2;
   */
  rev = ''

  constructor(data?: PartialMessage<UpdateLatestRevRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateLatestRevRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rev', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateLatestRevRequest {
    return new UpdateLatestRevRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateLatestRevRequest {
    return new UpdateLatestRevRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateLatestRevRequest {
    return new UpdateLatestRevRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateLatestRevRequest
      | PlainMessage<UpdateLatestRevRequest>
      | undefined,
    b:
      | UpdateLatestRevRequest
      | PlainMessage<UpdateLatestRevRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateLatestRevRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateLatestRevResponse
 */
export class UpdateLatestRevResponse extends Message<UpdateLatestRevResponse> {
  constructor(data?: PartialMessage<UpdateLatestRevResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateLatestRevResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateLatestRevResponse {
    return new UpdateLatestRevResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateLatestRevResponse {
    return new UpdateLatestRevResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateLatestRevResponse {
    return new UpdateLatestRevResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateLatestRevResponse
      | PlainMessage<UpdateLatestRevResponse>
      | undefined,
    b:
      | UpdateLatestRevResponse
      | PlainMessage<UpdateLatestRevResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateLatestRevResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelsRequest
 */
export class CreateLabelsRequest extends Message<CreateLabelsRequest> {
  /**
   * @generated from field: repeated bytes labels = 1;
   */
  labels: Uint8Array[] = []

  constructor(data?: PartialMessage<CreateLabelsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'labels',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelsRequest {
    return new CreateLabelsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsRequest {
    return new CreateLabelsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsRequest {
    return new CreateLabelsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateLabelsRequest | PlainMessage<CreateLabelsRequest> | undefined,
    b: CreateLabelsRequest | PlainMessage<CreateLabelsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelsResponse
 */
export class CreateLabelsResponse extends Message<CreateLabelsResponse> {
  constructor(data?: PartialMessage<CreateLabelsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelsResponse {
    return new CreateLabelsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsResponse {
    return new CreateLabelsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsResponse {
    return new CreateLabelsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateLabelsResponse | PlainMessage<CreateLabelsResponse> | undefined,
    b: CreateLabelsResponse | PlainMessage<CreateLabelsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelsCacheUpdateRequest
 */
export class CreateLabelsCacheUpdateRequest extends Message<CreateLabelsCacheUpdateRequest> {
  /**
   * @generated from field: repeated bytes labels = 1;
   */
  labels: Uint8Array[] = []

  constructor(data?: PartialMessage<CreateLabelsCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelsCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'labels',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelsCacheUpdateRequest {
    return new CreateLabelsCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsCacheUpdateRequest {
    return new CreateLabelsCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsCacheUpdateRequest {
    return new CreateLabelsCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateLabelsCacheUpdateRequest
      | PlainMessage<CreateLabelsCacheUpdateRequest>
      | undefined,
    b:
      | CreateLabelsCacheUpdateRequest
      | PlainMessage<CreateLabelsCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelsCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelsCacheUpdateResponse
 */
export class CreateLabelsCacheUpdateResponse extends Message<CreateLabelsCacheUpdateResponse> {
  constructor(data?: PartialMessage<CreateLabelsCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelsCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelsCacheUpdateResponse {
    return new CreateLabelsCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsCacheUpdateResponse {
    return new CreateLabelsCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelsCacheUpdateResponse {
    return new CreateLabelsCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateLabelsCacheUpdateResponse
      | PlainMessage<CreateLabelsCacheUpdateResponse>
      | undefined,
    b:
      | CreateLabelsCacheUpdateResponse
      | PlainMessage<CreateLabelsCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelsCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorUpstreamStatusRequest
 */
export class UpdateActorUpstreamStatusRequest extends Message<UpdateActorUpstreamStatusRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: bool active = 2;
   */
  active = false

  /**
   * @generated from field: string upstream_status = 3;
   */
  upstreamStatus = ''

  constructor(data?: PartialMessage<UpdateActorUpstreamStatusRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorUpstreamStatusRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'active', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 3,
      name: 'upstream_status',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorUpstreamStatusRequest {
    return new UpdateActorUpstreamStatusRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorUpstreamStatusRequest {
    return new UpdateActorUpstreamStatusRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorUpstreamStatusRequest {
    return new UpdateActorUpstreamStatusRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateActorUpstreamStatusRequest
      | PlainMessage<UpdateActorUpstreamStatusRequest>
      | undefined,
    b:
      | UpdateActorUpstreamStatusRequest
      | PlainMessage<UpdateActorUpstreamStatusRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorUpstreamStatusRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorUpstreamStatusResponse
 */
export class UpdateActorUpstreamStatusResponse extends Message<UpdateActorUpstreamStatusResponse> {
  constructor(data?: PartialMessage<UpdateActorUpstreamStatusResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorUpstreamStatusResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorUpstreamStatusResponse {
    return new UpdateActorUpstreamStatusResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorUpstreamStatusResponse {
    return new UpdateActorUpstreamStatusResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorUpstreamStatusResponse {
    return new UpdateActorUpstreamStatusResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateActorUpstreamStatusResponse
      | PlainMessage<UpdateActorUpstreamStatusResponse>
      | undefined,
    b:
      | UpdateActorUpstreamStatusResponse
      | PlainMessage<UpdateActorUpstreamStatusResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorUpstreamStatusResponse, a, b)
  }
}

/**
 * @generated from message bsky.TakedownActorRequest
 */
export class TakedownActorRequest extends Message<TakedownActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string ref = 2;
   */
  ref = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<TakedownActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'ref', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownActorRequest {
    return new TakedownActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownActorRequest {
    return new TakedownActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownActorRequest {
    return new TakedownActorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: TakedownActorRequest | PlainMessage<TakedownActorRequest> | undefined,
    b: TakedownActorRequest | PlainMessage<TakedownActorRequest> | undefined,
  ): boolean {
    return proto3.util.equals(TakedownActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.TakedownActorResponse
 */
export class TakedownActorResponse extends Message<TakedownActorResponse> {
  constructor(data?: PartialMessage<TakedownActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownActorResponse {
    return new TakedownActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownActorResponse {
    return new TakedownActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownActorResponse {
    return new TakedownActorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: TakedownActorResponse | PlainMessage<TakedownActorResponse> | undefined,
    b: TakedownActorResponse | PlainMessage<TakedownActorResponse> | undefined,
  ): boolean {
    return proto3.util.equals(TakedownActorResponse, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownActorRequest
 */
export class UntakedownActorRequest extends Message<UntakedownActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<UntakedownActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownActorRequest {
    return new UntakedownActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownActorRequest {
    return new UntakedownActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownActorRequest {
    return new UntakedownActorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UntakedownActorRequest
      | PlainMessage<UntakedownActorRequest>
      | undefined,
    b:
      | UntakedownActorRequest
      | PlainMessage<UntakedownActorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownActorResponse
 */
export class UntakedownActorResponse extends Message<UntakedownActorResponse> {
  constructor(data?: PartialMessage<UntakedownActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownActorResponse {
    return new UntakedownActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownActorResponse {
    return new UntakedownActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownActorResponse {
    return new UntakedownActorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UntakedownActorResponse
      | PlainMessage<UntakedownActorResponse>
      | undefined,
    b:
      | UntakedownActorResponse
      | PlainMessage<UntakedownActorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownActorResponse, a, b)
  }
}

/**
 * @generated from message bsky.TakedownBlobRequest
 */
export class TakedownBlobRequest extends Message<TakedownBlobRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  /**
   * @generated from field: string ref = 3;
   */
  ref = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 4;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<TakedownBlobRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownBlobRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'ref', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownBlobRequest {
    return new TakedownBlobRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownBlobRequest {
    return new TakedownBlobRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownBlobRequest {
    return new TakedownBlobRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: TakedownBlobRequest | PlainMessage<TakedownBlobRequest> | undefined,
    b: TakedownBlobRequest | PlainMessage<TakedownBlobRequest> | undefined,
  ): boolean {
    return proto3.util.equals(TakedownBlobRequest, a, b)
  }
}

/**
 * @generated from message bsky.TakedownBlobResponse
 */
export class TakedownBlobResponse extends Message<TakedownBlobResponse> {
  constructor(data?: PartialMessage<TakedownBlobResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownBlobResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownBlobResponse {
    return new TakedownBlobResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownBlobResponse {
    return new TakedownBlobResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownBlobResponse {
    return new TakedownBlobResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: TakedownBlobResponse | PlainMessage<TakedownBlobResponse> | undefined,
    b: TakedownBlobResponse | PlainMessage<TakedownBlobResponse> | undefined,
  ): boolean {
    return proto3.util.equals(TakedownBlobResponse, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownBlobRequest
 */
export class UntakedownBlobRequest extends Message<UntakedownBlobRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cid = 2;
   */
  cid = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<UntakedownBlobRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownBlobRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownBlobRequest {
    return new UntakedownBlobRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownBlobRequest {
    return new UntakedownBlobRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownBlobRequest {
    return new UntakedownBlobRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UntakedownBlobRequest | PlainMessage<UntakedownBlobRequest> | undefined,
    b: UntakedownBlobRequest | PlainMessage<UntakedownBlobRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownBlobRequest, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownBlobResponse
 */
export class UntakedownBlobResponse extends Message<UntakedownBlobResponse> {
  constructor(data?: PartialMessage<UntakedownBlobResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownBlobResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownBlobResponse {
    return new UntakedownBlobResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownBlobResponse {
    return new UntakedownBlobResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownBlobResponse {
    return new UntakedownBlobResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UntakedownBlobResponse
      | PlainMessage<UntakedownBlobResponse>
      | undefined,
    b:
      | UntakedownBlobResponse
      | PlainMessage<UntakedownBlobResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownBlobResponse, a, b)
  }
}

/**
 * @generated from message bsky.TakedownRecordRequest
 */
export class TakedownRecordRequest extends Message<TakedownRecordRequest> {
  /**
   * @generated from field: string record_uri = 1;
   */
  recordUri = ''

  /**
   * @generated from field: string ref = 2;
   */
  ref = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<TakedownRecordRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownRecordRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'record_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'ref', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownRecordRequest {
    return new TakedownRecordRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownRecordRequest {
    return new TakedownRecordRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownRecordRequest {
    return new TakedownRecordRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: TakedownRecordRequest | PlainMessage<TakedownRecordRequest> | undefined,
    b: TakedownRecordRequest | PlainMessage<TakedownRecordRequest> | undefined,
  ): boolean {
    return proto3.util.equals(TakedownRecordRequest, a, b)
  }
}

/**
 * @generated from message bsky.TakedownRecordResponse
 */
export class TakedownRecordResponse extends Message<TakedownRecordResponse> {
  constructor(data?: PartialMessage<TakedownRecordResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownRecordResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownRecordResponse {
    return new TakedownRecordResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownRecordResponse {
    return new TakedownRecordResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownRecordResponse {
    return new TakedownRecordResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TakedownRecordResponse
      | PlainMessage<TakedownRecordResponse>
      | undefined,
    b:
      | TakedownRecordResponse
      | PlainMessage<TakedownRecordResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TakedownRecordResponse, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownRecordRequest
 */
export class UntakedownRecordRequest extends Message<UntakedownRecordRequest> {
  /**
   * @generated from field: string record_uri = 1;
   */
  recordUri = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<UntakedownRecordRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownRecordRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'record_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownRecordRequest {
    return new UntakedownRecordRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownRecordRequest {
    return new UntakedownRecordRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownRecordRequest {
    return new UntakedownRecordRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UntakedownRecordRequest
      | PlainMessage<UntakedownRecordRequest>
      | undefined,
    b:
      | UntakedownRecordRequest
      | PlainMessage<UntakedownRecordRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownRecordRequest, a, b)
  }
}

/**
 * @generated from message bsky.UntakedownRecordResponse
 */
export class UntakedownRecordResponse extends Message<UntakedownRecordResponse> {
  constructor(data?: PartialMessage<UntakedownRecordResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UntakedownRecordResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UntakedownRecordResponse {
    return new UntakedownRecordResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UntakedownRecordResponse {
    return new UntakedownRecordResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UntakedownRecordResponse {
    return new UntakedownRecordResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UntakedownRecordResponse
      | PlainMessage<UntakedownRecordResponse>
      | undefined,
    b:
      | UntakedownRecordResponse
      | PlainMessage<UntakedownRecordResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UntakedownRecordResponse, a, b)
  }
}

/**
 * @generated from message bsky.TakedownPostCacheUpdateRequest
 */
export class TakedownPostCacheUpdateRequest extends Message<TakedownPostCacheUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 4;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<TakedownPostCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownPostCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownPostCacheUpdateRequest {
    return new TakedownPostCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownPostCacheUpdateRequest {
    return new TakedownPostCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownPostCacheUpdateRequest {
    return new TakedownPostCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TakedownPostCacheUpdateRequest
      | PlainMessage<TakedownPostCacheUpdateRequest>
      | undefined,
    b:
      | TakedownPostCacheUpdateRequest
      | PlainMessage<TakedownPostCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TakedownPostCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.TakedownPostCacheUpdateResponse
 */
export class TakedownPostCacheUpdateResponse extends Message<TakedownPostCacheUpdateResponse> {
  constructor(data?: PartialMessage<TakedownPostCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TakedownPostCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TakedownPostCacheUpdateResponse {
    return new TakedownPostCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TakedownPostCacheUpdateResponse {
    return new TakedownPostCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TakedownPostCacheUpdateResponse {
    return new TakedownPostCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TakedownPostCacheUpdateResponse
      | PlainMessage<TakedownPostCacheUpdateResponse>
      | undefined,
    b:
      | TakedownPostCacheUpdateResponse
      | PlainMessage<TakedownPostCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TakedownPostCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostRequest
 */
export class CreateFeedPostRequest extends Message<CreateFeedPostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedPostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostRequest {
    return new CreateFeedPostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostRequest {
    return new CreateFeedPostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostRequest {
    return new CreateFeedPostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateFeedPostRequest | PlainMessage<CreateFeedPostRequest> | undefined,
    b: CreateFeedPostRequest | PlainMessage<CreateFeedPostRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostResponse
 */
export class CreateFeedPostResponse extends Message<CreateFeedPostResponse> {
  constructor(data?: PartialMessage<CreateFeedPostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostResponse {
    return new CreateFeedPostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostResponse {
    return new CreateFeedPostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostResponse {
    return new CreateFeedPostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedPostResponse
      | PlainMessage<CreateFeedPostResponse>
      | undefined,
    b:
      | CreateFeedPostResponse
      | PlainMessage<CreateFeedPostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostRequest
 */
export class DeleteFeedPostRequest extends Message<DeleteFeedPostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedPostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostRequest {
    return new DeleteFeedPostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostRequest {
    return new DeleteFeedPostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostRequest {
    return new DeleteFeedPostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteFeedPostRequest | PlainMessage<DeleteFeedPostRequest> | undefined,
    b: DeleteFeedPostRequest | PlainMessage<DeleteFeedPostRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostResponse
 */
export class DeleteFeedPostResponse extends Message<DeleteFeedPostResponse> {
  constructor(data?: PartialMessage<DeleteFeedPostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostResponse {
    return new DeleteFeedPostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostResponse {
    return new DeleteFeedPostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostResponse {
    return new DeleteFeedPostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedPostResponse
      | PlainMessage<DeleteFeedPostResponse>
      | undefined,
    b:
      | DeleteFeedPostResponse
      | PlainMessage<DeleteFeedPostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostRequest
 */
export class UpdateFeedPostRequest extends Message<UpdateFeedPostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedPostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostRequest {
    return new UpdateFeedPostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostRequest {
    return new UpdateFeedPostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostRequest {
    return new UpdateFeedPostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateFeedPostRequest | PlainMessage<UpdateFeedPostRequest> | undefined,
    b: UpdateFeedPostRequest | PlainMessage<UpdateFeedPostRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostResponse
 */
export class UpdateFeedPostResponse extends Message<UpdateFeedPostResponse> {
  constructor(data?: PartialMessage<UpdateFeedPostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostResponse {
    return new UpdateFeedPostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostResponse {
    return new UpdateFeedPostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostResponse {
    return new UpdateFeedPostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedPostResponse
      | PlainMessage<UpdateFeedPostResponse>
      | undefined,
    b:
      | UpdateFeedPostResponse
      | PlainMessage<UpdateFeedPostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostNotificationsRequest
 */
export class CreateFeedPostNotificationsRequest extends Message<CreateFeedPostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedPostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostNotificationsRequest {
    return new CreateFeedPostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostNotificationsRequest {
    return new CreateFeedPostNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostNotificationsRequest {
    return new CreateFeedPostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostNotificationsRequest
      | PlainMessage<CreateFeedPostNotificationsRequest>
      | undefined,
    b:
      | CreateFeedPostNotificationsRequest
      | PlainMessage<CreateFeedPostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostNotificationsResponse
 */
export class CreateFeedPostNotificationsResponse extends Message<CreateFeedPostNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = []

  constructor(data?: PartialMessage<CreateFeedPostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostNotificationsResponse {
    return new CreateFeedPostNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostNotificationsResponse {
    return new CreateFeedPostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostNotificationsResponse {
    return new CreateFeedPostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostNotificationsResponse
      | PlainMessage<CreateFeedPostNotificationsResponse>
      | undefined,
    b:
      | CreateFeedPostNotificationsResponse
      | PlainMessage<CreateFeedPostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostNotificationsRequest
 */
export class DeleteFeedPostNotificationsRequest extends Message<DeleteFeedPostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedPostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostNotificationsRequest {
    return new DeleteFeedPostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostNotificationsRequest {
    return new DeleteFeedPostNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostNotificationsRequest {
    return new DeleteFeedPostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostNotificationsRequest
      | PlainMessage<DeleteFeedPostNotificationsRequest>
      | undefined,
    b:
      | DeleteFeedPostNotificationsRequest
      | PlainMessage<DeleteFeedPostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostNotificationsResponse
 */
export class DeleteFeedPostNotificationsResponse extends Message<DeleteFeedPostNotificationsResponse> {
  constructor(data?: PartialMessage<DeleteFeedPostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostNotificationsResponse {
    return new DeleteFeedPostNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostNotificationsResponse {
    return new DeleteFeedPostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostNotificationsResponse {
    return new DeleteFeedPostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostNotificationsResponse
      | PlainMessage<DeleteFeedPostNotificationsResponse>
      | undefined,
    b:
      | DeleteFeedPostNotificationsResponse
      | PlainMessage<DeleteFeedPostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostNotificationsRequest
 */
export class UpdateFeedPostNotificationsRequest extends Message<UpdateFeedPostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedPostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostNotificationsRequest {
    return new UpdateFeedPostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostNotificationsRequest {
    return new UpdateFeedPostNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostNotificationsRequest {
    return new UpdateFeedPostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedPostNotificationsRequest
      | PlainMessage<UpdateFeedPostNotificationsRequest>
      | undefined,
    b:
      | UpdateFeedPostNotificationsRequest
      | PlainMessage<UpdateFeedPostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostNotificationsResponse
 */
export class UpdateFeedPostNotificationsResponse extends Message<UpdateFeedPostNotificationsResponse> {
  constructor(data?: PartialMessage<UpdateFeedPostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostNotificationsResponse {
    return new UpdateFeedPostNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostNotificationsResponse {
    return new UpdateFeedPostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostNotificationsResponse {
    return new UpdateFeedPostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedPostNotificationsResponse
      | PlainMessage<UpdateFeedPostNotificationsResponse>
      | undefined,
    b:
      | UpdateFeedPostNotificationsResponse
      | PlainMessage<UpdateFeedPostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostTimelineFanOutRequest
 */
export class CreateFeedPostTimelineFanOutRequest extends Message<CreateFeedPostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: int32 limit = 6;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 7;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedPostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostTimelineFanOutRequest {
    return new CreateFeedPostTimelineFanOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostTimelineFanOutRequest {
    return new CreateFeedPostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostTimelineFanOutRequest {
    return new CreateFeedPostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostTimelineFanOutRequest
      | PlainMessage<CreateFeedPostTimelineFanOutRequest>
      | undefined,
    b:
      | CreateFeedPostTimelineFanOutRequest
      | PlainMessage<CreateFeedPostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostTimelineFanOutResponse
 */
export class CreateFeedPostTimelineFanOutResponse extends Message<CreateFeedPostTimelineFanOutResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedPostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostTimelineFanOutResponse {
    return new CreateFeedPostTimelineFanOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostTimelineFanOutResponse {
    return new CreateFeedPostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostTimelineFanOutResponse {
    return new CreateFeedPostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostTimelineFanOutResponse
      | PlainMessage<CreateFeedPostTimelineFanOutResponse>
      | undefined,
    b:
      | CreateFeedPostTimelineFanOutResponse
      | PlainMessage<CreateFeedPostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostListFeedFanOutRequest
 */
export class CreateFeedPostListFeedFanOutRequest extends Message<CreateFeedPostListFeedFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: int32 limit = 6;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 7;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedPostListFeedFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostListFeedFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostListFeedFanOutRequest {
    return new CreateFeedPostListFeedFanOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostListFeedFanOutRequest {
    return new CreateFeedPostListFeedFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostListFeedFanOutRequest {
    return new CreateFeedPostListFeedFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostListFeedFanOutRequest
      | PlainMessage<CreateFeedPostListFeedFanOutRequest>
      | undefined,
    b:
      | CreateFeedPostListFeedFanOutRequest
      | PlainMessage<CreateFeedPostListFeedFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostListFeedFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedPostListFeedFanOutResponse
 */
export class CreateFeedPostListFeedFanOutResponse extends Message<CreateFeedPostListFeedFanOutResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedPostListFeedFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedPostListFeedFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedPostListFeedFanOutResponse {
    return new CreateFeedPostListFeedFanOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostListFeedFanOutResponse {
    return new CreateFeedPostListFeedFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedPostListFeedFanOutResponse {
    return new CreateFeedPostListFeedFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedPostListFeedFanOutResponse
      | PlainMessage<CreateFeedPostListFeedFanOutResponse>
      | undefined,
    b:
      | CreateFeedPostListFeedFanOutResponse
      | PlainMessage<CreateFeedPostListFeedFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedPostListFeedFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostTimelineFanOutRequest
 */
export class DeleteFeedPostTimelineFanOutRequest extends Message<DeleteFeedPostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedPostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostTimelineFanOutRequest {
    return new DeleteFeedPostTimelineFanOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostTimelineFanOutRequest {
    return new DeleteFeedPostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostTimelineFanOutRequest {
    return new DeleteFeedPostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostTimelineFanOutRequest
      | PlainMessage<DeleteFeedPostTimelineFanOutRequest>
      | undefined,
    b:
      | DeleteFeedPostTimelineFanOutRequest
      | PlainMessage<DeleteFeedPostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostTimelineFanOutResponse
 */
export class DeleteFeedPostTimelineFanOutResponse extends Message<DeleteFeedPostTimelineFanOutResponse> {
  constructor(data?: PartialMessage<DeleteFeedPostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostTimelineFanOutResponse {
    return new DeleteFeedPostTimelineFanOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostTimelineFanOutResponse {
    return new DeleteFeedPostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostTimelineFanOutResponse {
    return new DeleteFeedPostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostTimelineFanOutResponse
      | PlainMessage<DeleteFeedPostTimelineFanOutResponse>
      | undefined,
    b:
      | DeleteFeedPostTimelineFanOutResponse
      | PlainMessage<DeleteFeedPostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostTimelineFanOutRequest
 */
export class UpdateFeedPostTimelineFanOutRequest extends Message<UpdateFeedPostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedPostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostTimelineFanOutRequest {
    return new UpdateFeedPostTimelineFanOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostTimelineFanOutRequest {
    return new UpdateFeedPostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostTimelineFanOutRequest {
    return new UpdateFeedPostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedPostTimelineFanOutRequest
      | PlainMessage<UpdateFeedPostTimelineFanOutRequest>
      | undefined,
    b:
      | UpdateFeedPostTimelineFanOutRequest
      | PlainMessage<UpdateFeedPostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedPostTimelineFanOutResponse
 */
export class UpdateFeedPostTimelineFanOutResponse extends Message<UpdateFeedPostTimelineFanOutResponse> {
  constructor(data?: PartialMessage<UpdateFeedPostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedPostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedPostTimelineFanOutResponse {
    return new UpdateFeedPostTimelineFanOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostTimelineFanOutResponse {
    return new UpdateFeedPostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedPostTimelineFanOutResponse {
    return new UpdateFeedPostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedPostTimelineFanOutResponse
      | PlainMessage<UpdateFeedPostTimelineFanOutResponse>
      | undefined,
    b:
      | UpdateFeedPostTimelineFanOutResponse
      | PlainMessage<UpdateFeedPostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedPostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostRequest
 */
export class CreateFeedRepostRequest extends Message<CreateFeedRepostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedRepostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostRequest {
    return new CreateFeedRepostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostRequest {
    return new CreateFeedRepostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostRequest {
    return new CreateFeedRepostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedRepostRequest
      | PlainMessage<CreateFeedRepostRequest>
      | undefined,
    b:
      | CreateFeedRepostRequest
      | PlainMessage<CreateFeedRepostRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostResponse
 */
export class CreateFeedRepostResponse extends Message<CreateFeedRepostResponse> {
  constructor(data?: PartialMessage<CreateFeedRepostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostResponse {
    return new CreateFeedRepostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostResponse {
    return new CreateFeedRepostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostResponse {
    return new CreateFeedRepostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedRepostResponse
      | PlainMessage<CreateFeedRepostResponse>
      | undefined,
    b:
      | CreateFeedRepostResponse
      | PlainMessage<CreateFeedRepostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostRequest
 */
export class DeleteFeedRepostRequest extends Message<DeleteFeedRepostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedRepostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostRequest {
    return new DeleteFeedRepostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostRequest {
    return new DeleteFeedRepostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostRequest {
    return new DeleteFeedRepostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedRepostRequest
      | PlainMessage<DeleteFeedRepostRequest>
      | undefined,
    b:
      | DeleteFeedRepostRequest
      | PlainMessage<DeleteFeedRepostRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostResponse
 */
export class DeleteFeedRepostResponse extends Message<DeleteFeedRepostResponse> {
  constructor(data?: PartialMessage<DeleteFeedRepostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostResponse {
    return new DeleteFeedRepostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostResponse {
    return new DeleteFeedRepostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostResponse {
    return new DeleteFeedRepostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedRepostResponse
      | PlainMessage<DeleteFeedRepostResponse>
      | undefined,
    b:
      | DeleteFeedRepostResponse
      | PlainMessage<DeleteFeedRepostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostRequest
 */
export class UpdateFeedRepostRequest extends Message<UpdateFeedRepostRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedRepostRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostRequest {
    return new UpdateFeedRepostRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostRequest {
    return new UpdateFeedRepostRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostRequest {
    return new UpdateFeedRepostRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedRepostRequest
      | PlainMessage<UpdateFeedRepostRequest>
      | undefined,
    b:
      | UpdateFeedRepostRequest
      | PlainMessage<UpdateFeedRepostRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostResponse
 */
export class UpdateFeedRepostResponse extends Message<UpdateFeedRepostResponse> {
  constructor(data?: PartialMessage<UpdateFeedRepostResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostResponse {
    return new UpdateFeedRepostResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostResponse {
    return new UpdateFeedRepostResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostResponse {
    return new UpdateFeedRepostResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedRepostResponse
      | PlainMessage<UpdateFeedRepostResponse>
      | undefined,
    b:
      | UpdateFeedRepostResponse
      | PlainMessage<UpdateFeedRepostResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostNotificationsRequest
 */
export class CreateFeedRepostNotificationsRequest extends Message<CreateFeedRepostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedRepostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostNotificationsRequest {
    return new CreateFeedRepostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostNotificationsRequest {
    return new CreateFeedRepostNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostNotificationsRequest {
    return new CreateFeedRepostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedRepostNotificationsRequest
      | PlainMessage<CreateFeedRepostNotificationsRequest>
      | undefined,
    b:
      | CreateFeedRepostNotificationsRequest
      | PlainMessage<CreateFeedRepostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostNotificationsResponse
 */
export class CreateFeedRepostNotificationsResponse extends Message<CreateFeedRepostNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = []

  constructor(data?: PartialMessage<CreateFeedRepostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostNotificationsResponse {
    return new CreateFeedRepostNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostNotificationsResponse {
    return new CreateFeedRepostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostNotificationsResponse {
    return new CreateFeedRepostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedRepostNotificationsResponse
      | PlainMessage<CreateFeedRepostNotificationsResponse>
      | undefined,
    b:
      | CreateFeedRepostNotificationsResponse
      | PlainMessage<CreateFeedRepostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostNotificationsRequest
 */
export class DeleteFeedRepostNotificationsRequest extends Message<DeleteFeedRepostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedRepostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostNotificationsRequest {
    return new DeleteFeedRepostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostNotificationsRequest {
    return new DeleteFeedRepostNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostNotificationsRequest {
    return new DeleteFeedRepostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedRepostNotificationsRequest
      | PlainMessage<DeleteFeedRepostNotificationsRequest>
      | undefined,
    b:
      | DeleteFeedRepostNotificationsRequest
      | PlainMessage<DeleteFeedRepostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostNotificationsResponse
 */
export class DeleteFeedRepostNotificationsResponse extends Message<DeleteFeedRepostNotificationsResponse> {
  constructor(data?: PartialMessage<DeleteFeedRepostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostNotificationsResponse {
    return new DeleteFeedRepostNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostNotificationsResponse {
    return new DeleteFeedRepostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostNotificationsResponse {
    return new DeleteFeedRepostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedRepostNotificationsResponse
      | PlainMessage<DeleteFeedRepostNotificationsResponse>
      | undefined,
    b:
      | DeleteFeedRepostNotificationsResponse
      | PlainMessage<DeleteFeedRepostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostNotificationsRequest
 */
export class UpdateFeedRepostNotificationsRequest extends Message<UpdateFeedRepostNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedRepostNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostNotificationsRequest {
    return new UpdateFeedRepostNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostNotificationsRequest {
    return new UpdateFeedRepostNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostNotificationsRequest {
    return new UpdateFeedRepostNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedRepostNotificationsRequest
      | PlainMessage<UpdateFeedRepostNotificationsRequest>
      | undefined,
    b:
      | UpdateFeedRepostNotificationsRequest
      | PlainMessage<UpdateFeedRepostNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostNotificationsResponse
 */
export class UpdateFeedRepostNotificationsResponse extends Message<UpdateFeedRepostNotificationsResponse> {
  constructor(data?: PartialMessage<UpdateFeedRepostNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostNotificationsResponse {
    return new UpdateFeedRepostNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostNotificationsResponse {
    return new UpdateFeedRepostNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostNotificationsResponse {
    return new UpdateFeedRepostNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedRepostNotificationsResponse
      | PlainMessage<UpdateFeedRepostNotificationsResponse>
      | undefined,
    b:
      | UpdateFeedRepostNotificationsResponse
      | PlainMessage<UpdateFeedRepostNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostTimelineFanOutRequest
 */
export class CreateFeedRepostTimelineFanOutRequest extends Message<CreateFeedRepostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: string subject_uri = 6;
   */
  subjectUri = ''

  /**
   * @generated from field: string subject_cid = 7;
   */
  subjectCid = ''

  /**
   * @generated from field: int32 limit = 8;
   */
  limit = 0

  /**
   * @generated from field: string cursor = 9;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedRepostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 6,
      name: 'subject_uri',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 7,
      name: 'subject_cid',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 8, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostTimelineFanOutRequest {
    return new CreateFeedRepostTimelineFanOutRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostTimelineFanOutRequest {
    return new CreateFeedRepostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostTimelineFanOutRequest {
    return new CreateFeedRepostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedRepostTimelineFanOutRequest
      | PlainMessage<CreateFeedRepostTimelineFanOutRequest>
      | undefined,
    b:
      | CreateFeedRepostTimelineFanOutRequest
      | PlainMessage<CreateFeedRepostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedRepostTimelineFanOutResponse
 */
export class CreateFeedRepostTimelineFanOutResponse extends Message<CreateFeedRepostTimelineFanOutResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  constructor(data?: PartialMessage<CreateFeedRepostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedRepostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedRepostTimelineFanOutResponse {
    return new CreateFeedRepostTimelineFanOutResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostTimelineFanOutResponse {
    return new CreateFeedRepostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedRepostTimelineFanOutResponse {
    return new CreateFeedRepostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedRepostTimelineFanOutResponse
      | PlainMessage<CreateFeedRepostTimelineFanOutResponse>
      | undefined,
    b:
      | CreateFeedRepostTimelineFanOutResponse
      | PlainMessage<CreateFeedRepostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedRepostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostTimelineFanOutRequest
 */
export class DeleteFeedRepostTimelineFanOutRequest extends Message<DeleteFeedRepostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedRepostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostTimelineFanOutRequest {
    return new DeleteFeedRepostTimelineFanOutRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostTimelineFanOutRequest {
    return new DeleteFeedRepostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostTimelineFanOutRequest {
    return new DeleteFeedRepostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedRepostTimelineFanOutRequest
      | PlainMessage<DeleteFeedRepostTimelineFanOutRequest>
      | undefined,
    b:
      | DeleteFeedRepostTimelineFanOutRequest
      | PlainMessage<DeleteFeedRepostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedRepostTimelineFanOutResponse
 */
export class DeleteFeedRepostTimelineFanOutResponse extends Message<DeleteFeedRepostTimelineFanOutResponse> {
  constructor(data?: PartialMessage<DeleteFeedRepostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedRepostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedRepostTimelineFanOutResponse {
    return new DeleteFeedRepostTimelineFanOutResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostTimelineFanOutResponse {
    return new DeleteFeedRepostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedRepostTimelineFanOutResponse {
    return new DeleteFeedRepostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedRepostTimelineFanOutResponse
      | PlainMessage<DeleteFeedRepostTimelineFanOutResponse>
      | undefined,
    b:
      | DeleteFeedRepostTimelineFanOutResponse
      | PlainMessage<DeleteFeedRepostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedRepostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostTimelineFanOutRequest
 */
export class UpdateFeedRepostTimelineFanOutRequest extends Message<UpdateFeedRepostTimelineFanOutRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedRepostTimelineFanOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostTimelineFanOutRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostTimelineFanOutRequest {
    return new UpdateFeedRepostTimelineFanOutRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostTimelineFanOutRequest {
    return new UpdateFeedRepostTimelineFanOutRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostTimelineFanOutRequest {
    return new UpdateFeedRepostTimelineFanOutRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedRepostTimelineFanOutRequest
      | PlainMessage<UpdateFeedRepostTimelineFanOutRequest>
      | undefined,
    b:
      | UpdateFeedRepostTimelineFanOutRequest
      | PlainMessage<UpdateFeedRepostTimelineFanOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostTimelineFanOutRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedRepostTimelineFanOutResponse
 */
export class UpdateFeedRepostTimelineFanOutResponse extends Message<UpdateFeedRepostTimelineFanOutResponse> {
  constructor(data?: PartialMessage<UpdateFeedRepostTimelineFanOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedRepostTimelineFanOutResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedRepostTimelineFanOutResponse {
    return new UpdateFeedRepostTimelineFanOutResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostTimelineFanOutResponse {
    return new UpdateFeedRepostTimelineFanOutResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedRepostTimelineFanOutResponse {
    return new UpdateFeedRepostTimelineFanOutResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedRepostTimelineFanOutResponse
      | PlainMessage<UpdateFeedRepostTimelineFanOutResponse>
      | undefined,
    b:
      | UpdateFeedRepostTimelineFanOutResponse
      | PlainMessage<UpdateFeedRepostTimelineFanOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedRepostTimelineFanOutResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeRequest
 */
export class CreateFeedLikeRequest extends Message<CreateFeedLikeRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedLikeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeRequest {
    return new CreateFeedLikeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeRequest {
    return new CreateFeedLikeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeRequest {
    return new CreateFeedLikeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateFeedLikeRequest | PlainMessage<CreateFeedLikeRequest> | undefined,
    b: CreateFeedLikeRequest | PlainMessage<CreateFeedLikeRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeResponse
 */
export class CreateFeedLikeResponse extends Message<CreateFeedLikeResponse> {
  constructor(data?: PartialMessage<CreateFeedLikeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeResponse {
    return new CreateFeedLikeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeResponse {
    return new CreateFeedLikeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeResponse {
    return new CreateFeedLikeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedLikeResponse
      | PlainMessage<CreateFeedLikeResponse>
      | undefined,
    b:
      | CreateFeedLikeResponse
      | PlainMessage<CreateFeedLikeResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeResponse, a, b)
  }
}

/**
 * @generated from message bsky.BatchLike
 */
export class BatchLike extends Message<BatchLike> {
  /**
   * @generated from field: string rkey = 1;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 3;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 4;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<BatchLike>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.BatchLike'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
    { no: 3, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): BatchLike {
    return new BatchLike().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): BatchLike {
    return new BatchLike().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): BatchLike {
    return new BatchLike().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchLike | PlainMessage<BatchLike> | undefined,
    b: BatchLike | PlainMessage<BatchLike> | undefined,
  ): boolean {
    return proto3.util.equals(BatchLike, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeBatchRequest
 */
export class CreateFeedLikeBatchRequest extends Message<CreateFeedLikeBatchRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: repeated bsky.BatchLike likes = 2;
   */
  likes: BatchLike[] = []

  constructor(data?: PartialMessage<CreateFeedLikeBatchRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeBatchRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'likes', kind: 'message', T: BatchLike, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeBatchRequest {
    return new CreateFeedLikeBatchRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeBatchRequest {
    return new CreateFeedLikeBatchRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeBatchRequest {
    return new CreateFeedLikeBatchRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedLikeBatchRequest
      | PlainMessage<CreateFeedLikeBatchRequest>
      | undefined,
    b:
      | CreateFeedLikeBatchRequest
      | PlainMessage<CreateFeedLikeBatchRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeBatchRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeBatchResponse
 */
export class CreateFeedLikeBatchResponse extends Message<CreateFeedLikeBatchResponse> {
  constructor(data?: PartialMessage<CreateFeedLikeBatchResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeBatchResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeBatchResponse {
    return new CreateFeedLikeBatchResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeBatchResponse {
    return new CreateFeedLikeBatchResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeBatchResponse {
    return new CreateFeedLikeBatchResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedLikeBatchResponse
      | PlainMessage<CreateFeedLikeBatchResponse>
      | undefined,
    b:
      | CreateFeedLikeBatchResponse
      | PlainMessage<CreateFeedLikeBatchResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeBatchResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedLikeRequest
 */
export class DeleteFeedLikeRequest extends Message<DeleteFeedLikeRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedLikeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedLikeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedLikeRequest {
    return new DeleteFeedLikeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeRequest {
    return new DeleteFeedLikeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeRequest {
    return new DeleteFeedLikeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteFeedLikeRequest | PlainMessage<DeleteFeedLikeRequest> | undefined,
    b: DeleteFeedLikeRequest | PlainMessage<DeleteFeedLikeRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedLikeRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedLikeResponse
 */
export class DeleteFeedLikeResponse extends Message<DeleteFeedLikeResponse> {
  constructor(data?: PartialMessage<DeleteFeedLikeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedLikeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedLikeResponse {
    return new DeleteFeedLikeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeResponse {
    return new DeleteFeedLikeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeResponse {
    return new DeleteFeedLikeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedLikeResponse
      | PlainMessage<DeleteFeedLikeResponse>
      | undefined,
    b:
      | DeleteFeedLikeResponse
      | PlainMessage<DeleteFeedLikeResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedLikeResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedLikeRequest
 */
export class UpdateFeedLikeRequest extends Message<UpdateFeedLikeRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedLikeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedLikeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedLikeRequest {
    return new UpdateFeedLikeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeRequest {
    return new UpdateFeedLikeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeRequest {
    return new UpdateFeedLikeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateFeedLikeRequest | PlainMessage<UpdateFeedLikeRequest> | undefined,
    b: UpdateFeedLikeRequest | PlainMessage<UpdateFeedLikeRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedLikeRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedLikeResponse
 */
export class UpdateFeedLikeResponse extends Message<UpdateFeedLikeResponse> {
  constructor(data?: PartialMessage<UpdateFeedLikeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedLikeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedLikeResponse {
    return new UpdateFeedLikeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeResponse {
    return new UpdateFeedLikeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeResponse {
    return new UpdateFeedLikeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedLikeResponse
      | PlainMessage<UpdateFeedLikeResponse>
      | undefined,
    b:
      | UpdateFeedLikeResponse
      | PlainMessage<UpdateFeedLikeResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedLikeResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeNotificationsRequest
 */
export class CreateFeedLikeNotificationsRequest extends Message<CreateFeedLikeNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedLikeNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeNotificationsRequest {
    return new CreateFeedLikeNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeNotificationsRequest {
    return new CreateFeedLikeNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeNotificationsRequest {
    return new CreateFeedLikeNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedLikeNotificationsRequest
      | PlainMessage<CreateFeedLikeNotificationsRequest>
      | undefined,
    b:
      | CreateFeedLikeNotificationsRequest
      | PlainMessage<CreateFeedLikeNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedLikeNotificationsResponse
 */
export class CreateFeedLikeNotificationsResponse extends Message<CreateFeedLikeNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = []

  constructor(data?: PartialMessage<CreateFeedLikeNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedLikeNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedLikeNotificationsResponse {
    return new CreateFeedLikeNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeNotificationsResponse {
    return new CreateFeedLikeNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedLikeNotificationsResponse {
    return new CreateFeedLikeNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedLikeNotificationsResponse
      | PlainMessage<CreateFeedLikeNotificationsResponse>
      | undefined,
    b:
      | CreateFeedLikeNotificationsResponse
      | PlainMessage<CreateFeedLikeNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedLikeNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedLikeNotificationsRequest
 */
export class DeleteFeedLikeNotificationsRequest extends Message<DeleteFeedLikeNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedLikeNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedLikeNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedLikeNotificationsRequest {
    return new DeleteFeedLikeNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeNotificationsRequest {
    return new DeleteFeedLikeNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeNotificationsRequest {
    return new DeleteFeedLikeNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedLikeNotificationsRequest
      | PlainMessage<DeleteFeedLikeNotificationsRequest>
      | undefined,
    b:
      | DeleteFeedLikeNotificationsRequest
      | PlainMessage<DeleteFeedLikeNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedLikeNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedLikeNotificationsResponse
 */
export class DeleteFeedLikeNotificationsResponse extends Message<DeleteFeedLikeNotificationsResponse> {
  constructor(data?: PartialMessage<DeleteFeedLikeNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedLikeNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedLikeNotificationsResponse {
    return new DeleteFeedLikeNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeNotificationsResponse {
    return new DeleteFeedLikeNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedLikeNotificationsResponse {
    return new DeleteFeedLikeNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedLikeNotificationsResponse
      | PlainMessage<DeleteFeedLikeNotificationsResponse>
      | undefined,
    b:
      | DeleteFeedLikeNotificationsResponse
      | PlainMessage<DeleteFeedLikeNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedLikeNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedLikeNotificationsRequest
 */
export class UpdateFeedLikeNotificationsRequest extends Message<UpdateFeedLikeNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedLikeNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedLikeNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedLikeNotificationsRequest {
    return new UpdateFeedLikeNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeNotificationsRequest {
    return new UpdateFeedLikeNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeNotificationsRequest {
    return new UpdateFeedLikeNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedLikeNotificationsRequest
      | PlainMessage<UpdateFeedLikeNotificationsRequest>
      | undefined,
    b:
      | UpdateFeedLikeNotificationsRequest
      | PlainMessage<UpdateFeedLikeNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedLikeNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedLikeNotificationsResponse
 */
export class UpdateFeedLikeNotificationsResponse extends Message<UpdateFeedLikeNotificationsResponse> {
  constructor(data?: PartialMessage<UpdateFeedLikeNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedLikeNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedLikeNotificationsResponse {
    return new UpdateFeedLikeNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeNotificationsResponse {
    return new UpdateFeedLikeNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedLikeNotificationsResponse {
    return new UpdateFeedLikeNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedLikeNotificationsResponse
      | PlainMessage<UpdateFeedLikeNotificationsResponse>
      | undefined,
    b:
      | UpdateFeedLikeNotificationsResponse
      | PlainMessage<UpdateFeedLikeNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedLikeNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowRequest
 */
export class CreateGraphFollowRequest extends Message<CreateGraphFollowRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphFollowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowRequest {
    return new CreateGraphFollowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowRequest {
    return new CreateGraphFollowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowRequest {
    return new CreateGraphFollowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphFollowRequest
      | PlainMessage<CreateGraphFollowRequest>
      | undefined,
    b:
      | CreateGraphFollowRequest
      | PlainMessage<CreateGraphFollowRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowResponse
 */
export class CreateGraphFollowResponse extends Message<CreateGraphFollowResponse> {
  constructor(data?: PartialMessage<CreateGraphFollowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowResponse {
    return new CreateGraphFollowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowResponse {
    return new CreateGraphFollowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowResponse {
    return new CreateGraphFollowResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphFollowResponse
      | PlainMessage<CreateGraphFollowResponse>
      | undefined,
    b:
      | CreateGraphFollowResponse
      | PlainMessage<CreateGraphFollowResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowRequest
 */
export class DeleteGraphFollowRequest extends Message<DeleteGraphFollowRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphFollowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowRequest {
    return new DeleteGraphFollowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowRequest {
    return new DeleteGraphFollowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowRequest {
    return new DeleteGraphFollowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphFollowRequest
      | PlainMessage<DeleteGraphFollowRequest>
      | undefined,
    b:
      | DeleteGraphFollowRequest
      | PlainMessage<DeleteGraphFollowRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowResponse
 */
export class DeleteGraphFollowResponse extends Message<DeleteGraphFollowResponse> {
  constructor(data?: PartialMessage<DeleteGraphFollowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowResponse {
    return new DeleteGraphFollowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowResponse {
    return new DeleteGraphFollowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowResponse {
    return new DeleteGraphFollowResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphFollowResponse
      | PlainMessage<DeleteGraphFollowResponse>
      | undefined,
    b:
      | DeleteGraphFollowResponse
      | PlainMessage<DeleteGraphFollowResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowRequest
 */
export class UpdateGraphFollowRequest extends Message<UpdateGraphFollowRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphFollowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowRequest {
    return new UpdateGraphFollowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowRequest {
    return new UpdateGraphFollowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowRequest {
    return new UpdateGraphFollowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphFollowRequest
      | PlainMessage<UpdateGraphFollowRequest>
      | undefined,
    b:
      | UpdateGraphFollowRequest
      | PlainMessage<UpdateGraphFollowRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowResponse
 */
export class UpdateGraphFollowResponse extends Message<UpdateGraphFollowResponse> {
  constructor(data?: PartialMessage<UpdateGraphFollowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowResponse {
    return new UpdateGraphFollowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowResponse {
    return new UpdateGraphFollowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowResponse {
    return new UpdateGraphFollowResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphFollowResponse
      | PlainMessage<UpdateGraphFollowResponse>
      | undefined,
    b:
      | UpdateGraphFollowResponse
      | PlainMessage<UpdateGraphFollowResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowNotificationsRequest
 */
export class CreateGraphFollowNotificationsRequest extends Message<CreateGraphFollowNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphFollowNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowNotificationsRequest {
    return new CreateGraphFollowNotificationsRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowNotificationsRequest {
    return new CreateGraphFollowNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowNotificationsRequest {
    return new CreateGraphFollowNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphFollowNotificationsRequest
      | PlainMessage<CreateGraphFollowNotificationsRequest>
      | undefined,
    b:
      | CreateGraphFollowNotificationsRequest
      | PlainMessage<CreateGraphFollowNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowNotificationsResponse
 */
export class CreateGraphFollowNotificationsResponse extends Message<CreateGraphFollowNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = []

  constructor(data?: PartialMessage<CreateGraphFollowNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowNotificationsResponse {
    return new CreateGraphFollowNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowNotificationsResponse {
    return new CreateGraphFollowNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowNotificationsResponse {
    return new CreateGraphFollowNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphFollowNotificationsResponse
      | PlainMessage<CreateGraphFollowNotificationsResponse>
      | undefined,
    b:
      | CreateGraphFollowNotificationsResponse
      | PlainMessage<CreateGraphFollowNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowNotificationsRequest
 */
export class DeleteGraphFollowNotificationsRequest extends Message<DeleteGraphFollowNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphFollowNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowNotificationsRequest {
    return new DeleteGraphFollowNotificationsRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowNotificationsRequest {
    return new DeleteGraphFollowNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowNotificationsRequest {
    return new DeleteGraphFollowNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphFollowNotificationsRequest
      | PlainMessage<DeleteGraphFollowNotificationsRequest>
      | undefined,
    b:
      | DeleteGraphFollowNotificationsRequest
      | PlainMessage<DeleteGraphFollowNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowNotificationsResponse
 */
export class DeleteGraphFollowNotificationsResponse extends Message<DeleteGraphFollowNotificationsResponse> {
  constructor(data?: PartialMessage<DeleteGraphFollowNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowNotificationsResponse {
    return new DeleteGraphFollowNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowNotificationsResponse {
    return new DeleteGraphFollowNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowNotificationsResponse {
    return new DeleteGraphFollowNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphFollowNotificationsResponse
      | PlainMessage<DeleteGraphFollowNotificationsResponse>
      | undefined,
    b:
      | DeleteGraphFollowNotificationsResponse
      | PlainMessage<DeleteGraphFollowNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowNotificationsRequest
 */
export class UpdateGraphFollowNotificationsRequest extends Message<UpdateGraphFollowNotificationsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphFollowNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowNotificationsRequest {
    return new UpdateGraphFollowNotificationsRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowNotificationsRequest {
    return new UpdateGraphFollowNotificationsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowNotificationsRequest {
    return new UpdateGraphFollowNotificationsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateGraphFollowNotificationsRequest
      | PlainMessage<UpdateGraphFollowNotificationsRequest>
      | undefined,
    b:
      | UpdateGraphFollowNotificationsRequest
      | PlainMessage<UpdateGraphFollowNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowNotificationsRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowNotificationsResponse
 */
export class UpdateGraphFollowNotificationsResponse extends Message<UpdateGraphFollowNotificationsResponse> {
  constructor(data?: PartialMessage<UpdateGraphFollowNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowNotificationsResponse {
    return new UpdateGraphFollowNotificationsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowNotificationsResponse {
    return new UpdateGraphFollowNotificationsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowNotificationsResponse {
    return new UpdateGraphFollowNotificationsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateGraphFollowNotificationsResponse
      | PlainMessage<UpdateGraphFollowNotificationsResponse>
      | undefined,
    b:
      | UpdateGraphFollowNotificationsResponse
      | PlainMessage<UpdateGraphFollowNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowNotificationsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowUpdateTimelineRequest
 */
export class CreateGraphFollowUpdateTimelineRequest extends Message<CreateGraphFollowUpdateTimelineRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: int32 lookback_seconds = 6;
   */
  lookbackSeconds = 0

  constructor(data?: PartialMessage<CreateGraphFollowUpdateTimelineRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowUpdateTimelineRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 6,
      name: 'lookback_seconds',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowUpdateTimelineRequest {
    return new CreateGraphFollowUpdateTimelineRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowUpdateTimelineRequest {
    return new CreateGraphFollowUpdateTimelineRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowUpdateTimelineRequest {
    return new CreateGraphFollowUpdateTimelineRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphFollowUpdateTimelineRequest
      | PlainMessage<CreateGraphFollowUpdateTimelineRequest>
      | undefined,
    b:
      | CreateGraphFollowUpdateTimelineRequest
      | PlainMessage<CreateGraphFollowUpdateTimelineRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowUpdateTimelineRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphFollowUpdateTimelineResponse
 */
export class CreateGraphFollowUpdateTimelineResponse extends Message<CreateGraphFollowUpdateTimelineResponse> {
  constructor(data?: PartialMessage<CreateGraphFollowUpdateTimelineResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphFollowUpdateTimelineResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphFollowUpdateTimelineResponse {
    return new CreateGraphFollowUpdateTimelineResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowUpdateTimelineResponse {
    return new CreateGraphFollowUpdateTimelineResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphFollowUpdateTimelineResponse {
    return new CreateGraphFollowUpdateTimelineResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphFollowUpdateTimelineResponse
      | PlainMessage<CreateGraphFollowUpdateTimelineResponse>
      | undefined,
    b:
      | CreateGraphFollowUpdateTimelineResponse
      | PlainMessage<CreateGraphFollowUpdateTimelineResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphFollowUpdateTimelineResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowUpdateTimelineRequest
 */
export class DeleteGraphFollowUpdateTimelineRequest extends Message<DeleteGraphFollowUpdateTimelineRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphFollowUpdateTimelineRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowUpdateTimelineRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowUpdateTimelineRequest {
    return new DeleteGraphFollowUpdateTimelineRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowUpdateTimelineRequest {
    return new DeleteGraphFollowUpdateTimelineRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowUpdateTimelineRequest {
    return new DeleteGraphFollowUpdateTimelineRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphFollowUpdateTimelineRequest
      | PlainMessage<DeleteGraphFollowUpdateTimelineRequest>
      | undefined,
    b:
      | DeleteGraphFollowUpdateTimelineRequest
      | PlainMessage<DeleteGraphFollowUpdateTimelineRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowUpdateTimelineRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphFollowUpdateTimelineResponse
 */
export class DeleteGraphFollowUpdateTimelineResponse extends Message<DeleteGraphFollowUpdateTimelineResponse> {
  constructor(data?: PartialMessage<DeleteGraphFollowUpdateTimelineResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphFollowUpdateTimelineResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphFollowUpdateTimelineResponse {
    return new DeleteGraphFollowUpdateTimelineResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowUpdateTimelineResponse {
    return new DeleteGraphFollowUpdateTimelineResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphFollowUpdateTimelineResponse {
    return new DeleteGraphFollowUpdateTimelineResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphFollowUpdateTimelineResponse
      | PlainMessage<DeleteGraphFollowUpdateTimelineResponse>
      | undefined,
    b:
      | DeleteGraphFollowUpdateTimelineResponse
      | PlainMessage<DeleteGraphFollowUpdateTimelineResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphFollowUpdateTimelineResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowUpdateTimelineRequest
 */
export class UpdateGraphFollowUpdateTimelineRequest extends Message<UpdateGraphFollowUpdateTimelineRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphFollowUpdateTimelineRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowUpdateTimelineRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowUpdateTimelineRequest {
    return new UpdateGraphFollowUpdateTimelineRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowUpdateTimelineRequest {
    return new UpdateGraphFollowUpdateTimelineRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowUpdateTimelineRequest {
    return new UpdateGraphFollowUpdateTimelineRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateGraphFollowUpdateTimelineRequest
      | PlainMessage<UpdateGraphFollowUpdateTimelineRequest>
      | undefined,
    b:
      | UpdateGraphFollowUpdateTimelineRequest
      | PlainMessage<UpdateGraphFollowUpdateTimelineRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowUpdateTimelineRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphFollowUpdateTimelineResponse
 */
export class UpdateGraphFollowUpdateTimelineResponse extends Message<UpdateGraphFollowUpdateTimelineResponse> {
  constructor(data?: PartialMessage<UpdateGraphFollowUpdateTimelineResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphFollowUpdateTimelineResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphFollowUpdateTimelineResponse {
    return new UpdateGraphFollowUpdateTimelineResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowUpdateTimelineResponse {
    return new UpdateGraphFollowUpdateTimelineResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphFollowUpdateTimelineResponse {
    return new UpdateGraphFollowUpdateTimelineResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateGraphFollowUpdateTimelineResponse
      | PlainMessage<UpdateGraphFollowUpdateTimelineResponse>
      | undefined,
    b:
      | UpdateGraphFollowUpdateTimelineResponse
      | PlainMessage<UpdateGraphFollowUpdateTimelineResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphFollowUpdateTimelineResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListItemUpdateListFeedRequest
 */
export class CreateGraphListItemUpdateListFeedRequest extends Message<CreateGraphListItemUpdateListFeedRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  /**
   * @generated from field: int32 lookback_seconds = 6;
   */
  lookbackSeconds = 0

  /**
   * @generated from field: bool include_reposts = 7;
   */
  includeReposts = false

  constructor(data?: PartialMessage<CreateGraphListItemUpdateListFeedRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListItemUpdateListFeedRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 6,
      name: 'lookback_seconds',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
    {
      no: 7,
      name: 'include_reposts',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListItemUpdateListFeedRequest {
    return new CreateGraphListItemUpdateListFeedRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListItemUpdateListFeedRequest {
    return new CreateGraphListItemUpdateListFeedRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListItemUpdateListFeedRequest {
    return new CreateGraphListItemUpdateListFeedRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphListItemUpdateListFeedRequest
      | PlainMessage<CreateGraphListItemUpdateListFeedRequest>
      | undefined,
    b:
      | CreateGraphListItemUpdateListFeedRequest
      | PlainMessage<CreateGraphListItemUpdateListFeedRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListItemUpdateListFeedRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListItemUpdateListFeedResponse
 */
export class CreateGraphListItemUpdateListFeedResponse extends Message<CreateGraphListItemUpdateListFeedResponse> {
  constructor(
    data?: PartialMessage<CreateGraphListItemUpdateListFeedResponse>,
  ) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListItemUpdateListFeedResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListItemUpdateListFeedResponse {
    return new CreateGraphListItemUpdateListFeedResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListItemUpdateListFeedResponse {
    return new CreateGraphListItemUpdateListFeedResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListItemUpdateListFeedResponse {
    return new CreateGraphListItemUpdateListFeedResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphListItemUpdateListFeedResponse
      | PlainMessage<CreateGraphListItemUpdateListFeedResponse>
      | undefined,
    b:
      | CreateGraphListItemUpdateListFeedResponse
      | PlainMessage<CreateGraphListItemUpdateListFeedResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListItemUpdateListFeedResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListItemUpdateListFeedRequest
 */
export class DeleteGraphListItemUpdateListFeedRequest extends Message<DeleteGraphListItemUpdateListFeedRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphListItemUpdateListFeedRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListItemUpdateListFeedRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListItemUpdateListFeedRequest {
    return new DeleteGraphListItemUpdateListFeedRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListItemUpdateListFeedRequest {
    return new DeleteGraphListItemUpdateListFeedRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListItemUpdateListFeedRequest {
    return new DeleteGraphListItemUpdateListFeedRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphListItemUpdateListFeedRequest
      | PlainMessage<DeleteGraphListItemUpdateListFeedRequest>
      | undefined,
    b:
      | DeleteGraphListItemUpdateListFeedRequest
      | PlainMessage<DeleteGraphListItemUpdateListFeedRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListItemUpdateListFeedRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListItemUpdateListFeedResponse
 */
export class DeleteGraphListItemUpdateListFeedResponse extends Message<DeleteGraphListItemUpdateListFeedResponse> {
  constructor(
    data?: PartialMessage<DeleteGraphListItemUpdateListFeedResponse>,
  ) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListItemUpdateListFeedResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListItemUpdateListFeedResponse {
    return new DeleteGraphListItemUpdateListFeedResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListItemUpdateListFeedResponse {
    return new DeleteGraphListItemUpdateListFeedResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListItemUpdateListFeedResponse {
    return new DeleteGraphListItemUpdateListFeedResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphListItemUpdateListFeedResponse
      | PlainMessage<DeleteGraphListItemUpdateListFeedResponse>
      | undefined,
    b:
      | DeleteGraphListItemUpdateListFeedResponse
      | PlainMessage<DeleteGraphListItemUpdateListFeedResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListItemUpdateListFeedResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphBlockRequest
 */
export class CreateGraphBlockRequest extends Message<CreateGraphBlockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphBlockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphBlockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphBlockRequest {
    return new CreateGraphBlockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockRequest {
    return new CreateGraphBlockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockRequest {
    return new CreateGraphBlockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphBlockRequest
      | PlainMessage<CreateGraphBlockRequest>
      | undefined,
    b:
      | CreateGraphBlockRequest
      | PlainMessage<CreateGraphBlockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphBlockRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphBlockResponse
 */
export class CreateGraphBlockResponse extends Message<CreateGraphBlockResponse> {
  constructor(data?: PartialMessage<CreateGraphBlockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphBlockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphBlockResponse {
    return new CreateGraphBlockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockResponse {
    return new CreateGraphBlockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockResponse {
    return new CreateGraphBlockResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphBlockResponse
      | PlainMessage<CreateGraphBlockResponse>
      | undefined,
    b:
      | CreateGraphBlockResponse
      | PlainMessage<CreateGraphBlockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphBlockResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphBlockFilterUpdateRequest
 */
export class CreateGraphBlockFilterUpdateRequest extends Message<CreateGraphBlockFilterUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphBlockFilterUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphBlockFilterUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphBlockFilterUpdateRequest {
    return new CreateGraphBlockFilterUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockFilterUpdateRequest {
    return new CreateGraphBlockFilterUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockFilterUpdateRequest {
    return new CreateGraphBlockFilterUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphBlockFilterUpdateRequest
      | PlainMessage<CreateGraphBlockFilterUpdateRequest>
      | undefined,
    b:
      | CreateGraphBlockFilterUpdateRequest
      | PlainMessage<CreateGraphBlockFilterUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphBlockFilterUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphBlockFilterUpdateResponse
 */
export class CreateGraphBlockFilterUpdateResponse extends Message<CreateGraphBlockFilterUpdateResponse> {
  constructor(data?: PartialMessage<CreateGraphBlockFilterUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphBlockFilterUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphBlockFilterUpdateResponse {
    return new CreateGraphBlockFilterUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockFilterUpdateResponse {
    return new CreateGraphBlockFilterUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphBlockFilterUpdateResponse {
    return new CreateGraphBlockFilterUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphBlockFilterUpdateResponse
      | PlainMessage<CreateGraphBlockFilterUpdateResponse>
      | undefined,
    b:
      | CreateGraphBlockFilterUpdateResponse
      | PlainMessage<CreateGraphBlockFilterUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphBlockFilterUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMuteFilterUpdateRequest
 */
export class CreateActorMuteFilterUpdateRequest extends Message<CreateActorMuteFilterUpdateRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_did = 2;
   */
  subjectDid = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<CreateActorMuteFilterUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMuteFilterUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'subject_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMuteFilterUpdateRequest {
    return new CreateActorMuteFilterUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteFilterUpdateRequest {
    return new CreateActorMuteFilterUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteFilterUpdateRequest {
    return new CreateActorMuteFilterUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorMuteFilterUpdateRequest
      | PlainMessage<CreateActorMuteFilterUpdateRequest>
      | undefined,
    b:
      | CreateActorMuteFilterUpdateRequest
      | PlainMessage<CreateActorMuteFilterUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMuteFilterUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMuteFilterUpdateResponse
 */
export class CreateActorMuteFilterUpdateResponse extends Message<CreateActorMuteFilterUpdateResponse> {
  constructor(data?: PartialMessage<CreateActorMuteFilterUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMuteFilterUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMuteFilterUpdateResponse {
    return new CreateActorMuteFilterUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteFilterUpdateResponse {
    return new CreateActorMuteFilterUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteFilterUpdateResponse {
    return new CreateActorMuteFilterUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorMuteFilterUpdateResponse
      | PlainMessage<CreateActorMuteFilterUpdateResponse>
      | undefined,
    b:
      | CreateActorMuteFilterUpdateResponse
      | PlainMessage<CreateActorMuteFilterUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMuteFilterUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateListmuteCacheUpdateRequest
 */
export class CreateListmuteCacheUpdateRequest extends Message<CreateListmuteCacheUpdateRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<CreateListmuteCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateListmuteCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateListmuteCacheUpdateRequest {
    return new CreateListmuteCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateListmuteCacheUpdateRequest {
    return new CreateListmuteCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateListmuteCacheUpdateRequest {
    return new CreateListmuteCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateListmuteCacheUpdateRequest
      | PlainMessage<CreateListmuteCacheUpdateRequest>
      | undefined,
    b:
      | CreateListmuteCacheUpdateRequest
      | PlainMessage<CreateListmuteCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateListmuteCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateListmuteCacheUpdateResponse
 */
export class CreateListmuteCacheUpdateResponse extends Message<CreateListmuteCacheUpdateResponse> {
  constructor(data?: PartialMessage<CreateListmuteCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateListmuteCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateListmuteCacheUpdateResponse {
    return new CreateListmuteCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateListmuteCacheUpdateResponse {
    return new CreateListmuteCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateListmuteCacheUpdateResponse {
    return new CreateListmuteCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateListmuteCacheUpdateResponse
      | PlainMessage<CreateListmuteCacheUpdateResponse>
      | undefined,
    b:
      | CreateListmuteCacheUpdateResponse
      | PlainMessage<CreateListmuteCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateListmuteCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteListmuteCacheUpdateRequest
 */
export class DeleteListmuteCacheUpdateRequest extends Message<DeleteListmuteCacheUpdateRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<DeleteListmuteCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteListmuteCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'list_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteListmuteCacheUpdateRequest {
    return new DeleteListmuteCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteListmuteCacheUpdateRequest {
    return new DeleteListmuteCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteListmuteCacheUpdateRequest {
    return new DeleteListmuteCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteListmuteCacheUpdateRequest
      | PlainMessage<DeleteListmuteCacheUpdateRequest>
      | undefined,
    b:
      | DeleteListmuteCacheUpdateRequest
      | PlainMessage<DeleteListmuteCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteListmuteCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteListmuteCacheUpdateResponse
 */
export class DeleteListmuteCacheUpdateResponse extends Message<DeleteListmuteCacheUpdateResponse> {
  constructor(data?: PartialMessage<DeleteListmuteCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteListmuteCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteListmuteCacheUpdateResponse {
    return new DeleteListmuteCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteListmuteCacheUpdateResponse {
    return new DeleteListmuteCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteListmuteCacheUpdateResponse {
    return new DeleteListmuteCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteListmuteCacheUpdateResponse
      | PlainMessage<DeleteListmuteCacheUpdateResponse>
      | undefined,
    b:
      | DeleteListmuteCacheUpdateResponse
      | PlainMessage<DeleteListmuteCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteListmuteCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.ClearListmutesCacheUpdateRequest
 */
export class ClearListmutesCacheUpdateRequest extends Message<ClearListmutesCacheUpdateRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<ClearListmutesCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearListmutesCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearListmutesCacheUpdateRequest {
    return new ClearListmutesCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearListmutesCacheUpdateRequest {
    return new ClearListmutesCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearListmutesCacheUpdateRequest {
    return new ClearListmutesCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | ClearListmutesCacheUpdateRequest
      | PlainMessage<ClearListmutesCacheUpdateRequest>
      | undefined,
    b:
      | ClearListmutesCacheUpdateRequest
      | PlainMessage<ClearListmutesCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearListmutesCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.ClearListmutesCacheUpdateResponse
 */
export class ClearListmutesCacheUpdateResponse extends Message<ClearListmutesCacheUpdateResponse> {
  constructor(data?: PartialMessage<ClearListmutesCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearListmutesCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearListmutesCacheUpdateResponse {
    return new ClearListmutesCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearListmutesCacheUpdateResponse {
    return new ClearListmutesCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearListmutesCacheUpdateResponse {
    return new ClearListmutesCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | ClearListmutesCacheUpdateResponse
      | PlainMessage<ClearListmutesCacheUpdateResponse>
      | undefined,
    b:
      | ClearListmutesCacheUpdateResponse
      | PlainMessage<ClearListmutesCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearListmutesCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostCacheUpdateRequest
 */
export class DeleteFeedPostCacheUpdateRequest extends Message<DeleteFeedPostCacheUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<DeleteFeedPostCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostCacheUpdateRequest {
    return new DeleteFeedPostCacheUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostCacheUpdateRequest {
    return new DeleteFeedPostCacheUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostCacheUpdateRequest {
    return new DeleteFeedPostCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostCacheUpdateRequest
      | PlainMessage<DeleteFeedPostCacheUpdateRequest>
      | undefined,
    b:
      | DeleteFeedPostCacheUpdateRequest
      | PlainMessage<DeleteFeedPostCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedPostCacheUpdateResponse
 */
export class DeleteFeedPostCacheUpdateResponse extends Message<DeleteFeedPostCacheUpdateResponse> {
  constructor(data?: PartialMessage<DeleteFeedPostCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedPostCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedPostCacheUpdateResponse {
    return new DeleteFeedPostCacheUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostCacheUpdateResponse {
    return new DeleteFeedPostCacheUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedPostCacheUpdateResponse {
    return new DeleteFeedPostCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedPostCacheUpdateResponse
      | PlainMessage<DeleteFeedPostCacheUpdateResponse>
      | undefined,
    b:
      | DeleteFeedPostCacheUpdateResponse
      | PlainMessage<DeleteFeedPostCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedPostCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphBlockRequest
 */
export class DeleteGraphBlockRequest extends Message<DeleteGraphBlockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphBlockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphBlockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphBlockRequest {
    return new DeleteGraphBlockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphBlockRequest {
    return new DeleteGraphBlockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphBlockRequest {
    return new DeleteGraphBlockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphBlockRequest
      | PlainMessage<DeleteGraphBlockRequest>
      | undefined,
    b:
      | DeleteGraphBlockRequest
      | PlainMessage<DeleteGraphBlockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphBlockRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphBlockResponse
 */
export class DeleteGraphBlockResponse extends Message<DeleteGraphBlockResponse> {
  constructor(data?: PartialMessage<DeleteGraphBlockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphBlockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphBlockResponse {
    return new DeleteGraphBlockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphBlockResponse {
    return new DeleteGraphBlockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphBlockResponse {
    return new DeleteGraphBlockResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphBlockResponse
      | PlainMessage<DeleteGraphBlockResponse>
      | undefined,
    b:
      | DeleteGraphBlockResponse
      | PlainMessage<DeleteGraphBlockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphBlockResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphBlockRequest
 */
export class UpdateGraphBlockRequest extends Message<UpdateGraphBlockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphBlockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphBlockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphBlockRequest {
    return new UpdateGraphBlockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphBlockRequest {
    return new UpdateGraphBlockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphBlockRequest {
    return new UpdateGraphBlockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphBlockRequest
      | PlainMessage<UpdateGraphBlockRequest>
      | undefined,
    b:
      | UpdateGraphBlockRequest
      | PlainMessage<UpdateGraphBlockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphBlockRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphBlockResponse
 */
export class UpdateGraphBlockResponse extends Message<UpdateGraphBlockResponse> {
  constructor(data?: PartialMessage<UpdateGraphBlockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphBlockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphBlockResponse {
    return new UpdateGraphBlockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphBlockResponse {
    return new UpdateGraphBlockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphBlockResponse {
    return new UpdateGraphBlockResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphBlockResponse
      | PlainMessage<UpdateGraphBlockResponse>
      | undefined,
    b:
      | UpdateGraphBlockResponse
      | PlainMessage<UpdateGraphBlockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphBlockResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorProfileRequest
 */
export class CreateActorProfileRequest extends Message<CreateActorProfileRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateActorProfileRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorProfileRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorProfileRequest {
    return new CreateActorProfileRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorProfileRequest {
    return new CreateActorProfileRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorProfileRequest {
    return new CreateActorProfileRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateActorProfileRequest
      | PlainMessage<CreateActorProfileRequest>
      | undefined,
    b:
      | CreateActorProfileRequest
      | PlainMessage<CreateActorProfileRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorProfileRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorProfileResponse
 */
export class CreateActorProfileResponse extends Message<CreateActorProfileResponse> {
  constructor(data?: PartialMessage<CreateActorProfileResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorProfileResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorProfileResponse {
    return new CreateActorProfileResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorProfileResponse {
    return new CreateActorProfileResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorProfileResponse {
    return new CreateActorProfileResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateActorProfileResponse
      | PlainMessage<CreateActorProfileResponse>
      | undefined,
    b:
      | CreateActorProfileResponse
      | PlainMessage<CreateActorProfileResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorProfileResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorProfileRequest
 */
export class DeleteActorProfileRequest extends Message<DeleteActorProfileRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteActorProfileRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorProfileRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorProfileRequest {
    return new DeleteActorProfileRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorProfileRequest {
    return new DeleteActorProfileRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorProfileRequest {
    return new DeleteActorProfileRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteActorProfileRequest
      | PlainMessage<DeleteActorProfileRequest>
      | undefined,
    b:
      | DeleteActorProfileRequest
      | PlainMessage<DeleteActorProfileRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorProfileRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorProfileResponse
 */
export class DeleteActorProfileResponse extends Message<DeleteActorProfileResponse> {
  constructor(data?: PartialMessage<DeleteActorProfileResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorProfileResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorProfileResponse {
    return new DeleteActorProfileResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorProfileResponse {
    return new DeleteActorProfileResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorProfileResponse {
    return new DeleteActorProfileResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteActorProfileResponse
      | PlainMessage<DeleteActorProfileResponse>
      | undefined,
    b:
      | DeleteActorProfileResponse
      | PlainMessage<DeleteActorProfileResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorProfileResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorProfileRequest
 */
export class UpdateActorProfileRequest extends Message<UpdateActorProfileRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateActorProfileRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorProfileRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorProfileRequest {
    return new UpdateActorProfileRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorProfileRequest {
    return new UpdateActorProfileRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorProfileRequest {
    return new UpdateActorProfileRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateActorProfileRequest
      | PlainMessage<UpdateActorProfileRequest>
      | undefined,
    b:
      | UpdateActorProfileRequest
      | PlainMessage<UpdateActorProfileRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorProfileRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorProfileResponse
 */
export class UpdateActorProfileResponse extends Message<UpdateActorProfileResponse> {
  constructor(data?: PartialMessage<UpdateActorProfileResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorProfileResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorProfileResponse {
    return new UpdateActorProfileResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorProfileResponse {
    return new UpdateActorProfileResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorProfileResponse {
    return new UpdateActorProfileResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateActorProfileResponse
      | PlainMessage<UpdateActorProfileResponse>
      | undefined,
    b:
      | UpdateActorProfileResponse
      | PlainMessage<UpdateActorProfileResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorProfileResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorChatDeclarationRequest
 */
export class CreateActorChatDeclarationRequest extends Message<CreateActorChatDeclarationRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateActorChatDeclarationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorChatDeclarationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorChatDeclarationRequest {
    return new CreateActorChatDeclarationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorChatDeclarationRequest {
    return new CreateActorChatDeclarationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorChatDeclarationRequest {
    return new CreateActorChatDeclarationRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorChatDeclarationRequest
      | PlainMessage<CreateActorChatDeclarationRequest>
      | undefined,
    b:
      | CreateActorChatDeclarationRequest
      | PlainMessage<CreateActorChatDeclarationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorChatDeclarationRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorChatDeclarationResponse
 */
export class CreateActorChatDeclarationResponse extends Message<CreateActorChatDeclarationResponse> {
  constructor(data?: PartialMessage<CreateActorChatDeclarationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorChatDeclarationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorChatDeclarationResponse {
    return new CreateActorChatDeclarationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorChatDeclarationResponse {
    return new CreateActorChatDeclarationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorChatDeclarationResponse {
    return new CreateActorChatDeclarationResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorChatDeclarationResponse
      | PlainMessage<CreateActorChatDeclarationResponse>
      | undefined,
    b:
      | CreateActorChatDeclarationResponse
      | PlainMessage<CreateActorChatDeclarationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorChatDeclarationResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorChatDeclarationRequest
 */
export class DeleteActorChatDeclarationRequest extends Message<DeleteActorChatDeclarationRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteActorChatDeclarationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorChatDeclarationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorChatDeclarationRequest {
    return new DeleteActorChatDeclarationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorChatDeclarationRequest {
    return new DeleteActorChatDeclarationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorChatDeclarationRequest {
    return new DeleteActorChatDeclarationRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteActorChatDeclarationRequest
      | PlainMessage<DeleteActorChatDeclarationRequest>
      | undefined,
    b:
      | DeleteActorChatDeclarationRequest
      | PlainMessage<DeleteActorChatDeclarationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorChatDeclarationRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorChatDeclarationResponse
 */
export class DeleteActorChatDeclarationResponse extends Message<DeleteActorChatDeclarationResponse> {
  constructor(data?: PartialMessage<DeleteActorChatDeclarationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorChatDeclarationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorChatDeclarationResponse {
    return new DeleteActorChatDeclarationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorChatDeclarationResponse {
    return new DeleteActorChatDeclarationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorChatDeclarationResponse {
    return new DeleteActorChatDeclarationResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteActorChatDeclarationResponse
      | PlainMessage<DeleteActorChatDeclarationResponse>
      | undefined,
    b:
      | DeleteActorChatDeclarationResponse
      | PlainMessage<DeleteActorChatDeclarationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorChatDeclarationResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorChatDeclarationRequest
 */
export class UpdateActorChatDeclarationRequest extends Message<UpdateActorChatDeclarationRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateActorChatDeclarationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorChatDeclarationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorChatDeclarationRequest {
    return new UpdateActorChatDeclarationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorChatDeclarationRequest {
    return new UpdateActorChatDeclarationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorChatDeclarationRequest {
    return new UpdateActorChatDeclarationRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateActorChatDeclarationRequest
      | PlainMessage<UpdateActorChatDeclarationRequest>
      | undefined,
    b:
      | UpdateActorChatDeclarationRequest
      | PlainMessage<UpdateActorChatDeclarationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorChatDeclarationRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateActorChatDeclarationResponse
 */
export class UpdateActorChatDeclarationResponse extends Message<UpdateActorChatDeclarationResponse> {
  constructor(data?: PartialMessage<UpdateActorChatDeclarationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateActorChatDeclarationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateActorChatDeclarationResponse {
    return new UpdateActorChatDeclarationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorChatDeclarationResponse {
    return new UpdateActorChatDeclarationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateActorChatDeclarationResponse {
    return new UpdateActorChatDeclarationResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateActorChatDeclarationResponse
      | PlainMessage<UpdateActorChatDeclarationResponse>
      | undefined,
    b:
      | UpdateActorChatDeclarationResponse
      | PlainMessage<UpdateActorChatDeclarationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateActorChatDeclarationResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelerRequest
 */
export class CreateLabelerRequest extends Message<CreateLabelerRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateLabelerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelerRequest {
    return new CreateLabelerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelerRequest {
    return new CreateLabelerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelerRequest {
    return new CreateLabelerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateLabelerRequest | PlainMessage<CreateLabelerRequest> | undefined,
    b: CreateLabelerRequest | PlainMessage<CreateLabelerRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelerRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateLabelerResponse
 */
export class CreateLabelerResponse extends Message<CreateLabelerResponse> {
  constructor(data?: PartialMessage<CreateLabelerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateLabelerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateLabelerResponse {
    return new CreateLabelerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelerResponse {
    return new CreateLabelerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateLabelerResponse {
    return new CreateLabelerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateLabelerResponse | PlainMessage<CreateLabelerResponse> | undefined,
    b: CreateLabelerResponse | PlainMessage<CreateLabelerResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateLabelerResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteLabelerRequest
 */
export class DeleteLabelerRequest extends Message<DeleteLabelerRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteLabelerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteLabelerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteLabelerRequest {
    return new DeleteLabelerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteLabelerRequest {
    return new DeleteLabelerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteLabelerRequest {
    return new DeleteLabelerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteLabelerRequest | PlainMessage<DeleteLabelerRequest> | undefined,
    b: DeleteLabelerRequest | PlainMessage<DeleteLabelerRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteLabelerRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteLabelerResponse
 */
export class DeleteLabelerResponse extends Message<DeleteLabelerResponse> {
  constructor(data?: PartialMessage<DeleteLabelerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteLabelerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteLabelerResponse {
    return new DeleteLabelerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteLabelerResponse {
    return new DeleteLabelerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteLabelerResponse {
    return new DeleteLabelerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteLabelerResponse | PlainMessage<DeleteLabelerResponse> | undefined,
    b: DeleteLabelerResponse | PlainMessage<DeleteLabelerResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteLabelerResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateLabelerRequest
 */
export class UpdateLabelerRequest extends Message<UpdateLabelerRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateLabelerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateLabelerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateLabelerRequest {
    return new UpdateLabelerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateLabelerRequest {
    return new UpdateLabelerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateLabelerRequest {
    return new UpdateLabelerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateLabelerRequest | PlainMessage<UpdateLabelerRequest> | undefined,
    b: UpdateLabelerRequest | PlainMessage<UpdateLabelerRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateLabelerRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateLabelerResponse
 */
export class UpdateLabelerResponse extends Message<UpdateLabelerResponse> {
  constructor(data?: PartialMessage<UpdateLabelerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateLabelerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateLabelerResponse {
    return new UpdateLabelerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateLabelerResponse {
    return new UpdateLabelerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateLabelerResponse {
    return new UpdateLabelerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateLabelerResponse | PlainMessage<UpdateLabelerResponse> | undefined,
    b: UpdateLabelerResponse | PlainMessage<UpdateLabelerResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateLabelerResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListRequest
 */
export class CreateGraphListRequest extends Message<CreateGraphListRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListRequest {
    return new CreateGraphListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListRequest {
    return new CreateGraphListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListRequest {
    return new CreateGraphListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphListRequest
      | PlainMessage<CreateGraphListRequest>
      | undefined,
    b:
      | CreateGraphListRequest
      | PlainMessage<CreateGraphListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListResponse
 */
export class CreateGraphListResponse extends Message<CreateGraphListResponse> {
  constructor(data?: PartialMessage<CreateGraphListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListResponse {
    return new CreateGraphListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListResponse {
    return new CreateGraphListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListResponse {
    return new CreateGraphListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphListResponse
      | PlainMessage<CreateGraphListResponse>
      | undefined,
    b:
      | CreateGraphListResponse
      | PlainMessage<CreateGraphListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListRequest
 */
export class DeleteGraphListRequest extends Message<DeleteGraphListRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListRequest {
    return new DeleteGraphListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListRequest {
    return new DeleteGraphListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListRequest {
    return new DeleteGraphListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphListRequest
      | PlainMessage<DeleteGraphListRequest>
      | undefined,
    b:
      | DeleteGraphListRequest
      | PlainMessage<DeleteGraphListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListResponse
 */
export class DeleteGraphListResponse extends Message<DeleteGraphListResponse> {
  constructor(data?: PartialMessage<DeleteGraphListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListResponse {
    return new DeleteGraphListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListResponse {
    return new DeleteGraphListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListResponse {
    return new DeleteGraphListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphListResponse
      | PlainMessage<DeleteGraphListResponse>
      | undefined,
    b:
      | DeleteGraphListResponse
      | PlainMessage<DeleteGraphListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListRequest
 */
export class UpdateGraphListRequest extends Message<UpdateGraphListRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListRequest {
    return new UpdateGraphListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListRequest {
    return new UpdateGraphListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListRequest {
    return new UpdateGraphListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphListRequest
      | PlainMessage<UpdateGraphListRequest>
      | undefined,
    b:
      | UpdateGraphListRequest
      | PlainMessage<UpdateGraphListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListResponse
 */
export class UpdateGraphListResponse extends Message<UpdateGraphListResponse> {
  constructor(data?: PartialMessage<UpdateGraphListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListResponse {
    return new UpdateGraphListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListResponse {
    return new UpdateGraphListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListResponse {
    return new UpdateGraphListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphListResponse
      | PlainMessage<UpdateGraphListResponse>
      | undefined,
    b:
      | UpdateGraphListResponse
      | PlainMessage<UpdateGraphListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListitemRequest
 */
export class CreateGraphListitemRequest extends Message<CreateGraphListitemRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphListitemRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListitemRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListitemRequest {
    return new CreateGraphListitemRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListitemRequest {
    return new CreateGraphListitemRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListitemRequest {
    return new CreateGraphListitemRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphListitemRequest
      | PlainMessage<CreateGraphListitemRequest>
      | undefined,
    b:
      | CreateGraphListitemRequest
      | PlainMessage<CreateGraphListitemRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListitemRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListitemResponse
 */
export class CreateGraphListitemResponse extends Message<CreateGraphListitemResponse> {
  constructor(data?: PartialMessage<CreateGraphListitemResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListitemResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListitemResponse {
    return new CreateGraphListitemResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListitemResponse {
    return new CreateGraphListitemResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListitemResponse {
    return new CreateGraphListitemResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphListitemResponse
      | PlainMessage<CreateGraphListitemResponse>
      | undefined,
    b:
      | CreateGraphListitemResponse
      | PlainMessage<CreateGraphListitemResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListitemResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListitemRequest
 */
export class DeleteGraphListitemRequest extends Message<DeleteGraphListitemRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphListitemRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListitemRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListitemRequest {
    return new DeleteGraphListitemRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListitemRequest {
    return new DeleteGraphListitemRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListitemRequest {
    return new DeleteGraphListitemRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphListitemRequest
      | PlainMessage<DeleteGraphListitemRequest>
      | undefined,
    b:
      | DeleteGraphListitemRequest
      | PlainMessage<DeleteGraphListitemRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListitemRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListitemResponse
 */
export class DeleteGraphListitemResponse extends Message<DeleteGraphListitemResponse> {
  constructor(data?: PartialMessage<DeleteGraphListitemResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListitemResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListitemResponse {
    return new DeleteGraphListitemResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListitemResponse {
    return new DeleteGraphListitemResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListitemResponse {
    return new DeleteGraphListitemResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphListitemResponse
      | PlainMessage<DeleteGraphListitemResponse>
      | undefined,
    b:
      | DeleteGraphListitemResponse
      | PlainMessage<DeleteGraphListitemResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListitemResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListitemRequest
 */
export class UpdateGraphListitemRequest extends Message<UpdateGraphListitemRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphListitemRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListitemRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListitemRequest {
    return new UpdateGraphListitemRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListitemRequest {
    return new UpdateGraphListitemRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListitemRequest {
    return new UpdateGraphListitemRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphListitemRequest
      | PlainMessage<UpdateGraphListitemRequest>
      | undefined,
    b:
      | UpdateGraphListitemRequest
      | PlainMessage<UpdateGraphListitemRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListitemRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListitemResponse
 */
export class UpdateGraphListitemResponse extends Message<UpdateGraphListitemResponse> {
  constructor(data?: PartialMessage<UpdateGraphListitemResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListitemResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListitemResponse {
    return new UpdateGraphListitemResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListitemResponse {
    return new UpdateGraphListitemResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListitemResponse {
    return new UpdateGraphListitemResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphListitemResponse
      | PlainMessage<UpdateGraphListitemResponse>
      | undefined,
    b:
      | UpdateGraphListitemResponse
      | PlainMessage<UpdateGraphListitemResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListitemResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListblockRequest
 */
export class CreateGraphListblockRequest extends Message<CreateGraphListblockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphListblockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListblockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListblockRequest {
    return new CreateGraphListblockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockRequest {
    return new CreateGraphListblockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockRequest {
    return new CreateGraphListblockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateGraphListblockRequest
      | PlainMessage<CreateGraphListblockRequest>
      | undefined,
    b:
      | CreateGraphListblockRequest
      | PlainMessage<CreateGraphListblockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListblockRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListblockResponse
 */
export class CreateGraphListblockResponse extends Message<CreateGraphListblockResponse> {
  constructor(data?: PartialMessage<CreateGraphListblockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListblockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListblockResponse {
    return new CreateGraphListblockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockResponse {
    return new CreateGraphListblockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockResponse {
    return new CreateGraphListblockResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphListblockResponse
      | PlainMessage<CreateGraphListblockResponse>
      | undefined,
    b:
      | CreateGraphListblockResponse
      | PlainMessage<CreateGraphListblockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListblockResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListblockCacheUpdateRequest
 */
export class CreateGraphListblockCacheUpdateRequest extends Message<CreateGraphListblockCacheUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateGraphListblockCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListblockCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListblockCacheUpdateRequest {
    return new CreateGraphListblockCacheUpdateRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockCacheUpdateRequest {
    return new CreateGraphListblockCacheUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockCacheUpdateRequest {
    return new CreateGraphListblockCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphListblockCacheUpdateRequest
      | PlainMessage<CreateGraphListblockCacheUpdateRequest>
      | undefined,
    b:
      | CreateGraphListblockCacheUpdateRequest
      | PlainMessage<CreateGraphListblockCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListblockCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateGraphListblockCacheUpdateResponse
 */
export class CreateGraphListblockCacheUpdateResponse extends Message<CreateGraphListblockCacheUpdateResponse> {
  constructor(data?: PartialMessage<CreateGraphListblockCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateGraphListblockCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateGraphListblockCacheUpdateResponse {
    return new CreateGraphListblockCacheUpdateResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockCacheUpdateResponse {
    return new CreateGraphListblockCacheUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateGraphListblockCacheUpdateResponse {
    return new CreateGraphListblockCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateGraphListblockCacheUpdateResponse
      | PlainMessage<CreateGraphListblockCacheUpdateResponse>
      | undefined,
    b:
      | CreateGraphListblockCacheUpdateResponse
      | PlainMessage<CreateGraphListblockCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateGraphListblockCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListblockRequest
 */
export class DeleteGraphListblockRequest extends Message<DeleteGraphListblockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteGraphListblockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListblockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListblockRequest {
    return new DeleteGraphListblockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockRequest {
    return new DeleteGraphListblockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockRequest {
    return new DeleteGraphListblockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteGraphListblockRequest
      | PlainMessage<DeleteGraphListblockRequest>
      | undefined,
    b:
      | DeleteGraphListblockRequest
      | PlainMessage<DeleteGraphListblockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListblockRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListblockResponse
 */
export class DeleteGraphListblockResponse extends Message<DeleteGraphListblockResponse> {
  constructor(data?: PartialMessage<DeleteGraphListblockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListblockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListblockResponse {
    return new DeleteGraphListblockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockResponse {
    return new DeleteGraphListblockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockResponse {
    return new DeleteGraphListblockResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphListblockResponse
      | PlainMessage<DeleteGraphListblockResponse>
      | undefined,
    b:
      | DeleteGraphListblockResponse
      | PlainMessage<DeleteGraphListblockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListblockResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListblockCacheUpdateRequest
 */
export class DeleteGraphListblockCacheUpdateRequest extends Message<DeleteGraphListblockCacheUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<DeleteGraphListblockCacheUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListblockCacheUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListblockCacheUpdateRequest {
    return new DeleteGraphListblockCacheUpdateRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockCacheUpdateRequest {
    return new DeleteGraphListblockCacheUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockCacheUpdateRequest {
    return new DeleteGraphListblockCacheUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphListblockCacheUpdateRequest
      | PlainMessage<DeleteGraphListblockCacheUpdateRequest>
      | undefined,
    b:
      | DeleteGraphListblockCacheUpdateRequest
      | PlainMessage<DeleteGraphListblockCacheUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListblockCacheUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteGraphListblockCacheUpdateResponse
 */
export class DeleteGraphListblockCacheUpdateResponse extends Message<DeleteGraphListblockCacheUpdateResponse> {
  constructor(data?: PartialMessage<DeleteGraphListblockCacheUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteGraphListblockCacheUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteGraphListblockCacheUpdateResponse {
    return new DeleteGraphListblockCacheUpdateResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockCacheUpdateResponse {
    return new DeleteGraphListblockCacheUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteGraphListblockCacheUpdateResponse {
    return new DeleteGraphListblockCacheUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteGraphListblockCacheUpdateResponse
      | PlainMessage<DeleteGraphListblockCacheUpdateResponse>
      | undefined,
    b:
      | DeleteGraphListblockCacheUpdateResponse
      | PlainMessage<DeleteGraphListblockCacheUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteGraphListblockCacheUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListblockRequest
 */
export class UpdateGraphListblockRequest extends Message<UpdateGraphListblockRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateGraphListblockRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListblockRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListblockRequest {
    return new UpdateGraphListblockRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListblockRequest {
    return new UpdateGraphListblockRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListblockRequest {
    return new UpdateGraphListblockRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateGraphListblockRequest
      | PlainMessage<UpdateGraphListblockRequest>
      | undefined,
    b:
      | UpdateGraphListblockRequest
      | PlainMessage<UpdateGraphListblockRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListblockRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateGraphListblockResponse
 */
export class UpdateGraphListblockResponse extends Message<UpdateGraphListblockResponse> {
  constructor(data?: PartialMessage<UpdateGraphListblockResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateGraphListblockResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateGraphListblockResponse {
    return new UpdateGraphListblockResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListblockResponse {
    return new UpdateGraphListblockResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateGraphListblockResponse {
    return new UpdateGraphListblockResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateGraphListblockResponse
      | PlainMessage<UpdateGraphListblockResponse>
      | undefined,
    b:
      | UpdateGraphListblockResponse
      | PlainMessage<UpdateGraphListblockResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateGraphListblockResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedGeneratorRequest
 */
export class CreateFeedGeneratorRequest extends Message<CreateFeedGeneratorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedGeneratorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedGeneratorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedGeneratorRequest {
    return new CreateFeedGeneratorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorRequest {
    return new CreateFeedGeneratorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorRequest {
    return new CreateFeedGeneratorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedGeneratorRequest
      | PlainMessage<CreateFeedGeneratorRequest>
      | undefined,
    b:
      | CreateFeedGeneratorRequest
      | PlainMessage<CreateFeedGeneratorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedGeneratorRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedGeneratorResponse
 */
export class CreateFeedGeneratorResponse extends Message<CreateFeedGeneratorResponse> {
  constructor(data?: PartialMessage<CreateFeedGeneratorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedGeneratorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedGeneratorResponse {
    return new CreateFeedGeneratorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorResponse {
    return new CreateFeedGeneratorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorResponse {
    return new CreateFeedGeneratorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedGeneratorResponse
      | PlainMessage<CreateFeedGeneratorResponse>
      | undefined,
    b:
      | CreateFeedGeneratorResponse
      | PlainMessage<CreateFeedGeneratorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedGeneratorResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedGeneratorSearchDBUpdateRequest
 */
export class CreateFeedGeneratorSearchDBUpdateRequest extends Message<CreateFeedGeneratorSearchDBUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 5;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 6;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedGeneratorSearchDBUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedGeneratorSearchDBUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 5, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateRequest {
    return new CreateFeedGeneratorSearchDBUpdateRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateRequest {
    return new CreateFeedGeneratorSearchDBUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateRequest {
    return new CreateFeedGeneratorSearchDBUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<CreateFeedGeneratorSearchDBUpdateRequest>
      | undefined,
    b:
      | CreateFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<CreateFeedGeneratorSearchDBUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedGeneratorSearchDBUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedGeneratorSearchDBUpdateResponse
 */
export class CreateFeedGeneratorSearchDBUpdateResponse extends Message<CreateFeedGeneratorSearchDBUpdateResponse> {
  constructor(
    data?: PartialMessage<CreateFeedGeneratorSearchDBUpdateResponse>,
  ) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedGeneratorSearchDBUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateResponse {
    return new CreateFeedGeneratorSearchDBUpdateResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateResponse {
    return new CreateFeedGeneratorSearchDBUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedGeneratorSearchDBUpdateResponse {
    return new CreateFeedGeneratorSearchDBUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<CreateFeedGeneratorSearchDBUpdateResponse>
      | undefined,
    b:
      | CreateFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<CreateFeedGeneratorSearchDBUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedGeneratorSearchDBUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedGeneratorSearchDBUpdateRequest
 */
export class UpdateFeedGeneratorSearchDBUpdateRequest extends Message<UpdateFeedGeneratorSearchDBUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 5;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 6;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedGeneratorSearchDBUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedGeneratorSearchDBUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 5, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateRequest {
    return new UpdateFeedGeneratorSearchDBUpdateRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateRequest {
    return new UpdateFeedGeneratorSearchDBUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateRequest {
    return new UpdateFeedGeneratorSearchDBUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<UpdateFeedGeneratorSearchDBUpdateRequest>
      | undefined,
    b:
      | UpdateFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<UpdateFeedGeneratorSearchDBUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedGeneratorSearchDBUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedGeneratorSearchDBUpdateResponse
 */
export class UpdateFeedGeneratorSearchDBUpdateResponse extends Message<UpdateFeedGeneratorSearchDBUpdateResponse> {
  constructor(
    data?: PartialMessage<UpdateFeedGeneratorSearchDBUpdateResponse>,
  ) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedGeneratorSearchDBUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateResponse {
    return new UpdateFeedGeneratorSearchDBUpdateResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateResponse {
    return new UpdateFeedGeneratorSearchDBUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorSearchDBUpdateResponse {
    return new UpdateFeedGeneratorSearchDBUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<UpdateFeedGeneratorSearchDBUpdateResponse>
      | undefined,
    b:
      | UpdateFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<UpdateFeedGeneratorSearchDBUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedGeneratorSearchDBUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedGeneratorSearchDBUpdateRequest
 */
export class DeleteFeedGeneratorSearchDBUpdateRequest extends Message<DeleteFeedGeneratorSearchDBUpdateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<DeleteFeedGeneratorSearchDBUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedGeneratorSearchDBUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateRequest {
    return new DeleteFeedGeneratorSearchDBUpdateRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateRequest {
    return new DeleteFeedGeneratorSearchDBUpdateRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateRequest {
    return new DeleteFeedGeneratorSearchDBUpdateRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<DeleteFeedGeneratorSearchDBUpdateRequest>
      | undefined,
    b:
      | DeleteFeedGeneratorSearchDBUpdateRequest
      | PlainMessage<DeleteFeedGeneratorSearchDBUpdateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedGeneratorSearchDBUpdateRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedGeneratorSearchDBUpdateResponse
 */
export class DeleteFeedGeneratorSearchDBUpdateResponse extends Message<DeleteFeedGeneratorSearchDBUpdateResponse> {
  constructor(
    data?: PartialMessage<DeleteFeedGeneratorSearchDBUpdateResponse>,
  ) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedGeneratorSearchDBUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateResponse {
    return new DeleteFeedGeneratorSearchDBUpdateResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateResponse {
    return new DeleteFeedGeneratorSearchDBUpdateResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorSearchDBUpdateResponse {
    return new DeleteFeedGeneratorSearchDBUpdateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<DeleteFeedGeneratorSearchDBUpdateResponse>
      | undefined,
    b:
      | DeleteFeedGeneratorSearchDBUpdateResponse
      | PlainMessage<DeleteFeedGeneratorSearchDBUpdateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedGeneratorSearchDBUpdateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedGeneratorRequest
 */
export class DeleteFeedGeneratorRequest extends Message<DeleteFeedGeneratorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedGeneratorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedGeneratorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedGeneratorRequest {
    return new DeleteFeedGeneratorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorRequest {
    return new DeleteFeedGeneratorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorRequest {
    return new DeleteFeedGeneratorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedGeneratorRequest
      | PlainMessage<DeleteFeedGeneratorRequest>
      | undefined,
    b:
      | DeleteFeedGeneratorRequest
      | PlainMessage<DeleteFeedGeneratorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedGeneratorRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedGeneratorResponse
 */
export class DeleteFeedGeneratorResponse extends Message<DeleteFeedGeneratorResponse> {
  constructor(data?: PartialMessage<DeleteFeedGeneratorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedGeneratorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedGeneratorResponse {
    return new DeleteFeedGeneratorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorResponse {
    return new DeleteFeedGeneratorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedGeneratorResponse {
    return new DeleteFeedGeneratorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedGeneratorResponse
      | PlainMessage<DeleteFeedGeneratorResponse>
      | undefined,
    b:
      | DeleteFeedGeneratorResponse
      | PlainMessage<DeleteFeedGeneratorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedGeneratorResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedGeneratorRequest
 */
export class UpdateFeedGeneratorRequest extends Message<UpdateFeedGeneratorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedGeneratorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedGeneratorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedGeneratorRequest {
    return new UpdateFeedGeneratorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorRequest {
    return new UpdateFeedGeneratorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorRequest {
    return new UpdateFeedGeneratorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedGeneratorRequest
      | PlainMessage<UpdateFeedGeneratorRequest>
      | undefined,
    b:
      | UpdateFeedGeneratorRequest
      | PlainMessage<UpdateFeedGeneratorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedGeneratorRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedGeneratorResponse
 */
export class UpdateFeedGeneratorResponse extends Message<UpdateFeedGeneratorResponse> {
  constructor(data?: PartialMessage<UpdateFeedGeneratorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedGeneratorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedGeneratorResponse {
    return new UpdateFeedGeneratorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorResponse {
    return new UpdateFeedGeneratorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedGeneratorResponse {
    return new UpdateFeedGeneratorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedGeneratorResponse
      | PlainMessage<UpdateFeedGeneratorResponse>
      | undefined,
    b:
      | UpdateFeedGeneratorResponse
      | PlainMessage<UpdateFeedGeneratorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedGeneratorResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedThreadgateRequest
 */
export class CreateFeedThreadgateRequest extends Message<CreateFeedThreadgateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateFeedThreadgateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedThreadgateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedThreadgateRequest {
    return new CreateFeedThreadgateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedThreadgateRequest {
    return new CreateFeedThreadgateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedThreadgateRequest {
    return new CreateFeedThreadgateRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFeedThreadgateRequest
      | PlainMessage<CreateFeedThreadgateRequest>
      | undefined,
    b:
      | CreateFeedThreadgateRequest
      | PlainMessage<CreateFeedThreadgateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedThreadgateRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateFeedThreadgateResponse
 */
export class CreateFeedThreadgateResponse extends Message<CreateFeedThreadgateResponse> {
  constructor(data?: PartialMessage<CreateFeedThreadgateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateFeedThreadgateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateFeedThreadgateResponse {
    return new CreateFeedThreadgateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedThreadgateResponse {
    return new CreateFeedThreadgateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateFeedThreadgateResponse {
    return new CreateFeedThreadgateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateFeedThreadgateResponse
      | PlainMessage<CreateFeedThreadgateResponse>
      | undefined,
    b:
      | CreateFeedThreadgateResponse
      | PlainMessage<CreateFeedThreadgateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateFeedThreadgateResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedThreadgateRequest
 */
export class DeleteFeedThreadgateRequest extends Message<DeleteFeedThreadgateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  constructor(data?: PartialMessage<DeleteFeedThreadgateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedThreadgateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedThreadgateRequest {
    return new DeleteFeedThreadgateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedThreadgateRequest {
    return new DeleteFeedThreadgateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedThreadgateRequest {
    return new DeleteFeedThreadgateRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteFeedThreadgateRequest
      | PlainMessage<DeleteFeedThreadgateRequest>
      | undefined,
    b:
      | DeleteFeedThreadgateRequest
      | PlainMessage<DeleteFeedThreadgateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedThreadgateRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteFeedThreadgateResponse
 */
export class DeleteFeedThreadgateResponse extends Message<DeleteFeedThreadgateResponse> {
  constructor(data?: PartialMessage<DeleteFeedThreadgateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteFeedThreadgateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteFeedThreadgateResponse {
    return new DeleteFeedThreadgateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedThreadgateResponse {
    return new DeleteFeedThreadgateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteFeedThreadgateResponse {
    return new DeleteFeedThreadgateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteFeedThreadgateResponse
      | PlainMessage<DeleteFeedThreadgateResponse>
      | undefined,
    b:
      | DeleteFeedThreadgateResponse
      | PlainMessage<DeleteFeedThreadgateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteFeedThreadgateResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedThreadgateRequest
 */
export class UpdateFeedThreadgateRequest extends Message<UpdateFeedThreadgateRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string rkey = 2;
   */
  rkey = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 3;
   */
  seen?: Timestamp

  /**
   * @generated from field: string cid = 4;
   */
  cid = ''

  /**
   * @generated from field: bytes record = 5;
   */
  record = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateFeedThreadgateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedThreadgateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rkey', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'seen', kind: 'message', T: Timestamp },
    { no: 4, name: 'cid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'record', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedThreadgateRequest {
    return new UpdateFeedThreadgateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedThreadgateRequest {
    return new UpdateFeedThreadgateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedThreadgateRequest {
    return new UpdateFeedThreadgateRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFeedThreadgateRequest
      | PlainMessage<UpdateFeedThreadgateRequest>
      | undefined,
    b:
      | UpdateFeedThreadgateRequest
      | PlainMessage<UpdateFeedThreadgateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedThreadgateRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateFeedThreadgateResponse
 */
export class UpdateFeedThreadgateResponse extends Message<UpdateFeedThreadgateResponse> {
  constructor(data?: PartialMessage<UpdateFeedThreadgateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateFeedThreadgateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateFeedThreadgateResponse {
    return new UpdateFeedThreadgateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedThreadgateResponse {
    return new UpdateFeedThreadgateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateFeedThreadgateResponse {
    return new UpdateFeedThreadgateResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | UpdateFeedThreadgateResponse
      | PlainMessage<UpdateFeedThreadgateResponse>
      | undefined,
    b:
      | UpdateFeedThreadgateResponse
      | PlainMessage<UpdateFeedThreadgateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateFeedThreadgateResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMuteRequest
 */
export class CreateActorMuteRequest extends Message<CreateActorMuteRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_did = 2;
   */
  subjectDid = ''

  constructor(data?: PartialMessage<CreateActorMuteRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMuteRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'subject_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMuteRequest {
    return new CreateActorMuteRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteRequest {
    return new CreateActorMuteRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteRequest {
    return new CreateActorMuteRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateActorMuteRequest
      | PlainMessage<CreateActorMuteRequest>
      | undefined,
    b:
      | CreateActorMuteRequest
      | PlainMessage<CreateActorMuteRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMuteRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMuteResponse
 */
export class CreateActorMuteResponse extends Message<CreateActorMuteResponse> {
  constructor(data?: PartialMessage<CreateActorMuteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMuteResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMuteResponse {
    return new CreateActorMuteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteResponse {
    return new CreateActorMuteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMuteResponse {
    return new CreateActorMuteResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateActorMuteResponse
      | PlainMessage<CreateActorMuteResponse>
      | undefined,
    b:
      | CreateActorMuteResponse
      | PlainMessage<CreateActorMuteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMuteResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorMuteRequest
 */
export class DeleteActorMuteRequest extends Message<DeleteActorMuteRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_did = 2;
   */
  subjectDid = ''

  constructor(data?: PartialMessage<DeleteActorMuteRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorMuteRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'subject_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorMuteRequest {
    return new DeleteActorMuteRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMuteRequest {
    return new DeleteActorMuteRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMuteRequest {
    return new DeleteActorMuteRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteActorMuteRequest
      | PlainMessage<DeleteActorMuteRequest>
      | undefined,
    b:
      | DeleteActorMuteRequest
      | PlainMessage<DeleteActorMuteRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorMuteRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorMuteResponse
 */
export class DeleteActorMuteResponse extends Message<DeleteActorMuteResponse> {
  constructor(data?: PartialMessage<DeleteActorMuteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorMuteResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorMuteResponse {
    return new DeleteActorMuteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMuteResponse {
    return new DeleteActorMuteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMuteResponse {
    return new DeleteActorMuteResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteActorMuteResponse
      | PlainMessage<DeleteActorMuteResponse>
      | undefined,
    b:
      | DeleteActorMuteResponse
      | PlainMessage<DeleteActorMuteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorMuteResponse, a, b)
  }
}

/**
 * @generated from message bsky.ClearActorMutesRequest
 */
export class ClearActorMutesRequest extends Message<ClearActorMutesRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  constructor(data?: PartialMessage<ClearActorMutesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearActorMutesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearActorMutesRequest {
    return new ClearActorMutesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutesRequest {
    return new ClearActorMutesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutesRequest {
    return new ClearActorMutesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ClearActorMutesRequest
      | PlainMessage<ClearActorMutesRequest>
      | undefined,
    b:
      | ClearActorMutesRequest
      | PlainMessage<ClearActorMutesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearActorMutesRequest, a, b)
  }
}

/**
 * @generated from message bsky.ClearActorMutesResponse
 */
export class ClearActorMutesResponse extends Message<ClearActorMutesResponse> {
  constructor(data?: PartialMessage<ClearActorMutesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearActorMutesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearActorMutesResponse {
    return new ClearActorMutesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutesResponse {
    return new ClearActorMutesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutesResponse {
    return new ClearActorMutesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ClearActorMutesResponse
      | PlainMessage<ClearActorMutesResponse>
      | undefined,
    b:
      | ClearActorMutesResponse
      | PlainMessage<ClearActorMutesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearActorMutesResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMutelistSubscriptionRequest
 */
export class CreateActorMutelistSubscriptionRequest extends Message<CreateActorMutelistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_uri = 2;
   */
  subjectUri = ''

  constructor(data?: PartialMessage<CreateActorMutelistSubscriptionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMutelistSubscriptionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'subject_uri',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMutelistSubscriptionRequest {
    return new CreateActorMutelistSubscriptionRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMutelistSubscriptionRequest {
    return new CreateActorMutelistSubscriptionRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMutelistSubscriptionRequest {
    return new CreateActorMutelistSubscriptionRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorMutelistSubscriptionRequest
      | PlainMessage<CreateActorMutelistSubscriptionRequest>
      | undefined,
    b:
      | CreateActorMutelistSubscriptionRequest
      | PlainMessage<CreateActorMutelistSubscriptionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMutelistSubscriptionRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorMutelistSubscriptionResponse
 */
export class CreateActorMutelistSubscriptionResponse extends Message<CreateActorMutelistSubscriptionResponse> {
  constructor(data?: PartialMessage<CreateActorMutelistSubscriptionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorMutelistSubscriptionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorMutelistSubscriptionResponse {
    return new CreateActorMutelistSubscriptionResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMutelistSubscriptionResponse {
    return new CreateActorMutelistSubscriptionResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorMutelistSubscriptionResponse {
    return new CreateActorMutelistSubscriptionResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateActorMutelistSubscriptionResponse
      | PlainMessage<CreateActorMutelistSubscriptionResponse>
      | undefined,
    b:
      | CreateActorMutelistSubscriptionResponse
      | PlainMessage<CreateActorMutelistSubscriptionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorMutelistSubscriptionResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorMutelistSubscriptionRequest
 */
export class DeleteActorMutelistSubscriptionRequest extends Message<DeleteActorMutelistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: string subject_uri = 2;
   */
  subjectUri = ''

  constructor(data?: PartialMessage<DeleteActorMutelistSubscriptionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorMutelistSubscriptionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'subject_uri',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorMutelistSubscriptionRequest {
    return new DeleteActorMutelistSubscriptionRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMutelistSubscriptionRequest {
    return new DeleteActorMutelistSubscriptionRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMutelistSubscriptionRequest {
    return new DeleteActorMutelistSubscriptionRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteActorMutelistSubscriptionRequest
      | PlainMessage<DeleteActorMutelistSubscriptionRequest>
      | undefined,
    b:
      | DeleteActorMutelistSubscriptionRequest
      | PlainMessage<DeleteActorMutelistSubscriptionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorMutelistSubscriptionRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorMutelistSubscriptionResponse
 */
export class DeleteActorMutelistSubscriptionResponse extends Message<DeleteActorMutelistSubscriptionResponse> {
  constructor(data?: PartialMessage<DeleteActorMutelistSubscriptionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorMutelistSubscriptionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorMutelistSubscriptionResponse {
    return new DeleteActorMutelistSubscriptionResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMutelistSubscriptionResponse {
    return new DeleteActorMutelistSubscriptionResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorMutelistSubscriptionResponse {
    return new DeleteActorMutelistSubscriptionResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | DeleteActorMutelistSubscriptionResponse
      | PlainMessage<DeleteActorMutelistSubscriptionResponse>
      | undefined,
    b:
      | DeleteActorMutelistSubscriptionResponse
      | PlainMessage<DeleteActorMutelistSubscriptionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorMutelistSubscriptionResponse, a, b)
  }
}

/**
 * @generated from message bsky.ClearActorMutelistSubscriptionsRequest
 */
export class ClearActorMutelistSubscriptionsRequest extends Message<ClearActorMutelistSubscriptionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  constructor(data?: PartialMessage<ClearActorMutelistSubscriptionsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearActorMutelistSubscriptionsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearActorMutelistSubscriptionsRequest {
    return new ClearActorMutelistSubscriptionsRequest().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutelistSubscriptionsRequest {
    return new ClearActorMutelistSubscriptionsRequest().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutelistSubscriptionsRequest {
    return new ClearActorMutelistSubscriptionsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | ClearActorMutelistSubscriptionsRequest
      | PlainMessage<ClearActorMutelistSubscriptionsRequest>
      | undefined,
    b:
      | ClearActorMutelistSubscriptionsRequest
      | PlainMessage<ClearActorMutelistSubscriptionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearActorMutelistSubscriptionsRequest, a, b)
  }
}

/**
 * @generated from message bsky.ClearActorMutelistSubscriptionsResponse
 */
export class ClearActorMutelistSubscriptionsResponse extends Message<ClearActorMutelistSubscriptionsResponse> {
  constructor(data?: PartialMessage<ClearActorMutelistSubscriptionsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ClearActorMutelistSubscriptionsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ClearActorMutelistSubscriptionsResponse {
    return new ClearActorMutelistSubscriptionsResponse().fromBinary(
      bytes,
      options,
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutelistSubscriptionsResponse {
    return new ClearActorMutelistSubscriptionsResponse().fromJson(
      jsonValue,
      options,
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ClearActorMutelistSubscriptionsResponse {
    return new ClearActorMutelistSubscriptionsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | ClearActorMutelistSubscriptionsResponse
      | PlainMessage<ClearActorMutelistSubscriptionsResponse>
      | undefined,
    b:
      | ClearActorMutelistSubscriptionsResponse
      | PlainMessage<ClearActorMutelistSubscriptionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(ClearActorMutelistSubscriptionsResponse, a, b)
  }
}

/**
 * @generated from message bsky.UpdateIdentityRequest
 */
export class UpdateIdentityRequest extends Message<UpdateIdentityRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string handle = 2;
   */
  handle = ''

  /**
   * @generated from field: bytes keys = 3;
   */
  keys = new Uint8Array(0)

  /**
   * @generated from field: bytes services = 4;
   */
  services = new Uint8Array(0)

  constructor(data?: PartialMessage<UpdateIdentityRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateIdentityRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'handle', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'keys', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'services', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateIdentityRequest {
    return new UpdateIdentityRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateIdentityRequest {
    return new UpdateIdentityRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateIdentityRequest {
    return new UpdateIdentityRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateIdentityRequest | PlainMessage<UpdateIdentityRequest> | undefined,
    b: UpdateIdentityRequest | PlainMessage<UpdateIdentityRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateIdentityRequest, a, b)
  }
}

/**
 * @generated from message bsky.UpdateIdentityResponse
 */
export class UpdateIdentityResponse extends Message<UpdateIdentityResponse> {
  constructor(data?: PartialMessage<UpdateIdentityResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.UpdateIdentityResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): UpdateIdentityResponse {
    return new UpdateIdentityResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): UpdateIdentityResponse {
    return new UpdateIdentityResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UpdateIdentityResponse {
    return new UpdateIdentityResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateIdentityResponse
      | PlainMessage<UpdateIdentityResponse>
      | undefined,
    b:
      | UpdateIdentityResponse
      | PlainMessage<UpdateIdentityResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(UpdateIdentityResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorRequest
 */
export class TombstoneActorRequest extends Message<TombstoneActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<TombstoneActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorRequest {
    return new TombstoneActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRequest {
    return new TombstoneActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRequest {
    return new TombstoneActorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: TombstoneActorRequest | PlainMessage<TombstoneActorRequest> | undefined,
    b: TombstoneActorRequest | PlainMessage<TombstoneActorRequest> | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorResponse
 */
export class TombstoneActorResponse extends Message<TombstoneActorResponse> {
  constructor(data?: PartialMessage<TombstoneActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorResponse {
    return new TombstoneActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorResponse {
    return new TombstoneActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorResponse {
    return new TombstoneActorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorResponse
      | PlainMessage<TombstoneActorResponse>
      | undefined,
    b:
      | TombstoneActorResponse
      | PlainMessage<TombstoneActorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorPostsRequest
 */
export class TombstoneActorPostsRequest extends Message<TombstoneActorPostsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorPostsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorPostsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorPostsRequest {
    return new TombstoneActorPostsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorPostsRequest {
    return new TombstoneActorPostsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorPostsRequest {
    return new TombstoneActorPostsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorPostsRequest
      | PlainMessage<TombstoneActorPostsRequest>
      | undefined,
    b:
      | TombstoneActorPostsRequest
      | PlainMessage<TombstoneActorPostsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorPostsRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorPostsResponse
 */
export class TombstoneActorPostsResponse extends Message<TombstoneActorPostsResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorPostsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorPostsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorPostsResponse {
    return new TombstoneActorPostsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorPostsResponse {
    return new TombstoneActorPostsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorPostsResponse {
    return new TombstoneActorPostsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorPostsResponse
      | PlainMessage<TombstoneActorPostsResponse>
      | undefined,
    b:
      | TombstoneActorPostsResponse
      | PlainMessage<TombstoneActorPostsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorPostsResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorLikesRequest
 */
export class TombstoneActorLikesRequest extends Message<TombstoneActorLikesRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorLikesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorLikesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorLikesRequest {
    return new TombstoneActorLikesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorLikesRequest {
    return new TombstoneActorLikesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorLikesRequest {
    return new TombstoneActorLikesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorLikesRequest
      | PlainMessage<TombstoneActorLikesRequest>
      | undefined,
    b:
      | TombstoneActorLikesRequest
      | PlainMessage<TombstoneActorLikesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorLikesRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorLikesResponse
 */
export class TombstoneActorLikesResponse extends Message<TombstoneActorLikesResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorLikesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorLikesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorLikesResponse {
    return new TombstoneActorLikesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorLikesResponse {
    return new TombstoneActorLikesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorLikesResponse {
    return new TombstoneActorLikesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorLikesResponse
      | PlainMessage<TombstoneActorLikesResponse>
      | undefined,
    b:
      | TombstoneActorLikesResponse
      | PlainMessage<TombstoneActorLikesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorLikesResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorRepostsRequest
 */
export class TombstoneActorRepostsRequest extends Message<TombstoneActorRepostsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorRepostsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorRepostsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorRepostsRequest {
    return new TombstoneActorRepostsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRepostsRequest {
    return new TombstoneActorRepostsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRepostsRequest {
    return new TombstoneActorRepostsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorRepostsRequest
      | PlainMessage<TombstoneActorRepostsRequest>
      | undefined,
    b:
      | TombstoneActorRepostsRequest
      | PlainMessage<TombstoneActorRepostsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorRepostsRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorRepostsResponse
 */
export class TombstoneActorRepostsResponse extends Message<TombstoneActorRepostsResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorRepostsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorRepostsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorRepostsResponse {
    return new TombstoneActorRepostsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRepostsResponse {
    return new TombstoneActorRepostsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorRepostsResponse {
    return new TombstoneActorRepostsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorRepostsResponse
      | PlainMessage<TombstoneActorRepostsResponse>
      | undefined,
    b:
      | TombstoneActorRepostsResponse
      | PlainMessage<TombstoneActorRepostsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorRepostsResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorFollowsRequest
 */
export class TombstoneActorFollowsRequest extends Message<TombstoneActorFollowsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorFollowsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorFollowsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorFollowsRequest {
    return new TombstoneActorFollowsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFollowsRequest {
    return new TombstoneActorFollowsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFollowsRequest {
    return new TombstoneActorFollowsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorFollowsRequest
      | PlainMessage<TombstoneActorFollowsRequest>
      | undefined,
    b:
      | TombstoneActorFollowsRequest
      | PlainMessage<TombstoneActorFollowsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorFollowsRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorFollowsResponse
 */
export class TombstoneActorFollowsResponse extends Message<TombstoneActorFollowsResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorFollowsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorFollowsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorFollowsResponse {
    return new TombstoneActorFollowsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFollowsResponse {
    return new TombstoneActorFollowsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFollowsResponse {
    return new TombstoneActorFollowsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorFollowsResponse
      | PlainMessage<TombstoneActorFollowsResponse>
      | undefined,
    b:
      | TombstoneActorFollowsResponse
      | PlainMessage<TombstoneActorFollowsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorFollowsResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorBlocksRequest
 */
export class TombstoneActorBlocksRequest extends Message<TombstoneActorBlocksRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorBlocksRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorBlocksRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorBlocksRequest {
    return new TombstoneActorBlocksRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorBlocksRequest {
    return new TombstoneActorBlocksRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorBlocksRequest {
    return new TombstoneActorBlocksRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorBlocksRequest
      | PlainMessage<TombstoneActorBlocksRequest>
      | undefined,
    b:
      | TombstoneActorBlocksRequest
      | PlainMessage<TombstoneActorBlocksRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorBlocksRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorBlocksResponse
 */
export class TombstoneActorBlocksResponse extends Message<TombstoneActorBlocksResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorBlocksResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorBlocksResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorBlocksResponse {
    return new TombstoneActorBlocksResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorBlocksResponse {
    return new TombstoneActorBlocksResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorBlocksResponse {
    return new TombstoneActorBlocksResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorBlocksResponse
      | PlainMessage<TombstoneActorBlocksResponse>
      | undefined,
    b:
      | TombstoneActorBlocksResponse
      | PlainMessage<TombstoneActorBlocksResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorBlocksResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListblocksRequest
 */
export class TombstoneActorListblocksRequest extends Message<TombstoneActorListblocksRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorListblocksRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListblocksRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListblocksRequest {
    return new TombstoneActorListblocksRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListblocksRequest {
    return new TombstoneActorListblocksRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListblocksRequest {
    return new TombstoneActorListblocksRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorListblocksRequest
      | PlainMessage<TombstoneActorListblocksRequest>
      | undefined,
    b:
      | TombstoneActorListblocksRequest
      | PlainMessage<TombstoneActorListblocksRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListblocksRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListblocksResponse
 */
export class TombstoneActorListblocksResponse extends Message<TombstoneActorListblocksResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorListblocksResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListblocksResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListblocksResponse {
    return new TombstoneActorListblocksResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListblocksResponse {
    return new TombstoneActorListblocksResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListblocksResponse {
    return new TombstoneActorListblocksResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorListblocksResponse
      | PlainMessage<TombstoneActorListblocksResponse>
      | undefined,
    b:
      | TombstoneActorListblocksResponse
      | PlainMessage<TombstoneActorListblocksResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListblocksResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorFeedgensRequest
 */
export class TombstoneActorFeedgensRequest extends Message<TombstoneActorFeedgensRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorFeedgensRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorFeedgensRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorFeedgensRequest {
    return new TombstoneActorFeedgensRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFeedgensRequest {
    return new TombstoneActorFeedgensRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFeedgensRequest {
    return new TombstoneActorFeedgensRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorFeedgensRequest
      | PlainMessage<TombstoneActorFeedgensRequest>
      | undefined,
    b:
      | TombstoneActorFeedgensRequest
      | PlainMessage<TombstoneActorFeedgensRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorFeedgensRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorFeedgensResponse
 */
export class TombstoneActorFeedgensResponse extends Message<TombstoneActorFeedgensResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorFeedgensResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorFeedgensResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorFeedgensResponse {
    return new TombstoneActorFeedgensResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFeedgensResponse {
    return new TombstoneActorFeedgensResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorFeedgensResponse {
    return new TombstoneActorFeedgensResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorFeedgensResponse
      | PlainMessage<TombstoneActorFeedgensResponse>
      | undefined,
    b:
      | TombstoneActorFeedgensResponse
      | PlainMessage<TombstoneActorFeedgensResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorFeedgensResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListsRequest
 */
export class TombstoneActorListsRequest extends Message<TombstoneActorListsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorListsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListsRequest {
    return new TombstoneActorListsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListsRequest {
    return new TombstoneActorListsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListsRequest {
    return new TombstoneActorListsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorListsRequest
      | PlainMessage<TombstoneActorListsRequest>
      | undefined,
    b:
      | TombstoneActorListsRequest
      | PlainMessage<TombstoneActorListsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListsRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListsResponse
 */
export class TombstoneActorListsResponse extends Message<TombstoneActorListsResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorListsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListsResponse {
    return new TombstoneActorListsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListsResponse {
    return new TombstoneActorListsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListsResponse {
    return new TombstoneActorListsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TombstoneActorListsResponse
      | PlainMessage<TombstoneActorListsResponse>
      | undefined,
    b:
      | TombstoneActorListsResponse
      | PlainMessage<TombstoneActorListsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListsResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListItemsRequest
 */
export class TombstoneActorListItemsRequest extends Message<TombstoneActorListItemsRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorListItemsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListItemsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListItemsRequest {
    return new TombstoneActorListItemsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListItemsRequest {
    return new TombstoneActorListItemsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListItemsRequest {
    return new TombstoneActorListItemsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorListItemsRequest
      | PlainMessage<TombstoneActorListItemsRequest>
      | undefined,
    b:
      | TombstoneActorListItemsRequest
      | PlainMessage<TombstoneActorListItemsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListItemsRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorListItemsResponse
 */
export class TombstoneActorListItemsResponse extends Message<TombstoneActorListItemsResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorListItemsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorListItemsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorListItemsResponse {
    return new TombstoneActorListItemsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListItemsResponse {
    return new TombstoneActorListItemsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorListItemsResponse {
    return new TombstoneActorListItemsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorListItemsResponse
      | PlainMessage<TombstoneActorListItemsResponse>
      | undefined,
    b:
      | TombstoneActorListItemsResponse
      | PlainMessage<TombstoneActorListItemsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorListItemsResponse, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorThreadgatesRequest
 */
export class TombstoneActorThreadgatesRequest extends Message<TombstoneActorThreadgatesRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = ''

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0

  constructor(data?: PartialMessage<TombstoneActorThreadgatesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorThreadgatesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorThreadgatesRequest {
    return new TombstoneActorThreadgatesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorThreadgatesRequest {
    return new TombstoneActorThreadgatesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorThreadgatesRequest {
    return new TombstoneActorThreadgatesRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorThreadgatesRequest
      | PlainMessage<TombstoneActorThreadgatesRequest>
      | undefined,
    b:
      | TombstoneActorThreadgatesRequest
      | PlainMessage<TombstoneActorThreadgatesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorThreadgatesRequest, a, b)
  }
}

/**
 * @generated from message bsky.TombstoneActorThreadgatesResponse
 */
export class TombstoneActorThreadgatesResponse extends Message<TombstoneActorThreadgatesResponse> {
  /**
   * @generated from field: string cursor = 1;
   */
  cursor = ''

  /**
   * @generated from field: int32 items_affected = 2;
   */
  itemsAffected = 0

  constructor(data?: PartialMessage<TombstoneActorThreadgatesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.TombstoneActorThreadgatesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'cursor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'items_affected',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): TombstoneActorThreadgatesResponse {
    return new TombstoneActorThreadgatesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorThreadgatesResponse {
    return new TombstoneActorThreadgatesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TombstoneActorThreadgatesResponse {
    return new TombstoneActorThreadgatesResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | TombstoneActorThreadgatesResponse
      | PlainMessage<TombstoneActorThreadgatesResponse>
      | undefined,
    b:
      | TombstoneActorThreadgatesResponse
      | PlainMessage<TombstoneActorThreadgatesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(TombstoneActorThreadgatesResponse, a, b)
  }
}

/**
 * @generated from message bsky.CleanupTombstonedActorRequest
 */
export class CleanupTombstonedActorRequest extends Message<CleanupTombstonedActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  constructor(data?: PartialMessage<CleanupTombstonedActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CleanupTombstonedActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CleanupTombstonedActorRequest {
    return new CleanupTombstonedActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CleanupTombstonedActorRequest {
    return new CleanupTombstonedActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CleanupTombstonedActorRequest {
    return new CleanupTombstonedActorRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CleanupTombstonedActorRequest
      | PlainMessage<CleanupTombstonedActorRequest>
      | undefined,
    b:
      | CleanupTombstonedActorRequest
      | PlainMessage<CleanupTombstonedActorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CleanupTombstonedActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.CleanupTombstonedActorResponse
 */
export class CleanupTombstonedActorResponse extends Message<CleanupTombstonedActorResponse> {
  constructor(data?: PartialMessage<CleanupTombstonedActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CleanupTombstonedActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CleanupTombstonedActorResponse {
    return new CleanupTombstonedActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CleanupTombstonedActorResponse {
    return new CleanupTombstonedActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CleanupTombstonedActorResponse {
    return new CleanupTombstonedActorResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CleanupTombstonedActorResponse
      | PlainMessage<CleanupTombstonedActorResponse>
      | undefined,
    b:
      | CleanupTombstonedActorResponse
      | PlainMessage<CleanupTombstonedActorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CleanupTombstonedActorResponse, a, b)
  }
}

/**
 * @generated from message bsky.ResurrectActorRequest
 */
export class ResurrectActorRequest extends Message<ResurrectActorRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: google.protobuf.Timestamp seen = 2;
   */
  seen?: Timestamp

  constructor(data?: PartialMessage<ResurrectActorRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ResurrectActorRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'seen', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ResurrectActorRequest {
    return new ResurrectActorRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ResurrectActorRequest {
    return new ResurrectActorRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ResurrectActorRequest {
    return new ResurrectActorRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ResurrectActorRequest | PlainMessage<ResurrectActorRequest> | undefined,
    b: ResurrectActorRequest | PlainMessage<ResurrectActorRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ResurrectActorRequest, a, b)
  }
}

/**
 * @generated from message bsky.ResurrectActorResponse
 */
export class ResurrectActorResponse extends Message<ResurrectActorResponse> {
  constructor(data?: PartialMessage<ResurrectActorResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ResurrectActorResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ResurrectActorResponse {
    return new ResurrectActorResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ResurrectActorResponse {
    return new ResurrectActorResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ResurrectActorResponse {
    return new ResurrectActorResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ResurrectActorResponse
      | PlainMessage<ResurrectActorResponse>
      | undefined,
    b:
      | ResurrectActorResponse
      | PlainMessage<ResurrectActorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(ResurrectActorResponse, a, b)
  }
}

/**
 * @generated from message bsky.SuggestedFeed
 */
export class SuggestedFeed extends Message<SuggestedFeed> {
  /**
   * @generated from field: string feed_uri = 1;
   */
  feedUri = ''

  /**
   * @generated from field: int64 priority = 2;
   */
  priority = protoInt64.zero

  constructor(data?: PartialMessage<SuggestedFeed>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SuggestedFeed'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'feed_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'priority', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SuggestedFeed {
    return new SuggestedFeed().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SuggestedFeed {
    return new SuggestedFeed().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SuggestedFeed {
    return new SuggestedFeed().fromJsonString(jsonString, options)
  }

  static equals(
    a: SuggestedFeed | PlainMessage<SuggestedFeed> | undefined,
    b: SuggestedFeed | PlainMessage<SuggestedFeed> | undefined,
  ): boolean {
    return proto3.util.equals(SuggestedFeed, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedFeedsRequest
 */
export class CreateSuggestedFeedsRequest extends Message<CreateSuggestedFeedsRequest> {
  /**
   * @generated from field: repeated bsky.SuggestedFeed suggested_feeds = 1;
   */
  suggestedFeeds: SuggestedFeed[] = []

  /**
   * @generated from field: bool trim = 2;
   */
  trim = false

  constructor(data?: PartialMessage<CreateSuggestedFeedsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedFeedsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'suggested_feeds',
      kind: 'message',
      T: SuggestedFeed,
      repeated: true,
    },
    { no: 2, name: 'trim', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedFeedsRequest {
    return new CreateSuggestedFeedsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedFeedsRequest {
    return new CreateSuggestedFeedsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedFeedsRequest {
    return new CreateSuggestedFeedsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateSuggestedFeedsRequest
      | PlainMessage<CreateSuggestedFeedsRequest>
      | undefined,
    b:
      | CreateSuggestedFeedsRequest
      | PlainMessage<CreateSuggestedFeedsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedFeedsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedFeedsResponse
 */
export class CreateSuggestedFeedsResponse extends Message<CreateSuggestedFeedsResponse> {
  constructor(data?: PartialMessage<CreateSuggestedFeedsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedFeedsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedFeedsResponse {
    return new CreateSuggestedFeedsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedFeedsResponse {
    return new CreateSuggestedFeedsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedFeedsResponse {
    return new CreateSuggestedFeedsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateSuggestedFeedsResponse
      | PlainMessage<CreateSuggestedFeedsResponse>
      | undefined,
    b:
      | CreateSuggestedFeedsResponse
      | PlainMessage<CreateSuggestedFeedsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedFeedsResponse, a, b)
  }
}

/**
 * @generated from message bsky.SuggestedActor
 */
export class SuggestedActor extends Message<SuggestedActor> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = ''

  /**
   * @generated from field: int64 priority = 2;
   */
  priority = protoInt64.zero

  constructor(data?: PartialMessage<SuggestedActor>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.SuggestedActor'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'actor_did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'priority', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SuggestedActor {
    return new SuggestedActor().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SuggestedActor {
    return new SuggestedActor().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SuggestedActor {
    return new SuggestedActor().fromJsonString(jsonString, options)
  }

  static equals(
    a: SuggestedActor | PlainMessage<SuggestedActor> | undefined,
    b: SuggestedActor | PlainMessage<SuggestedActor> | undefined,
  ): boolean {
    return proto3.util.equals(SuggestedActor, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedActorsRequest
 */
export class CreateSuggestedActorsRequest extends Message<CreateSuggestedActorsRequest> {
  /**
   * @generated from field: repeated bsky.SuggestedActor suggested_actors = 1;
   */
  suggestedActors: SuggestedActor[] = []

  /**
   * @generated from field: bool trim = 2;
   */
  trim = false

  constructor(data?: PartialMessage<CreateSuggestedActorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedActorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'suggested_actors',
      kind: 'message',
      T: SuggestedActor,
      repeated: true,
    },
    { no: 2, name: 'trim', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedActorsRequest {
    return new CreateSuggestedActorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedActorsRequest {
    return new CreateSuggestedActorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedActorsRequest {
    return new CreateSuggestedActorsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateSuggestedActorsRequest
      | PlainMessage<CreateSuggestedActorsRequest>
      | undefined,
    b:
      | CreateSuggestedActorsRequest
      | PlainMessage<CreateSuggestedActorsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedActorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedActorsResponse
 */
export class CreateSuggestedActorsResponse extends Message<CreateSuggestedActorsResponse> {
  constructor(data?: PartialMessage<CreateSuggestedActorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedActorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedActorsResponse {
    return new CreateSuggestedActorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedActorsResponse {
    return new CreateSuggestedActorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedActorsResponse {
    return new CreateSuggestedActorsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateSuggestedActorsResponse
      | PlainMessage<CreateSuggestedActorsResponse>
      | undefined,
    b:
      | CreateSuggestedActorsResponse
      | PlainMessage<CreateSuggestedActorsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedActorsResponse, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedEntitiesRequest
 */
export class CreateSuggestedEntitiesRequest extends Message<CreateSuggestedEntitiesRequest> {
  /**
   * @generated from field: repeated bsky.SuggestedEntity suggested_entities = 1;
   */
  suggestedEntities: SuggestedEntity[] = []

  /**
   * @generated from field: bool trim = 2;
   */
  trim = false

  constructor(data?: PartialMessage<CreateSuggestedEntitiesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedEntitiesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'suggested_entities',
      kind: 'message',
      T: SuggestedEntity,
      repeated: true,
    },
    { no: 2, name: 'trim', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedEntitiesRequest {
    return new CreateSuggestedEntitiesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedEntitiesRequest {
    return new CreateSuggestedEntitiesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedEntitiesRequest {
    return new CreateSuggestedEntitiesRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateSuggestedEntitiesRequest
      | PlainMessage<CreateSuggestedEntitiesRequest>
      | undefined,
    b:
      | CreateSuggestedEntitiesRequest
      | PlainMessage<CreateSuggestedEntitiesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedEntitiesRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateSuggestedEntitiesResponse
 */
export class CreateSuggestedEntitiesResponse extends Message<CreateSuggestedEntitiesResponse> {
  constructor(data?: PartialMessage<CreateSuggestedEntitiesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateSuggestedEntitiesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateSuggestedEntitiesResponse {
    return new CreateSuggestedEntitiesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedEntitiesResponse {
    return new CreateSuggestedEntitiesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateSuggestedEntitiesResponse {
    return new CreateSuggestedEntitiesResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | CreateSuggestedEntitiesResponse
      | PlainMessage<CreateSuggestedEntitiesResponse>
      | undefined,
    b:
      | CreateSuggestedEntitiesResponse
      | PlainMessage<CreateSuggestedEntitiesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateSuggestedEntitiesResponse, a, b)
  }
}

/**
 * @generated from message bsky.ActorDoNotProcessRecord
 */
export class ActorDoNotProcessRecord extends Message<ActorDoNotProcessRecord> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string reason = 2;
   */
  reason = ''

  /**
   * @generated from field: google.protobuf.Timestamp created = 3;
   */
  created?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp expires = 4;
   */
  expires?: Timestamp

  constructor(data?: PartialMessage<ActorDoNotProcessRecord>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.ActorDoNotProcessRecord'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'reason', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'created', kind: 'message', T: Timestamp },
    { no: 4, name: 'expires', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ActorDoNotProcessRecord {
    return new ActorDoNotProcessRecord().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ActorDoNotProcessRecord {
    return new ActorDoNotProcessRecord().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ActorDoNotProcessRecord {
    return new ActorDoNotProcessRecord().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ActorDoNotProcessRecord
      | PlainMessage<ActorDoNotProcessRecord>
      | undefined,
    b:
      | ActorDoNotProcessRecord
      | PlainMessage<ActorDoNotProcessRecord>
      | undefined,
  ): boolean {
    return proto3.util.equals(ActorDoNotProcessRecord, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorDNPRequest
 */
export class CreateActorDNPRequest extends Message<CreateActorDNPRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string reason = 2;
   */
  reason = ''

  /**
   * @generated from field: google.protobuf.Timestamp expires = 3;
   */
  expires?: Timestamp

  constructor(data?: PartialMessage<CreateActorDNPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorDNPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'reason', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'expires', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorDNPRequest {
    return new CreateActorDNPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorDNPRequest {
    return new CreateActorDNPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorDNPRequest {
    return new CreateActorDNPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateActorDNPRequest | PlainMessage<CreateActorDNPRequest> | undefined,
    b: CreateActorDNPRequest | PlainMessage<CreateActorDNPRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorDNPRequest, a, b)
  }
}

/**
 * @generated from message bsky.CreateActorDNPResponse
 */
export class CreateActorDNPResponse extends Message<CreateActorDNPResponse> {
  constructor(data?: PartialMessage<CreateActorDNPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.CreateActorDNPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateActorDNPResponse {
    return new CreateActorDNPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateActorDNPResponse {
    return new CreateActorDNPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateActorDNPResponse {
    return new CreateActorDNPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateActorDNPResponse
      | PlainMessage<CreateActorDNPResponse>
      | undefined,
    b:
      | CreateActorDNPResponse
      | PlainMessage<CreateActorDNPResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(CreateActorDNPResponse, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorDNPRequest
 */
export class DeleteActorDNPRequest extends Message<DeleteActorDNPRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  constructor(data?: PartialMessage<DeleteActorDNPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorDNPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorDNPRequest {
    return new DeleteActorDNPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorDNPRequest {
    return new DeleteActorDNPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorDNPRequest {
    return new DeleteActorDNPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteActorDNPRequest | PlainMessage<DeleteActorDNPRequest> | undefined,
    b: DeleteActorDNPRequest | PlainMessage<DeleteActorDNPRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorDNPRequest, a, b)
  }
}

/**
 * @generated from message bsky.DeleteActorDNPResponse
 */
export class DeleteActorDNPResponse extends Message<DeleteActorDNPResponse> {
  constructor(data?: PartialMessage<DeleteActorDNPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.DeleteActorDNPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeleteActorDNPResponse {
    return new DeleteActorDNPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorDNPResponse {
    return new DeleteActorDNPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteActorDNPResponse {
    return new DeleteActorDNPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteActorDNPResponse
      | PlainMessage<DeleteActorDNPResponse>
      | undefined,
    b:
      | DeleteActorDNPResponse
      | PlainMessage<DeleteActorDNPResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeleteActorDNPResponse, a, b)
  }
}

/**
 * @generated from message bsky.GetDNPActorsRequest
 */
export class GetDNPActorsRequest extends Message<GetDNPActorsRequest> {
  constructor(data?: PartialMessage<GetDNPActorsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetDNPActorsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDNPActorsRequest {
    return new GetDNPActorsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDNPActorsRequest {
    return new GetDNPActorsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDNPActorsRequest {
    return new GetDNPActorsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetDNPActorsRequest | PlainMessage<GetDNPActorsRequest> | undefined,
    b: GetDNPActorsRequest | PlainMessage<GetDNPActorsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetDNPActorsRequest, a, b)
  }
}

/**
 * @generated from message bsky.GetDNPActorsResponse
 */
export class GetDNPActorsResponse extends Message<GetDNPActorsResponse> {
  /**
   * @generated from field: repeated bsky.ActorDoNotProcessRecord do_not_process_records = 1;
   */
  doNotProcessRecords: ActorDoNotProcessRecord[] = []

  constructor(data?: PartialMessage<GetDNPActorsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.GetDNPActorsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'do_not_process_records',
      kind: 'message',
      T: ActorDoNotProcessRecord,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDNPActorsResponse {
    return new GetDNPActorsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDNPActorsResponse {
    return new GetDNPActorsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDNPActorsResponse {
    return new GetDNPActorsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetDNPActorsResponse | PlainMessage<GetDNPActorsResponse> | undefined,
    b: GetDNPActorsResponse | PlainMessage<GetDNPActorsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetDNPActorsResponse, a, b)
  }
}

/**
 * @generated from message bsky.RunAdminToolRequest
 */
export class RunAdminToolRequest extends Message<RunAdminToolRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp backfill_cutoff = 1;
   */
  backfillCutoff?: Timestamp

  /**
   * @generated from field: uint64 num_workers = 2;
   */
  numWorkers = protoInt64.zero

  constructor(data?: PartialMessage<RunAdminToolRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.RunAdminToolRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'backfill_cutoff', kind: 'message', T: Timestamp },
    {
      no: 2,
      name: 'num_workers',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RunAdminToolRequest {
    return new RunAdminToolRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RunAdminToolRequest {
    return new RunAdminToolRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RunAdminToolRequest {
    return new RunAdminToolRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: RunAdminToolRequest | PlainMessage<RunAdminToolRequest> | undefined,
    b: RunAdminToolRequest | PlainMessage<RunAdminToolRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RunAdminToolRequest, a, b)
  }
}

/**
 * @generated from message bsky.RunAdminToolResponse
 */
export class RunAdminToolResponse extends Message<RunAdminToolResponse> {
  constructor(data?: PartialMessage<RunAdminToolResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bsky.RunAdminToolResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RunAdminToolResponse {
    return new RunAdminToolResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RunAdminToolResponse {
    return new RunAdminToolResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RunAdminToolResponse {
    return new RunAdminToolResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: RunAdminToolResponse | PlainMessage<RunAdminToolResponse> | undefined,
    b: RunAdminToolResponse | PlainMessage<RunAdminToolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RunAdminToolResponse, a, b)
  }
}
