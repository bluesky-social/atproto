// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file courier.proto (package courier, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3, Struct, Timestamp } from '@bufbuild/protobuf'

/**
 * @generated from enum courier.AppPlatform
 */
export enum AppPlatform {
  /**
   * @generated from enum value: APP_PLATFORM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APP_PLATFORM_IOS = 1;
   */
  IOS = 1,

  /**
   * @generated from enum value: APP_PLATFORM_ANDROID = 2;
   */
  ANDROID = 2,

  /**
   * @generated from enum value: APP_PLATFORM_WEB = 3;
   */
  WEB = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AppPlatform)
proto3.util.setEnumType(AppPlatform, 'courier.AppPlatform', [
  { no: 0, name: 'APP_PLATFORM_UNSPECIFIED' },
  { no: 1, name: 'APP_PLATFORM_IOS' },
  { no: 2, name: 'APP_PLATFORM_ANDROID' },
  { no: 3, name: 'APP_PLATFORM_WEB' },
])

/**
 * Ping
 *
 * @generated from message courier.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.PingRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PingRequest {
    return new PingRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PingRequest {
    return new PingRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingRequest | PlainMessage<PingRequest> | undefined,
    b: PingRequest | PlainMessage<PingRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PingRequest, a, b)
  }
}

/**
 * @generated from message courier.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.PingResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PingResponse {
    return new PingResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PingResponse {
    return new PingResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingResponse | PlainMessage<PingResponse> | undefined,
    b: PingResponse | PlainMessage<PingResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PingResponse, a, b)
  }
}

/**
 * @generated from message courier.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string recipient_did = 2;
   */
  recipientDid = ''

  /**
   * @generated from field: string title = 3;
   */
  title = ''

  /**
   * @generated from field: string message = 4;
   */
  message = ''

  /**
   * @generated from field: string collapse_key = 5;
   */
  collapseKey = ''

  /**
   * @generated from field: bool always_deliver = 6;
   */
  alwaysDeliver = false

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 7;
   */
  timestamp?: Timestamp

  /**
   * @generated from field: google.protobuf.Struct additional = 8;
   */
  additional?: Struct

  /**
   * @generated from field: bool client_controlled = 9;
   */
  clientControlled = false

  constructor(data?: PartialMessage<Notification>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.Notification'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'recipient_did',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'title', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'collapse_key',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 6,
      name: 'always_deliver',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 7, name: 'timestamp', kind: 'message', T: Timestamp },
    { no: 8, name: 'additional', kind: 'message', T: Struct },
    {
      no: 9,
      name: 'client_controlled',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Notification {
    return new Notification().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Notification {
    return new Notification().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Notification {
    return new Notification().fromJsonString(jsonString, options)
  }

  static equals(
    a: Notification | PlainMessage<Notification> | undefined,
    b: Notification | PlainMessage<Notification> | undefined,
  ): boolean {
    return proto3.util.equals(Notification, a, b)
  }
}

/**
 * @generated from message courier.PushNotificationsRequest
 */
export class PushNotificationsRequest extends Message<PushNotificationsRequest> {
  /**
   * @generated from field: repeated courier.Notification notifications = 1;
   */
  notifications: Notification[] = []

  constructor(data?: PartialMessage<PushNotificationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.PushNotificationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'notifications',
      kind: 'message',
      T: Notification,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PushNotificationsRequest {
    return new PushNotificationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PushNotificationsRequest {
    return new PushNotificationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PushNotificationsRequest {
    return new PushNotificationsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | PushNotificationsRequest
      | PlainMessage<PushNotificationsRequest>
      | undefined,
    b:
      | PushNotificationsRequest
      | PlainMessage<PushNotificationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(PushNotificationsRequest, a, b)
  }
}

/**
 * @generated from message courier.PushNotificationsResponse
 */
export class PushNotificationsResponse extends Message<PushNotificationsResponse> {
  constructor(data?: PartialMessage<PushNotificationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.PushNotificationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PushNotificationsResponse {
    return new PushNotificationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PushNotificationsResponse {
    return new PushNotificationsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PushNotificationsResponse {
    return new PushNotificationsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | PushNotificationsResponse
      | PlainMessage<PushNotificationsResponse>
      | undefined,
    b:
      | PushNotificationsResponse
      | PlainMessage<PushNotificationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(PushNotificationsResponse, a, b)
  }
}

/**
 * @generated from message courier.RegisterDeviceTokenRequest
 */
export class RegisterDeviceTokenRequest extends Message<RegisterDeviceTokenRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = ''

  /**
   * @generated from field: string token = 2;
   */
  token = ''

  /**
   * @generated from field: string app_id = 3;
   */
  appId = ''

  /**
   * @generated from field: courier.AppPlatform platform = 4;
   */
  platform = AppPlatform.UNSPECIFIED

  constructor(data?: PartialMessage<RegisterDeviceTokenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.RegisterDeviceTokenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'did', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'app_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'platform',
      kind: 'enum',
      T: proto3.getEnumType(AppPlatform),
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RegisterDeviceTokenRequest {
    return new RegisterDeviceTokenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RegisterDeviceTokenRequest {
    return new RegisterDeviceTokenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterDeviceTokenRequest {
    return new RegisterDeviceTokenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | RegisterDeviceTokenRequest
      | PlainMessage<RegisterDeviceTokenRequest>
      | undefined,
    b:
      | RegisterDeviceTokenRequest
      | PlainMessage<RegisterDeviceTokenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(RegisterDeviceTokenRequest, a, b)
  }
}

/**
 * @generated from message courier.RegisterDeviceTokenResponse
 */
export class RegisterDeviceTokenResponse extends Message<RegisterDeviceTokenResponse> {
  constructor(data?: PartialMessage<RegisterDeviceTokenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'courier.RegisterDeviceTokenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RegisterDeviceTokenResponse {
    return new RegisterDeviceTokenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RegisterDeviceTokenResponse {
    return new RegisterDeviceTokenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterDeviceTokenResponse {
    return new RegisterDeviceTokenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | RegisterDeviceTokenResponse
      | PlainMessage<RegisterDeviceTokenResponse>
      | undefined,
    b:
      | RegisterDeviceTokenResponse
      | PlainMessage<RegisterDeviceTokenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(RegisterDeviceTokenResponse, a, b)
  }
}
